{
  "groups": [
    {
      "name": "encrypt",
      "type": "org.springframework.cloud.bootstrap.encrypt.KeyProperties",
      "sourceType": "org.springframework.cloud.bootstrap.encrypt.KeyProperties"
    },
    {
      "name": "encrypt.key-store",
      "type": "org.springframework.cloud.bootstrap.encrypt.KeyProperties$KeyStore",
      "sourceType": "org.springframework.cloud.bootstrap.encrypt.KeyProperties",
      "sourceMethod": "getKeyStore()"
    },
    {
      "name": "encrypt.rsa",
      "type": "org.springframework.cloud.bootstrap.encrypt.RsaProperties",
      "sourceType": "org.springframework.cloud.bootstrap.encrypt.RsaProperties"
    },
    {
      "name": "health.config",
      "type": "org.springframework.cloud.config.client.ConfigClientHealthProperties",
      "sourceType": "org.springframework.cloud.config.client.ConfigClientHealthProperties"
    },
    {
      "name": "logging",
      "type": "org.springframework.boot.context.logging.LoggingApplicationListener"
    },
    {
      "name": "management.endpoint.auditevents",
      "type": "org.springframework.boot.actuate.audit.AuditEventsEndpoint",
      "sourceType": "org.springframework.boot.actuate.audit.AuditEventsEndpoint"
    },
    {
      "name": "management.endpoint.beans",
      "type": "org.springframework.boot.actuate.beans.BeansEndpoint",
      "sourceType": "org.springframework.boot.actuate.beans.BeansEndpoint"
    },
    {
      "name": "management.endpoint.bindings",
      "type": "org.springframework.cloud.stream.endpoint.BindingsEndpoint",
      "sourceType": "org.springframework.cloud.stream.endpoint.BindingsEndpoint"
    },
    {
      "name": "management.endpoint.channels",
      "type": "org.springframework.cloud.stream.endpoint.ChannelsEndpoint",
      "sourceType": "org.springframework.cloud.stream.endpoint.ChannelsEndpoint"
    },
    {
      "name": "management.endpoint.conditions",
      "type": "org.springframework.boot.actuate.autoconfigure.condition.ConditionsReportEndpoint",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.condition.ConditionsReportEndpoint"
    },
    {
      "name": "management.endpoint.configprops",
      "type": "org.springframework.boot.actuate.autoconfigure.context.properties.ConfigurationPropertiesReportEndpointProperties",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.context.properties.ConfigurationPropertiesReportEndpointProperties"
    },
    {
      "name": "management.endpoint.env",
      "type": "org.springframework.boot.actuate.autoconfigure.env.EnvironmentEndpointProperties",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.env.EnvironmentEndpointProperties"
    },
    {
      "name": "management.endpoint.features",
      "type": "org.springframework.cloud.client.actuator.FeaturesEndpoint",
      "sourceType": "org.springframework.cloud.client.actuator.FeaturesEndpoint"
    },
    {
      "name": "management.endpoint.flyway",
      "type": "org.springframework.boot.actuate.flyway.FlywayEndpoint",
      "sourceType": "org.springframework.boot.actuate.flyway.FlywayEndpoint"
    },
    {
      "name": "management.endpoint.health",
      "type": "org.springframework.boot.actuate.autoconfigure.health.HealthEndpointProperties",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.health.HealthEndpointProperties"
    },
    {
      "name": "management.endpoint.heapdump",
      "type": "org.springframework.boot.actuate.management.HeapDumpWebEndpoint",
      "sourceType": "org.springframework.boot.actuate.management.HeapDumpWebEndpoint"
    },
    {
      "name": "management.endpoint.httptrace",
      "type": "org.springframework.boot.actuate.trace.http.HttpTraceEndpoint",
      "sourceType": "org.springframework.boot.actuate.trace.http.HttpTraceEndpoint"
    },
    {
      "name": "management.endpoint.info",
      "type": "org.springframework.boot.actuate.info.InfoEndpoint",
      "sourceType": "org.springframework.boot.actuate.info.InfoEndpoint"
    },
    {
      "name": "management.endpoint.jolokia",
      "type": "org.springframework.boot.actuate.autoconfigure.jolokia.JolokiaProperties",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.jolokia.JolokiaProperties"
    },
    {
      "name": "management.endpoint.liquibase",
      "type": "org.springframework.boot.actuate.liquibase.LiquibaseEndpoint",
      "sourceType": "org.springframework.boot.actuate.liquibase.LiquibaseEndpoint"
    },
    {
      "name": "management.endpoint.logfile",
      "type": "org.springframework.boot.actuate.autoconfigure.logging.LogFileWebEndpointProperties",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.logging.LogFileWebEndpointProperties"
    },
    {
      "name": "management.endpoint.loggers",
      "type": "org.springframework.boot.actuate.logging.LoggersEndpoint",
      "sourceType": "org.springframework.boot.actuate.logging.LoggersEndpoint"
    },
    {
      "name": "management.endpoint.mappings",
      "type": "org.springframework.boot.actuate.web.mappings.MappingsEndpoint",
      "sourceType": "org.springframework.boot.actuate.web.mappings.MappingsEndpoint"
    },
    {
      "name": "management.endpoint.metrics",
      "type": "org.springframework.boot.actuate.metrics.MetricsEndpoint",
      "sourceType": "org.springframework.boot.actuate.metrics.MetricsEndpoint"
    },
    {
      "name": "management.endpoint.prometheus",
      "type": "org.springframework.boot.actuate.metrics.export.prometheus.PrometheusScrapeEndpoint",
      "sourceType": "org.springframework.boot.actuate.metrics.export.prometheus.PrometheusScrapeEndpoint"
    },
    {
      "name": "management.endpoint.refresh",
      "type": "org.springframework.cloud.endpoint.RefreshEndpoint",
      "sourceType": "org.springframework.cloud.endpoint.RefreshEndpoint"
    },
    {
      "name": "management.endpoint.restart",
      "type": "org.springframework.cloud.context.restart.RestartEndpoint",
      "sourceType": "org.springframework.cloud.context.restart.RestartEndpoint"
    },
    {
      "name": "management.endpoint.resume",
      "type": "org.springframework.cloud.context.restart.RestartEndpoint$ResumeEndpoint",
      "sourceType": "org.springframework.cloud.context.restart.RestartEndpoint$ResumeEndpoint"
    },
    {
      "name": "management.endpoint.scheduledtasks",
      "type": "org.springframework.boot.actuate.scheduling.ScheduledTasksEndpoint",
      "sourceType": "org.springframework.boot.actuate.scheduling.ScheduledTasksEndpoint"
    },
    {
      "name": "management.endpoint.service-registry",
      "type": "org.springframework.cloud.client.serviceregistry.endpoint.ServiceRegistryEndpoint",
      "sourceType": "org.springframework.cloud.client.serviceregistry.endpoint.ServiceRegistryEndpoint"
    },
    {
      "name": "management.endpoint.sessions",
      "type": "org.springframework.boot.actuate.session.SessionsEndpoint",
      "sourceType": "org.springframework.boot.actuate.session.SessionsEndpoint"
    },
    {
      "name": "management.endpoint.shutdown",
      "type": "org.springframework.boot.actuate.context.ShutdownEndpoint",
      "sourceType": "org.springframework.boot.actuate.context.ShutdownEndpoint"
    },
    {
      "name": "management.endpoint.threaddump",
      "type": "org.springframework.boot.actuate.management.ThreadDumpEndpoint",
      "sourceType": "org.springframework.boot.actuate.management.ThreadDumpEndpoint"
    },
    {
      "name": "management.endpoints.jmx",
      "type": "org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointProperties",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointProperties"
    },
    {
      "name": "management.endpoints.jmx.exposure",
      "type": "org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointProperties$Exposure",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointProperties",
      "sourceMethod": "getExposure()"
    },
    {
      "name": "management.endpoints.web",
      "type": "org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties"
    },
    {
      "name": "management.endpoints.web.cors",
      "type": "org.springframework.boot.actuate.autoconfigure.endpoint.web.CorsEndpointProperties",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.endpoint.web.CorsEndpointProperties"
    },
    {
      "name": "management.endpoints.web.exposure",
      "type": "org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties$Exposure",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties",
      "sourceMethod": "getExposure()"
    },
    {
      "name": "management.health.diskspace",
      "type": "org.springframework.boot.actuate.autoconfigure.system.DiskSpaceHealthIndicatorProperties",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.system.DiskSpaceHealthIndicatorProperties"
    },
    {
      "name": "management.health.elasticsearch",
      "type": "org.springframework.boot.actuate.autoconfigure.elasticsearch.ElasticsearchHealthIndicatorProperties",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.elasticsearch.ElasticsearchHealthIndicatorProperties"
    },
    {
      "name": "management.health.status",
      "type": "org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorProperties",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorProperties"
    },
    {
      "name": "management.info",
      "type": "org.springframework.boot.actuate.autoconfigure.info.InfoContributorProperties",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.info.InfoContributorProperties"
    },
    {
      "name": "management.info.git",
      "type": "org.springframework.boot.actuate.autoconfigure.info.InfoContributorProperties$Git",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.info.InfoContributorProperties",
      "sourceMethod": "getGit()"
    },
    {
      "name": "management.metrics",
      "type": "org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties"
    },
    {
      "name": "management.metrics.distribution",
      "type": "org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties$Distribution",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties",
      "sourceMethod": "getDistribution()"
    },
    {
      "name": "management.metrics.export.atlas",
      "type": "org.springframework.boot.actuate.autoconfigure.metrics.export.atlas.AtlasProperties",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.atlas.AtlasProperties"
    },
    {
      "name": "management.metrics.export.datadog",
      "type": "org.springframework.boot.actuate.autoconfigure.metrics.export.datadog.DatadogProperties",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.datadog.DatadogProperties"
    },
    {
      "name": "management.metrics.export.ganglia",
      "type": "org.springframework.boot.actuate.autoconfigure.metrics.export.ganglia.GangliaProperties",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.ganglia.GangliaProperties"
    },
    {
      "name": "management.metrics.export.graphite",
      "type": "org.springframework.boot.actuate.autoconfigure.metrics.export.graphite.GraphiteProperties",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.graphite.GraphiteProperties"
    },
    {
      "name": "management.metrics.export.influx",
      "type": "org.springframework.boot.actuate.autoconfigure.metrics.export.influx.InfluxProperties",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.influx.InfluxProperties"
    },
    {
      "name": "management.metrics.export.jmx",
      "type": "org.springframework.boot.actuate.autoconfigure.metrics.export.jmx.JmxProperties",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.jmx.JmxProperties"
    },
    {
      "name": "management.metrics.export.newrelic",
      "type": "org.springframework.boot.actuate.autoconfigure.metrics.export.newrelic.NewRelicProperties",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.newrelic.NewRelicProperties"
    },
    {
      "name": "management.metrics.export.prometheus",
      "type": "org.springframework.boot.actuate.autoconfigure.metrics.export.prometheus.PrometheusProperties",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.prometheus.PrometheusProperties"
    },
    {
      "name": "management.metrics.export.signalfx",
      "type": "org.springframework.boot.actuate.autoconfigure.metrics.export.signalfx.SignalFxProperties",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.signalfx.SignalFxProperties"
    },
    {
      "name": "management.metrics.export.simple",
      "type": "org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleProperties",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleProperties"
    },
    {
      "name": "management.metrics.export.statsd",
      "type": "org.springframework.boot.actuate.autoconfigure.metrics.export.statsd.StatsdProperties",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.statsd.StatsdProperties"
    },
    {
      "name": "management.metrics.export.wavefront",
      "type": "org.springframework.boot.actuate.autoconfigure.metrics.export.wavefront.WavefrontProperties",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.wavefront.WavefrontProperties"
    },
    {
      "name": "management.metrics.web",
      "type": "org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties$Web",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties",
      "sourceMethod": "getWeb()"
    },
    {
      "name": "management.metrics.web.client",
      "type": "org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties$Web$Client",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties$Web",
      "sourceMethod": "getClient()"
    },
    {
      "name": "management.metrics.web.server",
      "type": "org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties$Web$Server",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties$Web",
      "sourceMethod": "getServer()"
    },
    {
      "name": "management.server",
      "type": "org.springframework.boot.actuate.autoconfigure.web.server.ManagementServerProperties",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.web.server.ManagementServerProperties"
    },
    {
      "name": "management.server.servlet",
      "type": "org.springframework.boot.actuate.autoconfigure.web.server.ManagementServerProperties$Servlet",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.web.server.ManagementServerProperties",
      "sourceMethod": "getServlet()"
    },
    {
      "name": "management.server.ssl",
      "type": "org.springframework.boot.web.server.Ssl",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.web.server.ManagementServerProperties",
      "sourceMethod": "getSsl()"
    },
    {
      "name": "management.trace.http",
      "type": "org.springframework.boot.actuate.autoconfigure.trace.http.HttpTraceProperties",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.trace.http.HttpTraceProperties"
    },
    {
      "name": "mongodb",
      "type": "org.rpis5.chapters.chapter_08.dataflow.mongodb.processor.MongodbProcessorProperties",
      "sourceType": "org.rpis5.chapters.chapter_08.dataflow.mongodb.processor.MongodbProcessorProperties"
    },
    {
      "name": "server",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties"
    },
    {
      "name": "server.compression",
      "type": "org.springframework.boot.web.server.Compression",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "sourceMethod": "getCompression()"
    },
    {
      "name": "server.error",
      "type": "org.springframework.boot.autoconfigure.web.ErrorProperties",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "sourceMethod": "getError()"
    },
    {
      "name": "server.error.whitelabel",
      "type": "org.springframework.boot.autoconfigure.web.ErrorProperties$Whitelabel",
      "sourceType": "org.springframework.boot.autoconfigure.web.ErrorProperties",
      "sourceMethod": "getWhitelabel()"
    },
    {
      "name": "server.http2",
      "type": "org.springframework.boot.web.server.Http2",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "sourceMethod": "getHttp2()"
    },
    {
      "name": "server.jetty",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "sourceMethod": "getJetty()"
    },
    {
      "name": "server.jetty.accesslog",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty$Accesslog",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty",
      "sourceMethod": "getAccesslog()"
    },
    {
      "name": "server.servlet",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties$Servlet",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "sourceMethod": "getServlet()"
    },
    {
      "name": "server.servlet.jsp",
      "type": "org.springframework.boot.web.servlet.server.Jsp",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Servlet",
      "sourceMethod": "getJsp()"
    },
    {
      "name": "server.servlet.session",
      "type": "org.springframework.boot.web.servlet.server.Session",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Servlet",
      "sourceMethod": "getSession()"
    },
    {
      "name": "server.servlet.session.cookie",
      "type": "org.springframework.boot.web.servlet.server.Session$Cookie",
      "sourceType": "org.springframework.boot.web.servlet.server.Session",
      "sourceMethod": "getCookie()"
    },
    {
      "name": "server.ssl",
      "type": "org.springframework.boot.web.server.Ssl",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "sourceMethod": "getSsl()"
    },
    {
      "name": "server.tomcat",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "sourceMethod": "getTomcat()"
    },
    {
      "name": "server.tomcat.accesslog",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "sourceMethod": "getAccesslog()"
    },
    {
      "name": "server.tomcat.resource",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Resource",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "sourceMethod": "getResource()"
    },
    {
      "name": "server.undertow",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "sourceMethod": "getUndertow()"
    },
    {
      "name": "server.undertow.accesslog",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow$Accesslog",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow",
      "sourceMethod": "getAccesslog()"
    },
    {
      "name": "spring.activemq",
      "type": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties"
    },
    {
      "name": "spring.activemq.packages",
      "type": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Packages",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties",
      "sourceMethod": "getPackages()"
    },
    {
      "name": "spring.activemq.pool",
      "type": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties",
      "sourceMethod": "getPool()"
    },
    {
      "name": "spring.artemis",
      "type": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties"
    },
    {
      "name": "spring.artemis.embedded",
      "type": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties$Embedded",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties",
      "sourceMethod": "getEmbedded()"
    },
    {
      "name": "spring.batch",
      "type": "org.springframework.boot.autoconfigure.batch.BatchProperties",
      "sourceType": "org.springframework.boot.autoconfigure.batch.BatchProperties"
    },
    {
      "name": "spring.batch.job",
      "type": "org.springframework.boot.autoconfigure.batch.BatchProperties$Job",
      "sourceType": "org.springframework.boot.autoconfigure.batch.BatchProperties",
      "sourceMethod": "getJob()"
    },
    {
      "name": "spring.cache",
      "type": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties"
    },
    {
      "name": "spring.cache.caffeine",
      "type": "org.springframework.boot.autoconfigure.cache.CacheProperties$Caffeine",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "sourceMethod": "getCaffeine()"
    },
    {
      "name": "spring.cache.couchbase",
      "type": "org.springframework.boot.autoconfigure.cache.CacheProperties$Couchbase",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "sourceMethod": "getCouchbase()"
    },
    {
      "name": "spring.cache.ehcache",
      "type": "org.springframework.boot.autoconfigure.cache.CacheProperties$EhCache",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "sourceMethod": "getEhcache()"
    },
    {
      "name": "spring.cache.infinispan",
      "type": "org.springframework.boot.autoconfigure.cache.CacheProperties$Infinispan",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "sourceMethod": "getInfinispan()"
    },
    {
      "name": "spring.cache.jcache",
      "type": "org.springframework.boot.autoconfigure.cache.CacheProperties$JCache",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "sourceMethod": "getJcache()"
    },
    {
      "name": "spring.cache.redis",
      "type": "org.springframework.boot.autoconfigure.cache.CacheProperties$Redis",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "sourceMethod": "getRedis()"
    },
    {
      "name": "spring.cloud.config",
      "type": "org.springframework.cloud.bootstrap.config.PropertySourceBootstrapProperties",
      "sourceType": "org.springframework.cloud.bootstrap.config.PropertySourceBootstrapProperties"
    },
    {
      "name": "spring.cloud.config.discovery",
      "type": "org.springframework.cloud.config.client.ConfigClientProperties$Discovery",
      "sourceType": "org.springframework.cloud.config.client.ConfigClientProperties",
      "sourceMethod": "getDiscovery()"
    },
    {
      "name": "spring.cloud.config.retry",
      "type": "org.springframework.cloud.config.client.RetryProperties",
      "sourceType": "org.springframework.cloud.config.client.RetryProperties"
    },
    {
      "name": "spring.cloud.discovery.client.health-indicator",
      "type": "org.springframework.cloud.client.discovery.health.DiscoveryClientHealthIndicatorProperties",
      "sourceType": "org.springframework.cloud.client.discovery.health.DiscoveryClientHealthIndicatorProperties"
    },
    {
      "name": "spring.cloud.discovery.client.simple",
      "type": "org.springframework.cloud.client.discovery.simple.SimpleDiscoveryProperties",
      "sourceType": "org.springframework.cloud.client.discovery.simple.SimpleDiscoveryProperties"
    },
    {
      "name": "spring.cloud.discovery.client.simple.local",
      "type": "org.springframework.cloud.client.discovery.simple.SimpleDiscoveryProperties$SimpleServiceInstance",
      "sourceType": "org.springframework.cloud.client.discovery.simple.SimpleDiscoveryProperties",
      "sourceMethod": "getLocal()"
    },
    {
      "name": "spring.cloud.hypermedia",
      "type": "org.springframework.cloud.client.hypermedia.CloudHypermediaAutoConfiguration$CloudHypermediaProperties",
      "sourceType": "org.springframework.cloud.client.hypermedia.CloudHypermediaAutoConfiguration$CloudHypermediaProperties"
    },
    {
      "name": "spring.cloud.hypermedia.refresh",
      "type": "org.springframework.cloud.client.hypermedia.CloudHypermediaAutoConfiguration$CloudHypermediaProperties$Refresh",
      "sourceType": "org.springframework.cloud.client.hypermedia.CloudHypermediaAutoConfiguration$CloudHypermediaProperties",
      "sourceMethod": "getRefresh()"
    },
    {
      "name": "spring.cloud.inetutils",
      "type": "org.springframework.cloud.commons.util.InetUtilsProperties",
      "sourceType": "org.springframework.cloud.commons.util.InetUtilsProperties"
    },
    {
      "name": "spring.cloud.loadbalancer.retry",
      "type": "org.springframework.cloud.client.loadbalancer.LoadBalancerRetryProperties",
      "sourceType": "org.springframework.cloud.client.loadbalancer.LoadBalancerRetryProperties"
    },
    {
      "name": "spring.cloud.service-registry.auto-registration",
      "type": "org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationProperties",
      "sourceType": "org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationProperties"
    },
    {
      "name": "spring.cloud.stream",
      "type": "org.springframework.cloud.stream.config.BindingServiceProperties",
      "sourceType": "org.springframework.cloud.stream.config.BindingServiceProperties"
    },
    {
      "name": "spring.cloud.stream.integration",
      "type": "org.springframework.cloud.stream.config.SpringIntegrationProperties",
      "sourceType": "org.springframework.cloud.stream.config.SpringIntegrationProperties"
    },
    {
      "name": "spring.cloud.stream.metrics",
      "type": "org.springframework.cloud.stream.micrometer.ApplicationMetricsProperties",
      "sourceType": "org.springframework.cloud.stream.micrometer.ApplicationMetricsProperties"
    },
    {
      "name": "spring.cloud.stream.rabbit",
      "type": "org.springframework.cloud.stream.binder.rabbit.properties.RabbitExtendedBindingProperties",
      "sourceType": "org.springframework.cloud.stream.binder.rabbit.properties.RabbitExtendedBindingProperties"
    },
    {
      "name": "spring.cloud.stream.rabbit.binder",
      "type": "org.springframework.cloud.stream.binder.rabbit.properties.RabbitBinderConfigurationProperties",
      "sourceType": "org.springframework.cloud.stream.binder.rabbit.properties.RabbitBinderConfigurationProperties"
    },
    {
      "name": "spring.couchbase",
      "type": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties"
    },
    {
      "name": "spring.couchbase.bucket",
      "type": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Bucket",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties",
      "sourceMethod": "getBucket()"
    },
    {
      "name": "spring.couchbase.env",
      "type": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Env",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties",
      "sourceMethod": "getEnv()"
    },
    {
      "name": "spring.couchbase.env.endpoints",
      "type": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Endpoints",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Env",
      "sourceMethod": "getEndpoints()"
    },
    {
      "name": "spring.couchbase.env.endpoints.queryservice",
      "type": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Endpoints$CouchbaseService",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Endpoints",
      "sourceMethod": "getQueryservice()"
    },
    {
      "name": "spring.couchbase.env.endpoints.viewservice",
      "type": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Endpoints$CouchbaseService",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Endpoints",
      "sourceMethod": "getViewservice()"
    },
    {
      "name": "spring.couchbase.env.ssl",
      "type": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Ssl",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Env",
      "sourceMethod": "getSsl()"
    },
    {
      "name": "spring.couchbase.env.timeouts",
      "type": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Timeouts",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Env",
      "sourceMethod": "getTimeouts()"
    },
    {
      "name": "spring.data.cassandra",
      "type": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.cassandra.pool",
      "type": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties$Pool",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "sourceMethod": "getPool()"
    },
    {
      "name": "spring.data.couchbase",
      "type": "org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataProperties",
      "sourceType": "org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataProperties"
    },
    {
      "name": "spring.data.elasticsearch",
      "type": "org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchProperties",
      "sourceType": "org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchProperties"
    },
    {
      "name": "spring.data.mongodb",
      "type": "org.springframework.boot.autoconfigure.mongo.MongoProperties",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties"
    },
    {
      "name": "spring.data.neo4j",
      "type": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties",
      "sourceType": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties"
    },
    {
      "name": "spring.data.neo4j.embedded",
      "type": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties$Embedded",
      "sourceType": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties",
      "sourceMethod": "getEmbedded()"
    },
    {
      "name": "spring.data.rest",
      "type": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties",
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties"
    },
    {
      "name": "spring.data.solr",
      "type": "org.springframework.boot.autoconfigure.solr.SolrProperties",
      "sourceType": "org.springframework.boot.autoconfigure.solr.SolrProperties"
    },
    {
      "name": "spring.data.web",
      "type": "org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties",
      "sourceType": "org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties"
    },
    {
      "name": "spring.data.web.pageable",
      "type": "org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties$Pageable",
      "sourceType": "org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties",
      "sourceMethod": "getPageable()"
    },
    {
      "name": "spring.data.web.sort",
      "type": "org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties$Sort",
      "sourceType": "org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties",
      "sourceMethod": "getSort()"
    },
    {
      "name": "spring.datasource",
      "type": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.dbcp2",
      "type": "org.apache.commons.dbcp2.BasicDataSource",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Dbcp2",
      "sourceMethod": "dataSource(org.springframework.boot.autoconfigure.jdbc.DataSourceProperties)"
    },
    {
      "name": "spring.datasource.hikari",
      "type": "com.zaxxer.hikari.HikariDataSource",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Hikari",
      "sourceMethod": "dataSource(org.springframework.boot.autoconfigure.jdbc.DataSourceProperties)"
    },
    {
      "name": "spring.datasource.tomcat",
      "type": "org.apache.tomcat.jdbc.pool.DataSource",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Tomcat",
      "sourceMethod": "dataSource(org.springframework.boot.autoconfigure.jdbc.DataSourceProperties)"
    },
    {
      "name": "spring.datasource.xa",
      "type": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties$Xa",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "sourceMethod": "getXa()"
    },
    {
      "name": "spring.elasticsearch.jest",
      "type": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties",
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties"
    },
    {
      "name": "spring.elasticsearch.jest.proxy",
      "type": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties$Proxy",
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties",
      "sourceMethod": "getProxy()"
    },
    {
      "name": "spring.flyway",
      "type": "org.flywaydb.core.Flyway",
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration",
      "sourceMethod": "flyway()"
    },
    {
      "name": "spring.freemarker",
      "type": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties"
    },
    {
      "name": "spring.groovy.template",
      "type": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties"
    },
    {
      "name": "spring.groovy.template.configuration",
      "type": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration$GroovyMarkupConfiguration",
      "sourceMethod": "groovyMarkupConfigurer()"
    },
    {
      "name": "spring.gson",
      "type": "org.springframework.boot.autoconfigure.gson.GsonProperties",
      "sourceType": "org.springframework.boot.autoconfigure.gson.GsonProperties"
    },
    {
      "name": "spring.h2.console",
      "type": "org.springframework.boot.autoconfigure.h2.H2ConsoleProperties",
      "sourceType": "org.springframework.boot.autoconfigure.h2.H2ConsoleProperties"
    },
    {
      "name": "spring.h2.console.settings",
      "type": "org.springframework.boot.autoconfigure.h2.H2ConsoleProperties$Settings",
      "sourceType": "org.springframework.boot.autoconfigure.h2.H2ConsoleProperties",
      "sourceMethod": "getSettings()"
    },
    {
      "name": "spring.hateoas",
      "type": "org.springframework.boot.autoconfigure.hateoas.HateoasProperties",
      "sourceType": "org.springframework.boot.autoconfigure.hateoas.HateoasProperties"
    },
    {
      "name": "spring.hazelcast",
      "type": "org.springframework.boot.autoconfigure.hazelcast.HazelcastProperties",
      "sourceType": "org.springframework.boot.autoconfigure.hazelcast.HazelcastProperties"
    },
    {
      "name": "spring.http.encoding",
      "type": "org.springframework.boot.autoconfigure.http.HttpEncodingProperties",
      "sourceType": "org.springframework.boot.autoconfigure.http.HttpEncodingProperties"
    },
    {
      "name": "spring.influx",
      "type": "org.springframework.boot.autoconfigure.influx.InfluxDbProperties",
      "sourceType": "org.springframework.boot.autoconfigure.influx.InfluxDbProperties"
    },
    {
      "name": "spring.info",
      "type": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties",
      "sourceType": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties"
    },
    {
      "name": "spring.info.build",
      "type": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties$Build",
      "sourceType": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties",
      "sourceMethod": "getBuild()"
    },
    {
      "name": "spring.info.git",
      "type": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties$Git",
      "sourceType": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties",
      "sourceMethod": "getGit()"
    },
    {
      "name": "spring.integration",
      "type": "org.springframework.boot.autoconfigure.integration.IntegrationProperties",
      "sourceType": "org.springframework.boot.autoconfigure.integration.IntegrationProperties"
    },
    {
      "name": "spring.integration.jdbc",
      "type": "org.springframework.boot.autoconfigure.integration.IntegrationProperties$Jdbc",
      "sourceType": "org.springframework.boot.autoconfigure.integration.IntegrationProperties",
      "sourceMethod": "getJdbc()"
    },
    {
      "name": "spring.integration.poller",
      "type": "org.springframework.cloud.stream.config.DefaultPollerProperties",
      "sourceType": "org.springframework.cloud.stream.config.DefaultPollerProperties"
    },
    {
      "name": "spring.jackson",
      "type": "org.springframework.boot.autoconfigure.jackson.JacksonProperties",
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties"
    },
    {
      "name": "spring.jdbc",
      "type": "org.springframework.boot.autoconfigure.jdbc.JdbcProperties",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.JdbcProperties"
    },
    {
      "name": "spring.jdbc.template",
      "type": "org.springframework.boot.autoconfigure.jdbc.JdbcProperties$Template",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.JdbcProperties",
      "sourceMethod": "getTemplate()"
    },
    {
      "name": "spring.jersey",
      "type": "org.springframework.boot.autoconfigure.jersey.JerseyProperties",
      "sourceType": "org.springframework.boot.autoconfigure.jersey.JerseyProperties"
    },
    {
      "name": "spring.jersey.filter",
      "type": "org.springframework.boot.autoconfigure.jersey.JerseyProperties$Filter",
      "sourceType": "org.springframework.boot.autoconfigure.jersey.JerseyProperties",
      "sourceMethod": "getFilter()"
    },
    {
      "name": "spring.jersey.servlet",
      "type": "org.springframework.boot.autoconfigure.jersey.JerseyProperties$Servlet",
      "sourceType": "org.springframework.boot.autoconfigure.jersey.JerseyProperties",
      "sourceMethod": "getServlet()"
    },
    {
      "name": "spring.jms",
      "type": "org.springframework.boot.autoconfigure.jms.JmsProperties",
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties"
    },
    {
      "name": "spring.jms.listener",
      "type": "org.springframework.boot.autoconfigure.jms.JmsProperties$Listener",
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties",
      "sourceMethod": "getListener()"
    },
    {
      "name": "spring.jms.template",
      "type": "org.springframework.boot.autoconfigure.jms.JmsProperties$Template",
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties",
      "sourceMethod": "getTemplate()"
    },
    {
      "name": "spring.jooq",
      "type": "org.springframework.boot.autoconfigure.jooq.JooqProperties",
      "sourceType": "org.springframework.boot.autoconfigure.jooq.JooqProperties"
    },
    {
      "name": "spring.jpa",
      "type": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties"
    },
    {
      "name": "spring.jpa.hibernate",
      "type": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Hibernate",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties",
      "sourceMethod": "getHibernate()"
    },
    {
      "name": "spring.jpa.hibernate.naming",
      "type": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Naming",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Hibernate",
      "sourceMethod": "getNaming()"
    },
    {
      "name": "spring.jta",
      "type": "org.springframework.boot.autoconfigure.transaction.jta.JtaProperties",
      "sourceType": "org.springframework.boot.autoconfigure.transaction.jta.JtaProperties"
    },
    {
      "name": "spring.jta.atomikos.connectionfactory",
      "type": "org.springframework.boot.jta.atomikos.AtomikosConnectionFactoryBean",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosConnectionFactoryBean"
    },
    {
      "name": "spring.jta.atomikos.datasource",
      "type": "org.springframework.boot.jta.atomikos.AtomikosDataSourceBean",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosDataSourceBean"
    },
    {
      "name": "spring.jta.atomikos.properties",
      "type": "org.springframework.boot.jta.atomikos.AtomikosProperties",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosProperties"
    },
    {
      "name": "spring.jta.atomikos.properties.recovery",
      "type": "org.springframework.boot.jta.atomikos.AtomikosProperties$Recovery",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosProperties",
      "sourceMethod": "getRecovery()"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory",
      "type": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.datasource",
      "type": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.properties",
      "type": "bitronix.tm.Configuration",
      "sourceType": "org.springframework.boot.autoconfigure.transaction.jta.BitronixJtaConfiguration",
      "sourceMethod": "bitronixConfiguration()"
    },
    {
      "name": "spring.jta.narayana",
      "type": "org.springframework.boot.jta.narayana.NarayanaProperties",
      "sourceType": "org.springframework.boot.jta.narayana.NarayanaProperties"
    },
    {
      "name": "spring.kafka",
      "type": "org.springframework.boot.autoconfigure.kafka.KafkaProperties",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties"
    },
    {
      "name": "spring.kafka.admin",
      "type": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Admin",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties",
      "sourceMethod": "getAdmin()"
    },
    {
      "name": "spring.kafka.admin.ssl",
      "type": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Admin",
      "sourceMethod": "getSsl()"
    },
    {
      "name": "spring.kafka.consumer",
      "type": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties",
      "sourceMethod": "getConsumer()"
    },
    {
      "name": "spring.kafka.consumer.ssl",
      "type": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer",
      "sourceMethod": "getSsl()"
    },
    {
      "name": "spring.kafka.jaas",
      "type": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Jaas",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties",
      "sourceMethod": "getJaas()"
    },
    {
      "name": "spring.kafka.listener",
      "type": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Listener",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties",
      "sourceMethod": "getListener()"
    },
    {
      "name": "spring.kafka.producer",
      "type": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties",
      "sourceMethod": "getProducer()"
    },
    {
      "name": "spring.kafka.producer.ssl",
      "type": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer",
      "sourceMethod": "getSsl()"
    },
    {
      "name": "spring.kafka.ssl",
      "type": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties",
      "sourceMethod": "getSsl()"
    },
    {
      "name": "spring.kafka.template",
      "type": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Template",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties",
      "sourceMethod": "getTemplate()"
    },
    {
      "name": "spring.ldap",
      "type": "org.springframework.boot.autoconfigure.ldap.LdapProperties",
      "sourceType": "org.springframework.boot.autoconfigure.ldap.LdapProperties"
    },
    {
      "name": "spring.ldap.embedded",
      "type": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties",
      "sourceType": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties"
    },
    {
      "name": "spring.ldap.embedded.credential",
      "type": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties$Credential",
      "sourceType": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties",
      "sourceMethod": "getCredential()"
    },
    {
      "name": "spring.ldap.embedded.validation",
      "type": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties$Validation",
      "sourceType": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties",
      "sourceMethod": "getValidation()"
    },
    {
      "name": "spring.liquibase",
      "type": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties"
    },
    {
      "name": "spring.mail",
      "type": "org.springframework.boot.autoconfigure.mail.MailProperties",
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties"
    },
    {
      "name": "spring.messages",
      "type": "org.springframework.boot.autoconfigure.context.MessageSourceProperties",
      "sourceType": "org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration",
      "sourceMethod": "messageSourceProperties()"
    },
    {
      "name": "spring.mongodb.embedded",
      "type": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties"
    },
    {
      "name": "spring.mongodb.embedded.storage",
      "type": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties$Storage",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties",
      "sourceMethod": "getStorage()"
    },
    {
      "name": "spring.mustache",
      "type": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties"
    },
    {
      "name": "spring.mvc",
      "type": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties",
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties"
    },
    {
      "name": "spring.mvc.async",
      "type": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$Async",
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties",
      "sourceMethod": "getAsync()"
    },
    {
      "name": "spring.mvc.contentnegotiation",
      "type": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$Contentnegotiation",
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties",
      "sourceMethod": "getContentnegotiation()"
    },
    {
      "name": "spring.mvc.pathmatch",
      "type": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$Pathmatch",
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties",
      "sourceMethod": "getPathmatch()"
    },
    {
      "name": "spring.mvc.servlet",
      "type": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$Servlet",
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties",
      "sourceMethod": "getServlet()"
    },
    {
      "name": "spring.mvc.view",
      "type": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$View",
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties",
      "sourceMethod": "getView()"
    },
    {
      "name": "spring.quartz",
      "type": "org.springframework.boot.autoconfigure.quartz.QuartzProperties",
      "sourceType": "org.springframework.boot.autoconfigure.quartz.QuartzProperties"
    },
    {
      "name": "spring.quartz.jdbc",
      "type": "org.springframework.boot.autoconfigure.quartz.QuartzProperties$Jdbc",
      "sourceType": "org.springframework.boot.autoconfigure.quartz.QuartzProperties",
      "sourceMethod": "getJdbc()"
    },
    {
      "name": "spring.rabbitmq",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties"
    },
    {
      "name": "spring.rabbitmq.cache",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "sourceMethod": "getCache()"
    },
    {
      "name": "spring.rabbitmq.cache.channel",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache$Channel",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache",
      "sourceMethod": "getChannel()"
    },
    {
      "name": "spring.rabbitmq.cache.connection",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache$Connection",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache",
      "sourceMethod": "getConnection()"
    },
    {
      "name": "spring.rabbitmq.listener",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Listener",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "sourceMethod": "getListener()"
    },
    {
      "name": "spring.rabbitmq.listener.direct",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$DirectContainer",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Listener",
      "sourceMethod": "getDirect()"
    },
    {
      "name": "spring.rabbitmq.listener.direct.retry",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$DirectContainer",
      "sourceMethod": "getRetry()"
    },
    {
      "name": "spring.rabbitmq.listener.simple",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$SimpleContainer",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Listener",
      "sourceMethod": "getSimple()"
    },
    {
      "name": "spring.rabbitmq.listener.simple.retry",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$SimpleContainer",
      "sourceMethod": "getRetry()"
    },
    {
      "name": "spring.rabbitmq.ssl",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "sourceMethod": "getSsl()"
    },
    {
      "name": "spring.rabbitmq.template",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Template",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "sourceMethod": "getTemplate()"
    },
    {
      "name": "spring.rabbitmq.template.retry",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Retry",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Template",
      "sourceMethod": "getRetry()"
    },
    {
      "name": "spring.reactor",
      "type": "org.springframework.boot.autoconfigure.reactor.core.ReactorCoreProperties",
      "sourceType": "org.springframework.boot.autoconfigure.reactor.core.ReactorCoreProperties"
    },
    {
      "name": "spring.reactor.stacktrace-mode",
      "type": "org.springframework.boot.autoconfigure.reactor.core.ReactorCoreProperties$StacktraceMode",
      "sourceType": "org.springframework.boot.autoconfigure.reactor.core.ReactorCoreProperties",
      "sourceMethod": "getStacktraceMode()"
    },
    {
      "name": "spring.redis",
      "type": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties"
    },
    {
      "name": "spring.redis.cluster",
      "type": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Cluster",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "sourceMethod": "getCluster()"
    },
    {
      "name": "spring.redis.jedis",
      "type": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Jedis",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "sourceMethod": "getJedis()"
    },
    {
      "name": "spring.redis.jedis.pool",
      "type": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Jedis",
      "sourceMethod": "getPool()"
    },
    {
      "name": "spring.redis.lettuce",
      "type": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Lettuce",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "sourceMethod": "getLettuce()"
    },
    {
      "name": "spring.redis.lettuce.pool",
      "type": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Lettuce",
      "sourceMethod": "getPool()"
    },
    {
      "name": "spring.redis.sentinel",
      "type": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Sentinel",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "sourceMethod": "getSentinel()"
    },
    {
      "name": "spring.resources",
      "type": "org.springframework.boot.autoconfigure.web.ResourceProperties",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties"
    },
    {
      "name": "spring.resources.cache",
      "type": "org.springframework.boot.autoconfigure.web.ResourceProperties$Cache",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties",
      "sourceMethod": "getCache()"
    },
    {
      "name": "spring.resources.cache.cachecontrol",
      "type": "org.springframework.boot.autoconfigure.web.ResourceProperties$Cache$Cachecontrol",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Cache",
      "sourceMethod": "getCachecontrol()"
    },
    {
      "name": "spring.resources.chain",
      "type": "org.springframework.boot.autoconfigure.web.ResourceProperties$Chain",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties",
      "sourceMethod": "getChain()"
    },
    {
      "name": "spring.resources.chain.strategy",
      "type": "org.springframework.boot.autoconfigure.web.ResourceProperties$Strategy",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Chain",
      "sourceMethod": "getStrategy()"
    },
    {
      "name": "spring.resources.chain.strategy.content",
      "type": "org.springframework.boot.autoconfigure.web.ResourceProperties$Content",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Strategy",
      "sourceMethod": "getContent()"
    },
    {
      "name": "spring.resources.chain.strategy.fixed",
      "type": "org.springframework.boot.autoconfigure.web.ResourceProperties$Fixed",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Strategy",
      "sourceMethod": "getFixed()"
    },
    {
      "name": "spring.security",
      "type": "org.springframework.boot.autoconfigure.security.SecurityProperties",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties"
    },
    {
      "name": "spring.security.filter",
      "type": "org.springframework.boot.autoconfigure.security.SecurityProperties$Filter",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties",
      "sourceMethod": "getFilter()"
    },
    {
      "name": "spring.security.oauth2.client",
      "type": "org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties"
    },
    {
      "name": "spring.security.user",
      "type": "org.springframework.boot.autoconfigure.security.SecurityProperties$User",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties",
      "sourceMethod": "getUser()"
    },
    {
      "name": "spring.sendgrid",
      "type": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties",
      "sourceType": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties"
    },
    {
      "name": "spring.sendgrid.proxy",
      "type": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties$Proxy",
      "sourceType": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties",
      "sourceMethod": "getProxy()"
    },
    {
      "name": "spring.servlet.multipart",
      "type": "org.springframework.boot.autoconfigure.web.servlet.MultipartProperties",
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.MultipartProperties"
    },
    {
      "name": "spring.session",
      "type": "org.springframework.boot.autoconfigure.session.SessionProperties",
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties"
    },
    {
      "name": "spring.session.hazelcast",
      "type": "org.springframework.boot.autoconfigure.session.HazelcastSessionProperties",
      "sourceType": "org.springframework.boot.autoconfigure.session.HazelcastSessionProperties"
    },
    {
      "name": "spring.session.jdbc",
      "type": "org.springframework.boot.autoconfigure.session.JdbcSessionProperties",
      "sourceType": "org.springframework.boot.autoconfigure.session.JdbcSessionProperties"
    },
    {
      "name": "spring.session.mongodb",
      "type": "org.springframework.boot.autoconfigure.session.MongoSessionProperties",
      "sourceType": "org.springframework.boot.autoconfigure.session.MongoSessionProperties"
    },
    {
      "name": "spring.session.redis",
      "type": "org.springframework.boot.autoconfigure.session.RedisSessionProperties",
      "sourceType": "org.springframework.boot.autoconfigure.session.RedisSessionProperties"
    },
    {
      "name": "spring.session.servlet",
      "type": "org.springframework.boot.autoconfigure.session.SessionProperties$Servlet",
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties",
      "sourceMethod": "getServlet()"
    },
    {
      "name": "spring.thymeleaf",
      "type": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties"
    },
    {
      "name": "spring.thymeleaf.reactive",
      "type": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties$Reactive",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "sourceMethod": "getReactive()"
    },
    {
      "name": "spring.thymeleaf.servlet",
      "type": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties$Servlet",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "sourceMethod": "getServlet()"
    },
    {
      "name": "spring.transaction",
      "type": "org.springframework.boot.autoconfigure.transaction.TransactionProperties",
      "sourceType": "org.springframework.boot.autoconfigure.transaction.TransactionProperties"
    },
    {
      "name": "spring.webflux",
      "type": "org.springframework.boot.autoconfigure.web.reactive.WebFluxProperties",
      "sourceType": "org.springframework.boot.autoconfigure.web.reactive.WebFluxProperties"
    },
    {
      "name": "spring.webservices",
      "type": "org.springframework.boot.autoconfigure.webservices.WebServicesProperties",
      "sourceType": "org.springframework.boot.autoconfigure.webservices.WebServicesProperties"
    },
    {
      "name": "spring.webservices.servlet",
      "type": "org.springframework.boot.autoconfigure.webservices.WebServicesProperties$Servlet",
      "sourceType": "org.springframework.boot.autoconfigure.webservices.WebServicesProperties",
      "sourceMethod": "getServlet()"
    }
  ],
  "properties": [
    {
      "name": "banner.charset",
      "type": "java.nio.charset.Charset",
      "description": "Banner file encoding.",
      "defaultValue": "UTF-8",
      "deprecated": true,
      "deprecation": {"replacement": "spring.banner.charset"}
    },
    {
      "name": "banner.image.height",
      "type": "java.lang.Integer",
      "description": "Banner image height (in chars).",
      "deprecated": true,
      "deprecation": {"replacement": "spring.banner.image.height"}
    },
    {
      "name": "banner.image.invert",
      "type": "java.lang.Boolean",
      "description": "Invert images for dark console themes.",
      "defaultValue": false,
      "deprecated": true,
      "deprecation": {"replacement": "spring.banner.image.invert"}
    },
    {
      "name": "banner.image.location",
      "type": "org.springframework.core.io.Resource",
      "description": "Banner image file location (jpg/png can also be used).",
      "defaultValue": "banner.gif",
      "deprecated": true,
      "deprecation": {"replacement": "spring.banner.image.location"}
    },
    {
      "name": "banner.image.margin",
      "type": "java.lang.Integer",
      "description": "Left hand image margin (in chars).",
      "deprecated": true,
      "deprecation": {"replacement": "spring.banner.image.margin"}
    },
    {
      "name": "banner.image.width",
      "type": "java.lang.Integer",
      "description": "Banner image width (in chars).",
      "deprecated": true,
      "deprecation": {"replacement": "spring.banner.image.width"}
    },
    {
      "name": "banner.location",
      "type": "org.springframework.core.io.Resource",
      "description": "Banner text resource location.",
      "defaultValue": "classpath:banner.txt",
      "deprecated": true,
      "deprecation": {"replacement": "spring.banner.location"}
    },
    {
      "name": "debug",
      "type": "java.lang.Boolean",
      "description": "Enable debug logs.",
      "sourceType": "org.springframework.boot.context.logging.LoggingApplicationListener",
      "defaultValue": false
    },
    {
      "name": "encrypt.fail-on-error",
      "type": "java.lang.Boolean",
      "description": "Flag to say that a process should fail if there is an encryption or decryption\n error.",
      "sourceType": "org.springframework.cloud.bootstrap.encrypt.KeyProperties",
      "defaultValue": true
    },
    {
      "name": "encrypt.key",
      "type": "java.lang.String",
      "description": "A symmetric key. As a stronger alternative consider using a keystore.",
      "sourceType": "org.springframework.cloud.bootstrap.encrypt.KeyProperties"
    },
    {
      "name": "encrypt.key-store.alias",
      "type": "java.lang.String",
      "description": "Alias for a key in the store.",
      "sourceType": "org.springframework.cloud.bootstrap.encrypt.KeyProperties$KeyStore"
    },
    {
      "name": "encrypt.key-store.location",
      "type": "org.springframework.core.io.Resource",
      "description": "Location of the key store file, e.g. classpath:/keystore.jks.",
      "sourceType": "org.springframework.cloud.bootstrap.encrypt.KeyProperties$KeyStore"
    },
    {
      "name": "encrypt.key-store.password",
      "type": "java.lang.String",
      "description": "Password that locks the keystore.",
      "sourceType": "org.springframework.cloud.bootstrap.encrypt.KeyProperties$KeyStore"
    },
    {
      "name": "encrypt.key-store.secret",
      "type": "java.lang.String",
      "description": "Secret protecting the key (defaults to the same as the password).",
      "sourceType": "org.springframework.cloud.bootstrap.encrypt.KeyProperties$KeyStore"
    },
    {
      "name": "encrypt.rsa.algorithm",
      "type": "org.springframework.security.rsa.crypto.RsaAlgorithm",
      "description": "The RSA algorithm to use (DEFAULT or OEAP). Once it is set do not change it (or\n existing ciphers will not a decryptable).",
      "sourceType": "org.springframework.cloud.bootstrap.encrypt.RsaProperties"
    },
    {
      "name": "encrypt.rsa.salt",
      "type": "java.lang.String",
      "description": "Salt for the random secret used to encrypt cipher text. Once it is set do not\n change it (or existing ciphers will not a decryptable).",
      "sourceType": "org.springframework.cloud.bootstrap.encrypt.RsaProperties",
      "defaultValue": "deadbeef"
    },
    {
      "name": "encrypt.rsa.strong",
      "type": "java.lang.Boolean",
      "description": "Flag to indicate that \"strong\" AES encryption should be used internally. If\n true then the GCM algorithm is applied to the AES encrypted bytes. Default is\n false (in which case \"standard\" CBC is used instead). Once it is set do not\n change it (or existing ciphers will not a decryptable).",
      "sourceType": "org.springframework.cloud.bootstrap.encrypt.RsaProperties",
      "defaultValue": false
    },
    {
      "name": "encrypt.salt",
      "type": "java.lang.String",
      "description": "A salt for the symmetric key in the form of a hex-encoded byte array. As a stronger\n alternative consider using a keystore.",
      "sourceType": "org.springframework.cloud.bootstrap.encrypt.KeyProperties",
      "defaultValue": "deadbeef"
    },
    {
      "name": "endpoints.actuator.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable the endpoint.",
      "deprecated": true,
      "deprecation": {"reason": "The \"actuator\" endpoint is no longer available."}
    },
    {
      "name": "endpoints.actuator.path",
      "type": "java.lang.String",
      "description": "Endpoint URL path.",
      "deprecated": true,
      "deprecation": {"reason": "The \"actuator\" endpoint is no longer available."}
    },
    {
      "name": "endpoints.actuator.sensitive",
      "type": "java.lang.Boolean",
      "description": "Mark if the endpoint exposes sensitive information.",
      "deprecated": true,
      "deprecation": {"reason": "The \"actuator\" endpoint is no longer available."}
    },
    {
      "name": "endpoints.auditevents.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the endpoint.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoint.auditevents.enabled"}
    },
    {
      "name": "endpoints.auditevents.path",
      "type": "java.lang.String",
      "description": "Endpoint URL path.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoints.web.path-mapping.auditevents"}
    },
    {
      "name": "endpoints.auditevents.sensitive",
      "type": "java.lang.Boolean",
      "description": "Mark if the endpoint exposes sensitive information.",
      "deprecated": true,
      "deprecation": {"reason": "Endpoint sensitive flag is no longer customizable as Spring Boot no longer provides a customizable security auto-configuration\n. Create or adapt your security configuration accordingly."}
    },
    {
      "name": "endpoints.autoconfig.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the endpoint.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoint.conditions.enabled"}
    },
    {
      "name": "endpoints.autoconfig.id",
      "type": "java.lang.String",
      "description": "Endpoint identifier. With HTTP monitoring the identifier of the endpoint is mapped\n to a URL (e.g. 'foo' is mapped to '/foo').",
      "deprecated": true,
      "deprecation": {"reason": "Endpoint identifier is no longer customizable."}
    },
    {
      "name": "endpoints.autoconfig.path",
      "type": "java.lang.String",
      "description": "Endpoint URL path.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoints.web.path-mapping.conditions"}
    },
    {
      "name": "endpoints.autoconfig.sensitive",
      "type": "java.lang.Boolean",
      "description": "Mark if the endpoint exposes sensitive information.",
      "deprecated": true,
      "deprecation": {"reason": "Endpoint sensitive flag is no longer customizable as Spring Boot no longer provides a customizable security auto-configuration\n. Create or adapt your security configuration accordingly."}
    },
    {
      "name": "endpoints.beans.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the endpoint.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoint.beans.enabled"}
    },
    {
      "name": "endpoints.beans.id",
      "type": "java.lang.String",
      "description": "Endpoint identifier. With HTTP monitoring the identifier of the endpoint is mapped\n to a URL (e.g. 'foo' is mapped to '/foo').",
      "deprecated": true,
      "deprecation": {"reason": "Endpoint identifier is no longer customizable."}
    },
    {
      "name": "endpoints.beans.path",
      "type": "java.lang.String",
      "description": "Endpoint URL path.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoints.web.path-mapping.beans"}
    },
    {
      "name": "endpoints.beans.sensitive",
      "type": "java.lang.Boolean",
      "description": "Mark if the endpoint exposes sensitive information.",
      "deprecated": true,
      "deprecation": {"reason": "Endpoint sensitive flag is no longer customizable as Spring Boot no longer provides a customizable security auto-configuration\n. Create or adapt your security configuration accordingly."}
    },
    {
      "name": "endpoints.configprops.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the endpoint.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoint.configprops.enabled"}
    },
    {
      "name": "endpoints.configprops.id",
      "type": "java.lang.String",
      "description": "Endpoint identifier. With HTTP monitoring the identifier of the endpoint is mapped\n to a URL (e.g. 'foo' is mapped to '/foo').",
      "deprecated": true,
      "deprecation": {"reason": "Endpoint identifier is no longer customizable."}
    },
    {
      "name": "endpoints.configprops.keys-to-sanitize",
      "type": "java.lang.String[]",
      "description": "Keys that should be sanitized. Keys can be simple strings that the property ends with or regex expressions.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoint.configprops.keys-to-sanitize"}
    },
    {
      "name": "endpoints.configprops.path",
      "type": "java.lang.String",
      "description": "Endpoint URL path.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoints.web.path-mapping.configprops"}
    },
    {
      "name": "endpoints.configprops.sensitive",
      "type": "java.lang.Boolean",
      "description": "Mark if the endpoint exposes sensitive information.",
      "deprecated": true,
      "deprecation": {"reason": "Endpoint sensitive flag is no longer customizable as Spring Boot no longer provides a customizable security auto-configuration\n. Create or adapt your security configuration accordingly."}
    },
    {
      "name": "endpoints.cors.allow-credentials",
      "type": "java.lang.Boolean",
      "description": "Set whether credentials are supported. When not set, credentials are not supported.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoints.web.cors.allow-credentials"}
    },
    {
      "name": "endpoints.cors.allowed-headers",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of headers to allow in a request. '*' allows all headers.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoints.web.cors.allowed-headers"}
    },
    {
      "name": "endpoints.cors.allowed-methods",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of methods to allow. '*' allows all methods. When not set,\n defaults to GET.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoints.web.cors.allowed-methods"}
    },
    {
      "name": "endpoints.cors.allowed-origins",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of origins to allow. '*' allows all origins. When not set,\n CORS support is disabled.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoints.web.cors.allowed-origins"}
    },
    {
      "name": "endpoints.cors.exposed-headers",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of headers to include in a response.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoints.web.cors.exposed-headers"}
    },
    {
      "name": "endpoints.cors.max-age",
      "type": "java.lang.Long",
      "description": "How long, in seconds, the response from a pre-flight request can be cached by\n clients.",
      "defaultValue": 1800,
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoints.web.cors.max-age"}
    },
    {
      "name": "endpoints.docs.curies.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable the curie generation.",
      "defaultValue": false,
      "deprecated": true,
      "deprecation": {"reason": "The \"docs\" endpoint is no longer available."}
    },
    {
      "name": "endpoints.docs.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable the endpoint.",
      "deprecated": true,
      "deprecation": {"reason": "The \"docs\" endpoint is no longer available."}
    },
    {
      "name": "endpoints.docs.path",
      "type": "java.lang.String",
      "description": "Endpoint URL path.",
      "deprecated": true,
      "deprecation": {"reason": "The \"docs\" endpoint is no longer available."}
    },
    {
      "name": "endpoints.docs.sensitive",
      "type": "java.lang.Boolean",
      "description": "Mark if the endpoint exposes sensitive information.",
      "deprecated": true,
      "deprecation": {"reason": "The \"docs\" endpoint is no longer available."}
    },
    {
      "name": "endpoints.dump.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable the endpoint.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoint.threaddump.enabled"}
    },
    {
      "name": "endpoints.dump.id",
      "type": "java.lang.String",
      "description": "Endpoint identifier. With HTTP monitoring the identifier of the endpoint is mapped\n to a URL (e.g. 'foo' is mapped to '/foo').",
      "deprecated": true,
      "deprecation": {"reason": "Endpoint identifier is no longer customizable."}
    },
    {
      "name": "endpoints.dump.path",
      "type": "java.lang.String",
      "description": "Endpoint URL path.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoints.web.path-mapping.dump"}
    },
    {
      "name": "endpoints.dump.sensitive",
      "type": "java.lang.Boolean",
      "description": "Mark if the endpoint exposes sensitive information.",
      "deprecated": true,
      "deprecation": {"reason": "Endpoint sensitive flag is no longer customizable as Spring Boot no longer provides a customizable security auto-configuration\n. Create or adapt your security configuration accordingly."}
    },
    {
      "name": "endpoints.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable endpoints.",
      "defaultValue": true,
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoints.enabled-by-default"}
    },
    {
      "name": "endpoints.env.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the endpoint.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoint.env.enabled"}
    },
    {
      "name": "endpoints.env.id",
      "type": "java.lang.String",
      "description": "Endpoint identifier. With HTTP monitoring the identifier of the endpoint is mapped\n to a URL (e.g. 'foo' is mapped to '/foo').",
      "deprecated": true,
      "deprecation": {"reason": "Endpoint identifier is no longer customizable."}
    },
    {
      "name": "endpoints.env.keys-to-sanitize",
      "type": "java.lang.String[]",
      "description": "Keys that should be sanitized. Keys can be simple strings that the property ends with or regex expressions.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoint.env.keys-to-sanitize"}
    },
    {
      "name": "endpoints.env.path",
      "type": "java.lang.String",
      "description": "Endpoint URL path.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoints.web.path-mapping.env"}
    },
    {
      "name": "endpoints.env.sensitive",
      "type": "java.lang.Boolean",
      "description": "Mark if the endpoint exposes sensitive information.",
      "deprecated": true,
      "deprecation": {"reason": "Endpoint sensitive flag is no longer customizable as Spring Boot no longer provides a customizable security auto-configuration\n. Create or adapt your security configuration accordingly."}
    },
    {
      "name": "endpoints.flyway.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the endpoint.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoint.flyway.enabled"}
    },
    {
      "name": "endpoints.flyway.id",
      "type": "java.lang.String",
      "description": "Endpoint identifier. With HTTP monitoring the identifier of the endpoint is mapped\n to a URL (e.g. 'foo' is mapped to '/foo').",
      "deprecated": true,
      "deprecation": {"reason": "Endpoint identifier is no longer customizable."}
    },
    {
      "name": "endpoints.flyway.sensitive",
      "type": "java.lang.Boolean",
      "description": "Mark if the endpoint exposes sensitive information.",
      "deprecated": true,
      "deprecation": {"reason": "Endpoint sensitive flag is no longer customizable as Spring Boot no longer provides a customizable security auto-configuration\n. Create or adapt your security configuration accordingly."}
    },
    {
      "name": "endpoints.health.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the endpoint.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoint.health.enabled"}
    },
    {
      "name": "endpoints.health.id",
      "type": "java.lang.String",
      "description": "Endpoint identifier. With HTTP monitoring the identifier of the endpoint is mapped\n to a URL (e.g. 'foo' is mapped to '/foo').",
      "deprecated": true,
      "deprecation": {"reason": "Endpoint identifier is no longer customizable."}
    },
    {
      "name": "endpoints.health.mapping",
      "type": "java.util.Map<java.lang.String,org.springframework.http.HttpStatus>",
      "description": "Mapping of health statuses to HTTP status codes. By default, registered health\n statuses map to sensible defaults (i.e. UP maps to 200).",
      "deprecated": true,
      "deprecation": {"replacement": "management.health.status.http-mapping"}
    },
    {
      "name": "endpoints.health.path",
      "type": "java.lang.String",
      "description": "Endpoint URL path.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoints.web.path-mapping.health"}
    },
    {
      "name": "endpoints.health.sensitive",
      "type": "java.lang.Boolean",
      "description": "Mark if the endpoint exposes sensitive information.",
      "deprecated": true,
      "deprecation": {"reason": "Endpoint sensitive flag is no longer customizable as Spring Boot no longer provides a customizable security auto-configuration\n. Create or adapt your security configuration accordingly."}
    },
    {
      "name": "endpoints.health.time-to-live",
      "type": "java.lang.Long",
      "description": "Time to live for cached result, in milliseconds.",
      "defaultValue": 1000,
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoint.health.cache.time-to-live"}
    },
    {
      "name": "endpoints.heapdump.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the endpoint.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoint.heapdump.enabled"}
    },
    {
      "name": "endpoints.heapdump.path",
      "type": "java.lang.String",
      "description": "Endpoint URL path.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoints.web.path-mapping.heapdump"}
    },
    {
      "name": "endpoints.heapdump.sensitive",
      "type": "java.lang.Boolean",
      "description": "Mark if the endpoint exposes sensitive information.",
      "deprecated": true,
      "deprecation": {"reason": "Endpoint sensitive flag is no longer customizable as Spring Boot no longer provides a customizable security auto-configuration\n. Create or adapt your security configuration accordingly."}
    },
    {
      "name": "endpoints.hypermedia.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable hypermedia support for endpoints.",
      "defaultValue": false,
      "deprecated": true,
      "deprecation": {"reason": "Hypermedia support in the Actuator is no longer available."}
    },
    {
      "name": "endpoints.info.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the endpoint.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoint.info.enabled"}
    },
    {
      "name": "endpoints.info.id",
      "type": "java.lang.String",
      "description": "Endpoint identifier. With HTTP monitoring the identifier of the endpoint is mapped\n to a URL (e.g. 'foo' is mapped to '/foo').",
      "deprecated": true,
      "deprecation": {"reason": "Endpoint identifier is no longer customizable."}
    },
    {
      "name": "endpoints.info.path",
      "type": "java.lang.String",
      "description": "Endpoint URL path.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoints.web.path-mapping.info"}
    },
    {
      "name": "endpoints.info.sensitive",
      "type": "java.lang.Boolean",
      "description": "Mark if the endpoint exposes sensitive information.",
      "deprecated": true,
      "deprecation": {"reason": "Endpoint sensitive flag is no longer customizable as Spring Boot no longer provides a customizable security auto-configuration\n. Create or adapt your security configuration accordingly."}
    },
    {
      "name": "endpoints.jmx.domain",
      "type": "java.lang.String",
      "description": "JMX domain name. Initialized with the value of 'spring.jmx.default-domain' if set.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoints.jmx.domain"}
    },
    {
      "name": "endpoints.jmx.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable JMX export of all endpoints.",
      "defaultValue": true,
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoints.jmx.exposure.exclude"}
    },
    {
      "name": "endpoints.jmx.static-names",
      "type": "java.util.Properties",
      "description": "Additional static properties to append to all ObjectNames of MBeans representing\n Endpoints.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoints.jmx.static-names"}
    },
    {
      "name": "endpoints.jmx.unique-names",
      "type": "java.lang.Boolean",
      "description": "Whether to ensure that ObjectNames are modified in case of conflict.",
      "defaultValue": false,
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoints.jmx.unique-names"}
    },
    {
      "name": "endpoints.jolokia.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable the endpoint.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoint.jolokia.enabled"}
    },
    {
      "name": "endpoints.jolokia.path",
      "type": "java.lang.String",
      "description": "Endpoint URL path.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoints.web.path-mapping.jolokia"}
    },
    {
      "name": "endpoints.jolokia.sensitive",
      "type": "java.lang.Boolean",
      "description": "Mark if the endpoint exposes sensitive information.",
      "deprecated": true,
      "deprecation": {"reason": "Endpoint sensitive flag is no longer customizable as Spring Boot no longer provides a customizable security auto-configuration\n. Create or adapt your security configuration accordingly."}
    },
    {
      "name": "endpoints.liquibase.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the endpoint.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoint.liquibase.enabled"}
    },
    {
      "name": "endpoints.liquibase.id",
      "type": "java.lang.String",
      "description": "Endpoint identifier. With HTTP monitoring the identifier of the endpoint is mapped\n to a URL (e.g. 'foo' is mapped to '/foo').",
      "deprecated": true,
      "deprecation": {"reason": "Endpoint identifier is no longer customizable."}
    },
    {
      "name": "endpoints.liquibase.sensitive",
      "type": "java.lang.Boolean",
      "description": "Mark if the endpoint exposes sensitive information.",
      "deprecated": true,
      "deprecation": {"reason": "Endpoint sensitive flag is no longer customizable as Spring Boot no longer provides a customizable security auto-configuration\n. Create or adapt your security configuration accordingly."}
    },
    {
      "name": "endpoints.logfile.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the endpoint.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoint.logfile.enabled"}
    },
    {
      "name": "endpoints.logfile.external-file",
      "type": "java.io.File",
      "description": "External Logfile to be accessed. Can be used if the logfile is written by output\n redirect and not by the logging-system itself.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoint.logfile.external-file"}
    },
    {
      "name": "endpoints.logfile.path",
      "type": "java.lang.String",
      "description": "Endpoint URL path.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoints.web.path-mapping.logfile"}
    },
    {
      "name": "endpoints.logfile.sensitive",
      "type": "java.lang.Boolean",
      "description": "Mark if the endpoint exposes sensitive information.",
      "deprecated": true,
      "deprecation": {"reason": "Endpoint sensitive flag is no longer customizable as Spring Boot no longer provides a customizable security auto-configuration\n. Create or adapt your security configuration accordingly."}
    },
    {
      "name": "endpoints.loggers.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the endpoint.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoint.loggers.enabled"}
    },
    {
      "name": "endpoints.loggers.id",
      "type": "java.lang.String",
      "description": "Endpoint identifier. With HTTP monitoring the identifier of the endpoint is mapped\n to a URL (e.g. 'foo' is mapped to '/foo').",
      "deprecated": true,
      "deprecation": {"reason": "Endpoint identifier is no longer customizable."}
    },
    {
      "name": "endpoints.loggers.path",
      "type": "java.lang.String",
      "description": "Endpoint URL path.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoints.web.path-mapping.loggers"}
    },
    {
      "name": "endpoints.loggers.sensitive",
      "type": "java.lang.Boolean",
      "description": "Mark if the endpoint exposes sensitive information.",
      "deprecated": true,
      "deprecation": {"reason": "Endpoint sensitive flag is no longer customizable as Spring Boot no longer provides a customizable security auto-configuration\n. Create or adapt your security configuration accordingly."}
    },
    {
      "name": "endpoints.mappings.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the endpoint.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoint.mappings.enabled"}
    },
    {
      "name": "endpoints.mappings.id",
      "type": "java.lang.String",
      "description": "Endpoint identifier. With HTTP monitoring the identifier of the endpoint is mapped\n to a URL (e.g. 'foo' is mapped to '/foo').",
      "deprecated": true,
      "deprecation": {"reason": "Endpoint identifier is no longer customizable."}
    },
    {
      "name": "endpoints.mappings.path",
      "type": "java.lang.String",
      "description": "Endpoint URL path.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoints.web.path-mapping.mappings"}
    },
    {
      "name": "endpoints.mappings.sensitive",
      "type": "java.lang.Boolean",
      "description": "Mark if the endpoint exposes sensitive information.",
      "deprecated": true,
      "deprecation": {"reason": "Endpoint sensitive flag is no longer customizable as Spring Boot no longer provides a customizable security auto-configuration\n. Create or adapt your security configuration accordingly."}
    },
    {
      "name": "endpoints.metrics.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the endpoint.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoint.metrics.enabled"}
    },
    {
      "name": "endpoints.metrics.filter.counter-submissions",
      "description": "Submissions that should be made to the counter.",
      "deprecated": true,
      "deprecation": {"reason": "Metrics support is now using Micrometer."}
    },
    {
      "name": "endpoints.metrics.filter.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable the metrics servlet filter.",
      "defaultValue": true,
      "deprecated": true,
      "deprecation": {"reason": "Metrics support is now using Micrometer."}
    },
    {
      "name": "endpoints.metrics.filter.gauge-submissions",
      "description": "Submissions that should be made to the gauge.",
      "deprecated": true,
      "deprecation": {"reason": "Metrics support is now using Micrometer."}
    },
    {
      "name": "endpoints.metrics.id",
      "type": "java.lang.String",
      "description": "Endpoint identifier. With HTTP monitoring the identifier of the endpoint is mapped\n to a URL (e.g. 'foo' is mapped to '/foo').",
      "deprecated": true,
      "deprecation": {"reason": "Endpoint identifier is no longer customizable."}
    },
    {
      "name": "endpoints.metrics.path",
      "type": "java.lang.String",
      "description": "Endpoint URL path.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoints.web.path-mapping.metrics"}
    },
    {
      "name": "endpoints.metrics.sensitive",
      "type": "java.lang.Boolean",
      "description": "Mark if the endpoint exposes sensitive information.",
      "deprecated": true,
      "deprecation": {"reason": "Endpoint sensitive flag is no longer customizable as Spring Boot no longer provides a customizable security auto-configuration\n. Create or adapt your security configuration accordingly."}
    },
    {
      "name": "endpoints.sensitive",
      "type": "java.lang.Boolean",
      "description": "Default endpoint sensitive setting.",
      "deprecated": true,
      "deprecation": {"reason": "Endpoint sensitive flag is no longer customizable as Spring Boot no longer provides a customizable security auto-configuration\n. Create or adapt your security configuration accordingly."}
    },
    {
      "name": "endpoints.shutdown.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the endpoint.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoint.shutdown.enabled"}
    },
    {
      "name": "endpoints.shutdown.id",
      "type": "java.lang.String",
      "description": "Endpoint identifier. With HTTP monitoring the identifier of the endpoint is mapped\n to a URL (e.g. 'foo' is mapped to '/foo').",
      "deprecated": true,
      "deprecation": {"reason": "Endpoint identifier is no longer customizable."}
    },
    {
      "name": "endpoints.shutdown.path",
      "type": "java.lang.String",
      "description": "Endpoint URL path.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoints.web.path-mapping.shutdown"}
    },
    {
      "name": "endpoints.shutdown.sensitive",
      "type": "java.lang.Boolean",
      "description": "Mark if the endpoint exposes sensitive information.",
      "deprecated": true,
      "deprecation": {"reason": "Endpoint sensitive flag is no longer customizable as Spring Boot no longer provides a customizable security auto-configuration\n. Create or adapt your security configuration accordingly."}
    },
    {
      "name": "endpoints.trace.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the endpoint.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoint.httptrace.enabled"}
    },
    {
      "name": "endpoints.trace.filter.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the trace servlet filter.",
      "defaultValue": true,
      "deprecated": true,
      "deprecation": {"replacement": "management.trace.http.enabled"}
    },
    {
      "name": "endpoints.trace.id",
      "type": "java.lang.String",
      "description": "Endpoint identifier. With HTTP monitoring the identifier of the endpoint is mapped\n to a URL (e.g. 'foo' is mapped to '/foo').",
      "deprecated": true,
      "deprecation": {"reason": "Endpoint identifier is no longer customizable."}
    },
    {
      "name": "endpoints.trace.path",
      "type": "java.lang.String",
      "description": "Endpoint URL path.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoints.web.path-mapping.httptrace"}
    },
    {
      "name": "endpoints.trace.sensitive",
      "type": "java.lang.Boolean",
      "description": "Mark if the endpoint exposes sensitive information.",
      "deprecated": true,
      "deprecation": {"reason": "Endpoint sensitive flag is no longer customizable as Spring Boot no longer provides a customizable security auto-configuration\n. Create or adapt your security configuration accordingly."}
    },
    {
      "name": "flyway.baseline-description",
      "type": "java.lang.String",
      "deprecated": true,
      "deprecation": {"replacement": "spring.flyway.baseline-description"}
    },
    {
      "name": "flyway.baseline-on-migrate",
      "type": "java.lang.Boolean",
      "deprecated": true,
      "deprecation": {"replacement": "spring.flyway.baseline-on-migrate"}
    },
    {
      "name": "flyway.baseline-version",
      "type": "org.flywaydb.core.api.MigrationVersion",
      "deprecated": true,
      "deprecation": {"replacement": "spring.flyway.baseline-version"}
    },
    {
      "name": "flyway.check-location",
      "type": "java.lang.Boolean",
      "description": "Check that migration scripts location exists.",
      "defaultValue": false,
      "deprecated": true,
      "deprecation": {"replacement": "spring.flyway.check-location"}
    },
    {
      "name": "flyway.clean-on-validation-error",
      "type": "java.lang.Boolean",
      "deprecated": true,
      "deprecation": {"replacement": "spring.flyway.clean-on-validation-error"}
    },
    {
      "name": "flyway.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable flyway.",
      "defaultValue": true,
      "deprecated": true,
      "deprecation": {"replacement": "spring.flyway.enabled"}
    },
    {
      "name": "flyway.encoding",
      "type": "java.lang.String",
      "deprecated": true,
      "deprecation": {"replacement": "spring.flyway.encoding"}
    },
    {
      "name": "flyway.init-description",
      "type": "java.lang.String",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "flyway.init-on-migrate",
      "type": "java.lang.Boolean",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "flyway.init-sqls",
      "type": "java.util.List<java.lang.String>",
      "description": "SQL statements to execute to initialize a connection immediately after obtaining\n it.",
      "deprecated": true,
      "deprecation": {"replacement": "spring.flyway.init-sqls"}
    },
    {
      "name": "flyway.init-version",
      "type": "org.flywaydb.core.api.MigrationVersion",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "flyway.locations",
      "type": "java.util.List<java.lang.String>",
      "description": "Locations of migrations scripts. Can contain the special \"{vendor}\" placeholder to\n use vendor-specific locations.",
      "deprecated": true,
      "deprecation": {"replacement": "spring.flyway.locations"}
    },
    {
      "name": "flyway.out-of-order",
      "type": "java.lang.Boolean",
      "deprecated": true,
      "deprecation": {"replacement": "spring.flyway.out-of-order"}
    },
    {
      "name": "flyway.password",
      "type": "java.lang.String",
      "description": "Login password of the database to migrate.",
      "deprecated": true,
      "deprecation": {"replacement": "spring.flyway.password"}
    },
    {
      "name": "flyway.placeholder-prefix",
      "type": "java.lang.String",
      "deprecated": true,
      "deprecation": {"replacement": "spring.flyway.placeholder-prefix"}
    },
    {
      "name": "flyway.placeholder-replacement",
      "type": "java.lang.Boolean",
      "deprecated": true,
      "deprecation": {"replacement": "spring.flyway.placeholder-replacement"}
    },
    {
      "name": "flyway.placeholder-suffix",
      "type": "java.lang.String",
      "deprecated": true,
      "deprecation": {"replacement": "spring.flyway.placeholder-suffix"}
    },
    {
      "name": "flyway.placeholders",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "deprecated": true,
      "deprecation": {"replacement": "spring.flyway.placeholders"}
    },
    {
      "name": "flyway.schemas",
      "type": "java.lang.String[]",
      "deprecated": true,
      "deprecation": {"replacement": "spring.flyway.schemas"}
    },
    {
      "name": "flyway.sql-migration-prefix",
      "type": "java.lang.String",
      "deprecated": true,
      "deprecation": {"replacement": "spring.flyway.sql-migration-prefix"}
    },
    {
      "name": "flyway.sql-migration-separator",
      "type": "java.lang.String",
      "deprecated": true,
      "deprecation": {"replacement": "spring.flyway.sql-migration-separator"}
    },
    {
      "name": "flyway.sql-migration-suffix",
      "type": "java.lang.String",
      "deprecated": true,
      "deprecation": {"replacement": "spring.flyway.sql-migration-suffixes"}
    },
    {
      "name": "flyway.table",
      "type": "java.lang.String",
      "deprecated": true,
      "deprecation": {"replacement": "spring.flyway.table"}
    },
    {
      "name": "flyway.target",
      "type": "org.flywaydb.core.api.MigrationVersion",
      "deprecated": true,
      "deprecation": {"replacement": "spring.flyway.target"}
    },
    {
      "name": "flyway.url",
      "type": "java.lang.String",
      "description": "JDBC url of the database to migrate. If not set, the primary configured data source\n is used.",
      "deprecated": true,
      "deprecation": {"replacement": "spring.flyway.url"}
    },
    {
      "name": "flyway.user",
      "type": "java.lang.String",
      "description": "Login user of the database to migrate.",
      "deprecated": true,
      "deprecation": {"replacement": "spring.flyway.user"}
    },
    {
      "name": "flyway.validate-on-migrate",
      "type": "java.lang.Boolean",
      "deprecated": true,
      "deprecation": {"replacement": "spring.flyway.validate-on-migrate"}
    },
    {
      "name": "health.config.enabled",
      "type": "java.lang.Boolean",
      "description": "Flag to indicate that the config server health indicator should be installed.",
      "sourceType": "org.springframework.cloud.config.client.ConfigClientHealthProperties",
      "defaultValue": false
    },
    {
      "name": "health.config.time-to-live",
      "type": "java.lang.Long",
      "description": "Time to live for cached result, in milliseconds. Default 300000 (5 min).",
      "sourceType": "org.springframework.cloud.config.client.ConfigClientHealthProperties",
      "defaultValue": 0
    },
    {
      "name": "info",
      "type": "java.util.Map<java.lang.String,java.lang.Object>",
      "description": "Arbitrary properties to add to the info endpoint."
    },
    {
      "name": "jolokia.config",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Jolokia settings. These are traditionally set using servlet parameters. Refer to\n the documentation of Jolokia for more details.",
      "deprecated": true,
      "deprecation": {"replacement": "management.endpoint.jolokia.config"}
    },
    {
      "name": "liquibase.change-log",
      "type": "java.lang.String",
      "description": "Change log configuration path.",
      "defaultValue": "classpath:/db/changelog/db.changelog-master.yaml",
      "deprecated": true,
      "deprecation": {"replacement": "spring.liquibase.change-log"}
    },
    {
      "name": "liquibase.check-change-log-location",
      "type": "java.lang.Boolean",
      "description": "Check the change log location exists.",
      "defaultValue": true,
      "deprecated": true,
      "deprecation": {"replacement": "spring.liquibase.check-change-log-location"}
    },
    {
      "name": "liquibase.contexts",
      "type": "java.lang.String",
      "description": "Comma-separated list of runtime contexts to use.",
      "deprecated": true,
      "deprecation": {"replacement": "spring.liquibase.contexts"}
    },
    {
      "name": "liquibase.default-schema",
      "type": "java.lang.String",
      "description": "Default database schema.",
      "deprecated": true,
      "deprecation": {"replacement": "spring.liquibase.default-schema"}
    },
    {
      "name": "liquibase.drop-first",
      "type": "java.lang.Boolean",
      "description": "Drop the database schema first.",
      "defaultValue": false,
      "deprecated": true,
      "deprecation": {"replacement": "spring.liquibase.drop-first"}
    },
    {
      "name": "liquibase.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable liquibase support.",
      "defaultValue": true,
      "deprecated": true,
      "deprecation": {"replacement": "spring.liquibase.enabled"}
    },
    {
      "name": "liquibase.labels",
      "type": "java.lang.String",
      "description": "Comma-separated list of runtime labels to use.",
      "deprecated": true,
      "deprecation": {"replacement": "spring.liquibase.labels"}
    },
    {
      "name": "liquibase.parameters",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Change log parameters.",
      "deprecated": true,
      "deprecation": {"replacement": "spring.liquibase.parameters"}
    },
    {
      "name": "liquibase.password",
      "type": "java.lang.String",
      "description": "Login password of the database to migrate.",
      "deprecated": true,
      "deprecation": {"replacement": "spring.liquibase.password"}
    },
    {
      "name": "liquibase.rollback-file",
      "type": "java.io.File",
      "description": "File to which rollback SQL will be written when an update is performed.",
      "deprecated": true,
      "deprecation": {"replacement": "spring.liquibase.rollback-file"}
    },
    {
      "name": "liquibase.url",
      "type": "java.lang.String",
      "description": "JDBC url of the database to migrate. If not set, the primary configured data source\n is used.",
      "deprecated": true,
      "deprecation": {"replacement": "spring.liquibase.url"}
    },
    {
      "name": "liquibase.user",
      "type": "java.lang.String",
      "description": "Login user of the database to migrate.",
      "deprecated": true,
      "deprecation": {"replacement": "spring.liquibase.user"}
    },
    {
      "name": "logging.config",
      "type": "java.lang.String",
      "description": "Location of the logging configuration file. For instance, `classpath:logback.xml` for Logback.",
      "sourceType": "org.springframework.boot.context.logging.LoggingApplicationListener"
    },
    {
      "name": "logging.exception-conversion-word",
      "type": "java.lang.String",
      "description": "Conversion word used when logging exceptions.",
      "sourceType": "org.springframework.boot.context.logging.LoggingApplicationListener",
      "defaultValue": "%wEx"
    },
    {
      "name": "logging.file",
      "type": "java.lang.String",
      "description": "Log file name (for instance, `myapp.log`). Names can be an exact location or relative to the current directory.",
      "sourceType": "org.springframework.boot.context.logging.LoggingApplicationListener"
    },
    {
      "name": "logging.file.max-history",
      "type": "java.lang.Integer",
      "description": "Maximum of archive log files to keep. Only supported with the default logback setup.",
      "sourceType": "org.springframework.boot.context.logging.LoggingApplicationListener",
      "defaultValue": 0
    },
    {
      "name": "logging.file.max-size",
      "type": "java.lang.String",
      "description": "Maximum log file size. Only supported with the default logback setup.",
      "sourceType": "org.springframework.boot.context.logging.LoggingApplicationListener",
      "defaultValue": "10MB"
    },
    {
      "name": "logging.level",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Log levels severity mapping. For instance, `logging.level.org.springframework=DEBUG`.",
      "sourceType": "org.springframework.boot.context.logging.LoggingApplicationListener"
    },
    {
      "name": "logging.path",
      "type": "java.lang.String",
      "description": "Location of the log file. For instance, `/var/log`.",
      "sourceType": "org.springframework.boot.context.logging.LoggingApplicationListener"
    },
    {
      "name": "logging.pattern.console",
      "type": "java.lang.String",
      "description": "Appender pattern for output to the console. Supported only with the default Logback setup.",
      "sourceType": "org.springframework.boot.context.logging.LoggingApplicationListener",
      "defaultValue": "%clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"
    },
    {
      "name": "logging.pattern.dateformat",
      "type": "java.lang.String",
      "description": "Appender pattern for log date format. Supported only with the default Logback setup.",
      "sourceType": "org.springframework.boot.context.logging.LoggingApplicationListener",
      "defaultValue": "yyyy-MM-dd HH:mm:ss.SSS"
    },
    {
      "name": "logging.pattern.file",
      "type": "java.lang.String",
      "description": "Appender pattern for output to a file. Supported only with the default Logback setup.",
      "sourceType": "org.springframework.boot.context.logging.LoggingApplicationListener",
      "defaultValue": "%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%t] %-40.40logger{39} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"
    },
    {
      "name": "logging.pattern.level",
      "type": "java.lang.String",
      "description": "Appender pattern for log level. Supported only with the default Logback setup.",
      "sourceType": "org.springframework.boot.context.logging.LoggingApplicationListener",
      "defaultValue": "%5p"
    },
    {
      "name": "logging.register-shutdown-hook",
      "type": "java.lang.Boolean",
      "description": "Register a shutdown hook for the logging system when it is initialized.",
      "sourceType": "org.springframework.boot.context.logging.LoggingApplicationListener",
      "defaultValue": false
    },
    {
      "name": "management.add-application-context-header",
      "type": "java.lang.Boolean",
      "description": "Add the \"X-Application-Context\" HTTP header in each response.",
      "defaultValue": true,
      "deprecated": true,
      "deprecation": {"replacement": "management.server.add-application-context-header"}
    },
    {
      "name": "management.address",
      "type": "java.net.InetAddress",
      "description": "Network address that the management endpoints should bind to.",
      "deprecated": true,
      "deprecation": {"replacement": "management.server.address"}
    },
    {
      "name": "management.cloudfoundry.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable extended Cloud Foundry actuator endpoints.",
      "defaultValue": true
    },
    {
      "name": "management.cloudfoundry.skip-ssl-validation",
      "type": "java.lang.Boolean",
      "description": "Whether to skip SSL verification for Cloud Foundry actuator endpoint security calls.",
      "defaultValue": false
    },
    {
      "name": "management.context-path",
      "type": "java.lang.String",
      "description": "Management endpoint context-path.",
      "defaultValue": "",
      "deprecated": true,
      "deprecation": {"replacement": "management.server.servlet.context-path"}
    },
    {
      "name": "management.endpoint.auditevents.cache.time-to-live",
      "type": "java.time.Duration",
      "description": "Maximum time that a response can be cached.",
      "sourceType": "org.springframework.boot.actuate.audit.AuditEventsEndpoint",
      "defaultValue": "0ms"
    },
    {
      "name": "management.endpoint.auditevents.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable the auditevents endpoint.",
      "sourceType": "org.springframework.boot.actuate.audit.AuditEventsEndpoint",
      "defaultValue": true
    },
    {
      "name": "management.endpoint.beans.cache.time-to-live",
      "type": "java.time.Duration",
      "description": "Maximum time that a response can be cached.",
      "sourceType": "org.springframework.boot.actuate.beans.BeansEndpoint",
      "defaultValue": "0ms"
    },
    {
      "name": "management.endpoint.beans.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable the beans endpoint.",
      "sourceType": "org.springframework.boot.actuate.beans.BeansEndpoint",
      "defaultValue": true
    },
    {
      "name": "management.endpoint.bindings.cache.time-to-live",
      "type": "java.time.Duration",
      "description": "Maximum time that a response can be cached.",
      "sourceType": "org.springframework.cloud.stream.endpoint.BindingsEndpoint",
      "defaultValue": "0ms"
    },
    {
      "name": "management.endpoint.bindings.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable the bindings endpoint.",
      "sourceType": "org.springframework.cloud.stream.endpoint.BindingsEndpoint",
      "defaultValue": true
    },
    {
      "name": "management.endpoint.channels.cache.time-to-live",
      "type": "java.time.Duration",
      "description": "Maximum time that a response can be cached.",
      "sourceType": "org.springframework.cloud.stream.endpoint.ChannelsEndpoint",
      "defaultValue": "0ms"
    },
    {
      "name": "management.endpoint.channels.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable the channels endpoint.",
      "sourceType": "org.springframework.cloud.stream.endpoint.ChannelsEndpoint",
      "defaultValue": true
    },
    {
      "name": "management.endpoint.conditions.cache.time-to-live",
      "type": "java.time.Duration",
      "description": "Maximum time that a response can be cached.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.condition.ConditionsReportEndpoint",
      "defaultValue": "0ms"
    },
    {
      "name": "management.endpoint.conditions.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable the conditions endpoint.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.condition.ConditionsReportEndpoint",
      "defaultValue": true
    },
    {
      "name": "management.endpoint.configprops.cache.time-to-live",
      "type": "java.time.Duration",
      "description": "Maximum time that a response can be cached.",
      "sourceType": "org.springframework.boot.actuate.context.properties.ConfigurationPropertiesReportEndpoint",
      "defaultValue": "0ms"
    },
    {
      "name": "management.endpoint.configprops.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable the configprops endpoint.",
      "sourceType": "org.springframework.boot.actuate.context.properties.ConfigurationPropertiesReportEndpoint",
      "defaultValue": true
    },
    {
      "name": "management.endpoint.configprops.keys-to-sanitize",
      "type": "java.lang.String[]",
      "description": "Keys that should be sanitized. Keys can be simple strings that the property ends\n with or regular expressions.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.context.properties.ConfigurationPropertiesReportEndpointProperties",
      "defaultValue": [
        "password",
        "secret",
        "key",
        "token",
        ".*credentials.*",
        "vcap_services",
        "sun.java.command"
      ]
    },
    {
      "name": "management.endpoint.env.cache.time-to-live",
      "type": "java.time.Duration",
      "description": "Maximum time that a response can be cached.",
      "sourceType": "org.springframework.boot.actuate.env.EnvironmentEndpoint",
      "defaultValue": "0ms"
    },
    {
      "name": "management.endpoint.env.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable the env endpoint.",
      "sourceType": "org.springframework.boot.actuate.env.EnvironmentEndpoint",
      "defaultValue": true
    },
    {
      "name": "management.endpoint.env.keys-to-sanitize",
      "type": "java.lang.String[]",
      "description": "Keys that should be sanitized. Keys can be simple strings that the property ends\n with or regular expressions.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.env.EnvironmentEndpointProperties",
      "defaultValue": [
        "password",
        "secret",
        "key",
        "token",
        ".*credentials.*",
        "vcap_services",
        "sun.java.command"
      ]
    },
    {
      "name": "management.endpoint.env.post.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable changing the Environment through a POST to /env.",
      "defaultValue": true
    },
    {
      "name": "management.endpoint.features.cache.time-to-live",
      "type": "java.time.Duration",
      "description": "Maximum time that a response can be cached.",
      "sourceType": "org.springframework.cloud.client.actuator.FeaturesEndpoint",
      "defaultValue": "0ms"
    },
    {
      "name": "management.endpoint.features.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable the features endpoint.",
      "sourceType": "org.springframework.cloud.client.actuator.FeaturesEndpoint",
      "defaultValue": true
    },
    {
      "name": "management.endpoint.flyway.cache.time-to-live",
      "type": "java.time.Duration",
      "description": "Maximum time that a response can be cached.",
      "sourceType": "org.springframework.boot.actuate.flyway.FlywayEndpoint",
      "defaultValue": "0ms"
    },
    {
      "name": "management.endpoint.flyway.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable the flyway endpoint.",
      "sourceType": "org.springframework.boot.actuate.flyway.FlywayEndpoint",
      "defaultValue": true
    },
    {
      "name": "management.endpoint.health.cache.time-to-live",
      "type": "java.time.Duration",
      "description": "Maximum time that a response can be cached.",
      "sourceType": "org.springframework.boot.actuate.health.HealthEndpoint",
      "defaultValue": "0ms"
    },
    {
      "name": "management.endpoint.health.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable the health endpoint.",
      "sourceType": "org.springframework.boot.actuate.health.HealthEndpoint",
      "defaultValue": true
    },
    {
      "name": "management.endpoint.health.roles",
      "type": "java.util.Set<java.lang.String>",
      "description": "Roles used to determine whether or not a user is authorized to be shown details.\n When empty, all authenticated users are authorized.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.health.HealthEndpointProperties"
    },
    {
      "name": "management.endpoint.health.show-details",
      "type": "org.springframework.boot.actuate.health.ShowDetails",
      "description": "When to show full health details.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.health.HealthEndpointProperties",
      "defaultValue": "never"
    },
    {
      "name": "management.endpoint.heapdump.cache.time-to-live",
      "type": "java.time.Duration",
      "description": "Maximum time that a response can be cached.",
      "sourceType": "org.springframework.boot.actuate.management.HeapDumpWebEndpoint",
      "defaultValue": "0ms"
    },
    {
      "name": "management.endpoint.heapdump.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable the heapdump endpoint.",
      "sourceType": "org.springframework.boot.actuate.management.HeapDumpWebEndpoint",
      "defaultValue": true
    },
    {
      "name": "management.endpoint.httptrace.cache.time-to-live",
      "type": "java.time.Duration",
      "description": "Maximum time that a response can be cached.",
      "sourceType": "org.springframework.boot.actuate.trace.http.HttpTraceEndpoint",
      "defaultValue": "0ms"
    },
    {
      "name": "management.endpoint.httptrace.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable the httptrace endpoint.",
      "sourceType": "org.springframework.boot.actuate.trace.http.HttpTraceEndpoint",
      "defaultValue": true
    },
    {
      "name": "management.endpoint.info.cache.time-to-live",
      "type": "java.time.Duration",
      "description": "Maximum time that a response can be cached.",
      "sourceType": "org.springframework.boot.actuate.info.InfoEndpoint",
      "defaultValue": "0ms"
    },
    {
      "name": "management.endpoint.info.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable the info endpoint.",
      "sourceType": "org.springframework.boot.actuate.info.InfoEndpoint",
      "defaultValue": true
    },
    {
      "name": "management.endpoint.jolokia.config",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Jolokia settings. Refer to the documentation of Jolokia for more details.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.jolokia.JolokiaProperties"
    },
    {
      "name": "management.endpoint.jolokia.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable the jolokia endpoint.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.jolokia.JolokiaEndpoint",
      "defaultValue": true
    },
    {
      "name": "management.endpoint.liquibase.cache.time-to-live",
      "type": "java.time.Duration",
      "description": "Maximum time that a response can be cached.",
      "sourceType": "org.springframework.boot.actuate.liquibase.LiquibaseEndpoint",
      "defaultValue": "0ms"
    },
    {
      "name": "management.endpoint.liquibase.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable the liquibase endpoint.",
      "sourceType": "org.springframework.boot.actuate.liquibase.LiquibaseEndpoint",
      "defaultValue": true
    },
    {
      "name": "management.endpoint.logfile.cache.time-to-live",
      "type": "java.time.Duration",
      "description": "Maximum time that a response can be cached.",
      "sourceType": "org.springframework.boot.actuate.logging.LogFileWebEndpoint",
      "defaultValue": "0ms"
    },
    {
      "name": "management.endpoint.logfile.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable the logfile endpoint.",
      "sourceType": "org.springframework.boot.actuate.logging.LogFileWebEndpoint",
      "defaultValue": true
    },
    {
      "name": "management.endpoint.logfile.external-file",
      "type": "java.io.File",
      "description": "External Logfile to be accessed. Can be used if the logfile is written by output\n redirect and not by the logging system itself.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.logging.LogFileWebEndpointProperties"
    },
    {
      "name": "management.endpoint.loggers.cache.time-to-live",
      "type": "java.time.Duration",
      "description": "Maximum time that a response can be cached.",
      "sourceType": "org.springframework.boot.actuate.logging.LoggersEndpoint",
      "defaultValue": "0ms"
    },
    {
      "name": "management.endpoint.loggers.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable the loggers endpoint.",
      "sourceType": "org.springframework.boot.actuate.logging.LoggersEndpoint",
      "defaultValue": true
    },
    {
      "name": "management.endpoint.mappings.cache.time-to-live",
      "type": "java.time.Duration",
      "description": "Maximum time that a response can be cached.",
      "sourceType": "org.springframework.boot.actuate.web.mappings.MappingsEndpoint",
      "defaultValue": "0ms"
    },
    {
      "name": "management.endpoint.mappings.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable the mappings endpoint.",
      "sourceType": "org.springframework.boot.actuate.web.mappings.MappingsEndpoint",
      "defaultValue": true
    },
    {
      "name": "management.endpoint.metrics.cache.time-to-live",
      "type": "java.time.Duration",
      "description": "Maximum time that a response can be cached.",
      "sourceType": "org.springframework.boot.actuate.metrics.MetricsEndpoint",
      "defaultValue": "0ms"
    },
    {
      "name": "management.endpoint.metrics.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable the metrics endpoint.",
      "sourceType": "org.springframework.boot.actuate.metrics.MetricsEndpoint",
      "defaultValue": true
    },
    {
      "name": "management.endpoint.pause.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the /pause endpoint (to send Lifecycle.stop()).",
      "defaultValue": true
    },
    {
      "name": "management.endpoint.prometheus.cache.time-to-live",
      "type": "java.time.Duration",
      "description": "Maximum time that a response can be cached.",
      "sourceType": "org.springframework.boot.actuate.metrics.export.prometheus.PrometheusScrapeEndpoint",
      "defaultValue": "0ms"
    },
    {
      "name": "management.endpoint.prometheus.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable the prometheus endpoint.",
      "sourceType": "org.springframework.boot.actuate.metrics.export.prometheus.PrometheusScrapeEndpoint",
      "defaultValue": true
    },
    {
      "name": "management.endpoint.refresh.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the /refresh endpoint to refresh configuration and re-initialize refresh scoped beans.",
      "sourceType": "org.springframework.cloud.endpoint.RefreshEndpoint",
      "defaultValue": true
    },
    {
      "name": "management.endpoint.restart.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the /restart endpoint to restart the application context.",
      "sourceType": "org.springframework.cloud.context.restart.RestartEndpoint",
      "defaultValue": true
    },
    {
      "name": "management.endpoint.resume.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the /resume endpoint (to send Lifecycle.start()).",
      "defaultValue": true
    },
    {
      "name": "management.endpoint.scheduledtasks.cache.time-to-live",
      "type": "java.time.Duration",
      "description": "Maximum time that a response can be cached.",
      "sourceType": "org.springframework.boot.actuate.scheduling.ScheduledTasksEndpoint",
      "defaultValue": "0ms"
    },
    {
      "name": "management.endpoint.scheduledtasks.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable the scheduledtasks endpoint.",
      "sourceType": "org.springframework.boot.actuate.scheduling.ScheduledTasksEndpoint",
      "defaultValue": true
    },
    {
      "name": "management.endpoint.service-registry.cache.time-to-live",
      "type": "java.time.Duration",
      "description": "Maximum time that a response can be cached.",
      "sourceType": "org.springframework.cloud.client.serviceregistry.endpoint.ServiceRegistryEndpoint",
      "defaultValue": "0ms"
    },
    {
      "name": "management.endpoint.service-registry.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable the service-registry endpoint.",
      "sourceType": "org.springframework.cloud.client.serviceregistry.endpoint.ServiceRegistryEndpoint",
      "defaultValue": true
    },
    {
      "name": "management.endpoint.sessions.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable the sessions endpoint.",
      "sourceType": "org.springframework.boot.actuate.session.SessionsEndpoint",
      "defaultValue": true
    },
    {
      "name": "management.endpoint.shutdown.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable the shutdown endpoint.",
      "sourceType": "org.springframework.boot.actuate.context.ShutdownEndpoint",
      "defaultValue": false
    },
    {
      "name": "management.endpoint.threaddump.cache.time-to-live",
      "type": "java.time.Duration",
      "description": "Maximum time that a response can be cached.",
      "sourceType": "org.springframework.boot.actuate.management.ThreadDumpEndpoint",
      "defaultValue": "0ms"
    },
    {
      "name": "management.endpoint.threaddump.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable the threaddump endpoint.",
      "sourceType": "org.springframework.boot.actuate.management.ThreadDumpEndpoint",
      "defaultValue": true
    },
    {
      "name": "management.endpoints.enabled-by-default",
      "type": "java.lang.Boolean",
      "description": "Whether to enable or disable all endpoints by default."
    },
    {
      "name": "management.endpoints.jmx.domain",
      "type": "java.lang.String",
      "description": "Endpoints JMX domain name. Fallback to 'spring.jmx.default-domain' if set.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointProperties",
      "defaultValue": "org.springframework.boot"
    },
    {
      "name": "management.endpoints.jmx.exposure.exclude",
      "type": "java.util.Set<java.lang.String>",
      "description": "Endpoint IDs that should be excluded.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointProperties$Exposure"
    },
    {
      "name": "management.endpoints.jmx.exposure.include",
      "type": "java.util.Set<java.lang.String>",
      "description": "Endpoint IDs that should be included or '*' for all.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointProperties$Exposure",
      "defaultValue": "*"
    },
    {
      "name": "management.endpoints.jmx.static-names",
      "type": "java.util.Properties",
      "description": "Additional static properties to append to all ObjectNames of MBeans representing\n Endpoints.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointProperties"
    },
    {
      "name": "management.endpoints.jmx.unique-names",
      "type": "java.lang.Boolean",
      "description": "Whether to ensure that ObjectNames are modified in case of conflict.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointProperties",
      "defaultValue": false
    },
    {
      "name": "management.endpoints.web.base-path",
      "type": "java.lang.String",
      "description": "Base path for Web endpoints. Relative to server.servlet.context-path or\n management.server.servlet.context-path if management.server.port is configured.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties",
      "defaultValue": "/actuator"
    },
    {
      "name": "management.endpoints.web.cors.allow-credentials",
      "type": "java.lang.Boolean",
      "description": "Whether credentials are supported. When not set, credentials are not supported.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.endpoint.web.CorsEndpointProperties"
    },
    {
      "name": "management.endpoints.web.cors.allowed-headers",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of headers to allow in a request. '*' allows all headers.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.endpoint.web.CorsEndpointProperties"
    },
    {
      "name": "management.endpoints.web.cors.allowed-methods",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of methods to allow. '*' allows all methods. When not set,\n defaults to GET.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.endpoint.web.CorsEndpointProperties"
    },
    {
      "name": "management.endpoints.web.cors.allowed-origins",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of origins to allow. '*' allows all origins. When not set,\n CORS support is disabled.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.endpoint.web.CorsEndpointProperties"
    },
    {
      "name": "management.endpoints.web.cors.exposed-headers",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of headers to include in a response.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.endpoint.web.CorsEndpointProperties"
    },
    {
      "name": "management.endpoints.web.cors.max-age",
      "type": "java.time.Duration",
      "description": "How long the response from a pre-flight request can be cached by clients. If a\n duration suffix is not specified, seconds will be used.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.endpoint.web.CorsEndpointProperties",
      "defaultValue": "1800s"
    },
    {
      "name": "management.endpoints.web.exposure.exclude",
      "type": "java.util.Set<java.lang.String>",
      "description": "Endpoint IDs that should be excluded.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties$Exposure"
    },
    {
      "name": "management.endpoints.web.exposure.include",
      "type": "java.util.Set<java.lang.String>",
      "description": "Endpoint IDs that should be included or '*' for all.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties$Exposure",
      "defaultValue": [
        "health",
        "info"
      ]
    },
    {
      "name": "management.endpoints.web.path-mapping",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Mapping between endpoint IDs and the path that should expose them.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties"
    },
    {
      "name": "management.health.cassandra.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable Cassandra health check.",
      "defaultValue": true
    },
    {
      "name": "management.health.couchbase.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable Couchbase health check.",
      "defaultValue": true
    },
    {
      "name": "management.health.db.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable database health check.",
      "defaultValue": true
    },
    {
      "name": "management.health.defaults.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable default health indicators.",
      "defaultValue": true
    },
    {
      "name": "management.health.diskspace.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable disk space health check.",
      "defaultValue": true
    },
    {
      "name": "management.health.diskspace.path",
      "type": "java.io.File",
      "description": "Path used to compute the available disk space.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.system.DiskSpaceHealthIndicatorProperties"
    },
    {
      "name": "management.health.diskspace.threshold",
      "type": "java.lang.Long",
      "description": "Minimum disk space, in bytes, that should be available.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.system.DiskSpaceHealthIndicatorProperties",
      "defaultValue": 0
    },
    {
      "name": "management.health.elasticsearch.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable Elasticsearch health check.",
      "defaultValue": true
    },
    {
      "name": "management.health.elasticsearch.indices",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated index names.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.elasticsearch.ElasticsearchHealthIndicatorProperties"
    },
    {
      "name": "management.health.elasticsearch.response-timeout",
      "type": "java.time.Duration",
      "description": "Time to wait for a response from the cluster.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.elasticsearch.ElasticsearchHealthIndicatorProperties",
      "defaultValue": "100ms"
    },
    {
      "name": "management.health.influxdb.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable InfluxDB health check.",
      "defaultValue": true
    },
    {
      "name": "management.health.jms.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable JMS health check.",
      "defaultValue": true
    },
    {
      "name": "management.health.ldap.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable LDAP health check.",
      "defaultValue": true
    },
    {
      "name": "management.health.mail.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable Mail health check.",
      "defaultValue": true
    },
    {
      "name": "management.health.mongo.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable MongoDB health check.",
      "defaultValue": true
    },
    {
      "name": "management.health.neo4j.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable Neo4j health check.",
      "defaultValue": true
    },
    {
      "name": "management.health.rabbit.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable RabbitMQ health check.",
      "defaultValue": true
    },
    {
      "name": "management.health.redis.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable Redis health check.",
      "defaultValue": true
    },
    {
      "name": "management.health.refresh.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the health endpoint for the refresh scope.",
      "defaultValue": true
    },
    {
      "name": "management.health.solr.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable Solr health check.",
      "defaultValue": true
    },
    {
      "name": "management.health.status.http-mapping",
      "type": "java.util.Map<java.lang.String,java.lang.Integer>",
      "description": "Mapping of health statuses to HTTP status codes. By default, registered health\n statuses map to sensible defaults (for example, UP maps to 200).",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorProperties"
    },
    {
      "name": "management.health.status.order",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of health statuses in order of severity.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorProperties",
      "defaultValue": [
        "DOWN",
        "OUT_OF_SERVICE",
        "UP",
        "UNKNOWN"
      ]
    },
    {
      "name": "management.info.build.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable build info.",
      "defaultValue": true
    },
    {
      "name": "management.info.defaults.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable default info contributors.",
      "defaultValue": true
    },
    {
      "name": "management.info.env.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable environment info.",
      "defaultValue": true
    },
    {
      "name": "management.info.git.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable git info.",
      "defaultValue": true
    },
    {
      "name": "management.info.git.mode",
      "type": "org.springframework.boot.actuate.info.InfoPropertiesInfoContributor$Mode",
      "description": "Mode to use to expose git information.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.info.InfoContributorProperties$Git",
      "defaultValue": "simple"
    },
    {
      "name": "management.metrics.binders.files.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable files metrics.",
      "defaultValue": true
    },
    {
      "name": "management.metrics.binders.integration.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable Spring Integration metrics.",
      "defaultValue": true
    },
    {
      "name": "management.metrics.binders.jvm.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable JVM metrics.",
      "defaultValue": true
    },
    {
      "name": "management.metrics.binders.logback.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable Logback metrics.",
      "defaultValue": true
    },
    {
      "name": "management.metrics.binders.processor.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable processor metrics.",
      "defaultValue": true
    },
    {
      "name": "management.metrics.binders.uptime.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable uptime metrics.",
      "defaultValue": true
    },
    {
      "name": "management.metrics.distribution.percentiles",
      "type": "java.util.Map<java.lang.String,double[]>",
      "description": "Specific computed non-aggregable percentiles to ship to the backend for meter\n IDs starting-with the specified name. The longest match wins, the key `all` can\n also be used to configure all meters.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties$Distribution"
    },
    {
      "name": "management.metrics.distribution.percentiles-histogram",
      "type": "java.util.Map<java.lang.String,java.lang.Boolean>",
      "description": "Whether meter IDs starting with the specified name should publish percentile\n histograms. For monitoring systems that support aggregable percentile\n calculation based on a histogram, this can be set to true. For other systems,\n this has no effect. The longest match wins, the key `all` can also be used to\n configure all meters.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties$Distribution"
    },
    {
      "name": "management.metrics.distribution.sla",
      "type": "java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.metrics.ServiceLevelAgreementBoundary[]>",
      "description": "Specific SLA boundaries for meter IDs starting-with the specified name. The\n longest match wins, the key `all` can also be used to configure all meters.\n Counters will be published for each specified boundary. Values can be specified\n as a long or as a Duration value (for timer meters, defaulting to ms if no unit\n specified).",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties$Distribution"
    },
    {
      "name": "management.metrics.enable",
      "type": "java.util.Map<java.lang.String,java.lang.Boolean>",
      "description": "Whether meter IDs starting-with the specified name should be enabled. The longest\n match wins, the key `all` can also be used to configure all meters.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties"
    },
    {
      "name": "management.metrics.export.atlas.batch-size",
      "type": "java.lang.Integer",
      "description": "Number of measurements per request to use for this backend. If more measurements\n are found, then multiple requests will be made.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.atlas.AtlasProperties",
      "defaultValue": 10000
    },
    {
      "name": "management.metrics.export.atlas.config-refresh-frequency",
      "type": "java.time.Duration",
      "description": "Frequency for refreshing config settings from the LWC service.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.atlas.AtlasProperties",
      "defaultValue": "10s"
    },
    {
      "name": "management.metrics.export.atlas.config-time-to-live",
      "type": "java.time.Duration",
      "description": "Time to live for subscriptions from the LWC service.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.atlas.AtlasProperties",
      "defaultValue": "150s"
    },
    {
      "name": "management.metrics.export.atlas.config-uri",
      "type": "java.lang.String",
      "description": "URI for the Atlas LWC endpoint to retrieve current subscriptions.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.atlas.AtlasProperties",
      "defaultValue": "http://localhost:7101/lwc/api/v1/expressions/local-dev"
    },
    {
      "name": "management.metrics.export.atlas.connect-timeout",
      "type": "java.time.Duration",
      "description": "Connection timeout for requests to this backend.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.atlas.AtlasProperties",
      "defaultValue": "1s"
    },
    {
      "name": "management.metrics.export.atlas.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether exporting of metrics to this backend is enabled.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.atlas.AtlasProperties",
      "defaultValue": true
    },
    {
      "name": "management.metrics.export.atlas.eval-uri",
      "type": "java.lang.String",
      "description": "URI for the Atlas LWC endpoint to evaluate the data for a subscription.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.atlas.AtlasProperties",
      "defaultValue": "http://localhost:7101/lwc/api/v1/evaluate"
    },
    {
      "name": "management.metrics.export.atlas.lwc-enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable streaming to Atlas LWC.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.atlas.AtlasProperties",
      "defaultValue": false
    },
    {
      "name": "management.metrics.export.atlas.meter-time-to-live",
      "type": "java.time.Duration",
      "description": "Time to live for meters that do not have any activity. After this period the meter\n will be considered expired and will not get reported.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.atlas.AtlasProperties",
      "defaultValue": "15m"
    },
    {
      "name": "management.metrics.export.atlas.num-threads",
      "type": "java.lang.Integer",
      "description": "Number of threads to use with the metrics publishing scheduler.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.atlas.AtlasProperties",
      "defaultValue": 2
    },
    {
      "name": "management.metrics.export.atlas.read-timeout",
      "type": "java.time.Duration",
      "description": "Read timeout for requests to this backend.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.atlas.AtlasProperties",
      "defaultValue": "10s"
    },
    {
      "name": "management.metrics.export.atlas.step",
      "type": "java.time.Duration",
      "description": "Step size (i.e. reporting frequency) to use.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.atlas.AtlasProperties",
      "defaultValue": "1m"
    },
    {
      "name": "management.metrics.export.atlas.uri",
      "type": "java.lang.String",
      "description": "URI of the Atlas server.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.atlas.AtlasProperties",
      "defaultValue": "http://localhost:7101/api/v1/publish"
    },
    {
      "name": "management.metrics.export.datadog.api-key",
      "type": "java.lang.String",
      "description": "Datadog API key.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.datadog.DatadogProperties"
    },
    {
      "name": "management.metrics.export.datadog.application-key",
      "type": "java.lang.String",
      "description": "Datadog application key. Not strictly required, but improves the Datadog experience\n by sending meter descriptions, types, and base units to Datadog.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.datadog.DatadogProperties"
    },
    {
      "name": "management.metrics.export.datadog.batch-size",
      "type": "java.lang.Integer",
      "description": "Number of measurements per request to use for this backend. If more measurements\n are found, then multiple requests will be made.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.datadog.DatadogProperties",
      "defaultValue": 10000
    },
    {
      "name": "management.metrics.export.datadog.connect-timeout",
      "type": "java.time.Duration",
      "description": "Connection timeout for requests to this backend.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.datadog.DatadogProperties",
      "defaultValue": "1s"
    },
    {
      "name": "management.metrics.export.datadog.descriptions",
      "type": "java.lang.Boolean",
      "description": "Whether to publish descriptions metadata to Datadog. Turn this off to minimize the\n amount of metadata sent.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.datadog.DatadogProperties",
      "defaultValue": true
    },
    {
      "name": "management.metrics.export.datadog.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether exporting of metrics to this backend is enabled.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.datadog.DatadogProperties",
      "defaultValue": true
    },
    {
      "name": "management.metrics.export.datadog.host-tag",
      "type": "java.lang.String",
      "description": "Tag that will be mapped to \"host\" when shipping metrics to Datadog.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.datadog.DatadogProperties",
      "defaultValue": "instance"
    },
    {
      "name": "management.metrics.export.datadog.num-threads",
      "type": "java.lang.Integer",
      "description": "Number of threads to use with the metrics publishing scheduler.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.datadog.DatadogProperties",
      "defaultValue": 2
    },
    {
      "name": "management.metrics.export.datadog.read-timeout",
      "type": "java.time.Duration",
      "description": "Read timeout for requests to this backend.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.datadog.DatadogProperties",
      "defaultValue": "10s"
    },
    {
      "name": "management.metrics.export.datadog.step",
      "type": "java.time.Duration",
      "description": "Step size (i.e. reporting frequency) to use.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.datadog.DatadogProperties",
      "defaultValue": "1m"
    },
    {
      "name": "management.metrics.export.datadog.uri",
      "type": "java.lang.String",
      "description": "URI to ship metrics to. If you need to publish metrics to an internal proxy\n en-route to Datadog, you can define the location of the proxy with this.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.datadog.DatadogProperties",
      "defaultValue": "https://app.datadoghq.com"
    },
    {
      "name": "management.metrics.export.ganglia.addressing-mode",
      "type": "info.ganglia.gmetric4j.gmetric.GMetric$UDPAddressingMode",
      "description": "UDP addressing mode, either unicast or multicast.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.ganglia.GangliaProperties",
      "defaultValue": "multicast"
    },
    {
      "name": "management.metrics.export.ganglia.duration-units",
      "type": "java.util.concurrent.TimeUnit",
      "description": "Base time unit used to report durations.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.ganglia.GangliaProperties",
      "defaultValue": "milliseconds"
    },
    {
      "name": "management.metrics.export.ganglia.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether exporting of metrics to Ganglia is enabled.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.ganglia.GangliaProperties",
      "defaultValue": true
    },
    {
      "name": "management.metrics.export.ganglia.host",
      "type": "java.lang.String",
      "description": "Host of the Ganglia server to receive exported metrics.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.ganglia.GangliaProperties",
      "defaultValue": "localhost"
    },
    {
      "name": "management.metrics.export.ganglia.port",
      "type": "java.lang.Integer",
      "description": "Port of the Ganglia server to receive exported metrics.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.ganglia.GangliaProperties",
      "defaultValue": 8649
    },
    {
      "name": "management.metrics.export.ganglia.protocol-version",
      "type": "java.lang.String",
      "description": "Ganglia protocol version. Must be either 3.1 or 3.0.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.ganglia.GangliaProperties",
      "defaultValue": "3.1"
    },
    {
      "name": "management.metrics.export.ganglia.rate-units",
      "type": "java.util.concurrent.TimeUnit",
      "description": "Base time unit used to report rates.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.ganglia.GangliaProperties",
      "defaultValue": "seconds"
    },
    {
      "name": "management.metrics.export.ganglia.step",
      "type": "java.time.Duration",
      "description": "Step size (i.e. reporting frequency) to use.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.ganglia.GangliaProperties",
      "defaultValue": "1m"
    },
    {
      "name": "management.metrics.export.ganglia.time-to-live",
      "type": "java.lang.Integer",
      "description": "Time to live for metrics on Ganglia. Set the multi-cast Time-To-Live to be one\n greater than the number of hops (routers) between the hosts.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.ganglia.GangliaProperties",
      "defaultValue": 1
    },
    {
      "name": "management.metrics.export.graphite.duration-units",
      "type": "java.util.concurrent.TimeUnit",
      "description": "Base time unit used to report durations.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.graphite.GraphiteProperties",
      "defaultValue": "milliseconds"
    },
    {
      "name": "management.metrics.export.graphite.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether exporting of metrics to Graphite is enabled.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.graphite.GraphiteProperties",
      "defaultValue": true
    },
    {
      "name": "management.metrics.export.graphite.host",
      "type": "java.lang.String",
      "description": "Host of the Graphite server to receive exported metrics.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.graphite.GraphiteProperties",
      "defaultValue": "localhost"
    },
    {
      "name": "management.metrics.export.graphite.port",
      "type": "java.lang.Integer",
      "description": "Port of the Graphite server to receive exported metrics.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.graphite.GraphiteProperties",
      "defaultValue": 2004
    },
    {
      "name": "management.metrics.export.graphite.protocol",
      "type": "io.micrometer.graphite.GraphiteProtocol",
      "description": "Protocol to use while shipping data to Graphite.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.graphite.GraphiteProperties",
      "defaultValue": "pickled"
    },
    {
      "name": "management.metrics.export.graphite.rate-units",
      "type": "java.util.concurrent.TimeUnit",
      "description": "Base time unit used to report rates.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.graphite.GraphiteProperties",
      "defaultValue": "seconds"
    },
    {
      "name": "management.metrics.export.graphite.step",
      "type": "java.time.Duration",
      "description": "Step size (i.e. reporting frequency) to use.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.graphite.GraphiteProperties",
      "defaultValue": "1m"
    },
    {
      "name": "management.metrics.export.graphite.tags-as-prefix",
      "type": "java.lang.String[]",
      "description": "For the default naming convention, turn the specified tag keys into part of the\n metric prefix.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.graphite.GraphiteProperties",
      "defaultValue": []
    },
    {
      "name": "management.metrics.export.influx.auto-create-db",
      "type": "java.lang.Boolean",
      "description": "Whether to create the Influx database if it does not exist before attempting to\n publish metrics to it.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.influx.InfluxProperties",
      "defaultValue": true
    },
    {
      "name": "management.metrics.export.influx.batch-size",
      "type": "java.lang.Integer",
      "description": "Number of measurements per request to use for this backend. If more measurements\n are found, then multiple requests will be made.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.influx.InfluxProperties",
      "defaultValue": 10000
    },
    {
      "name": "management.metrics.export.influx.compressed",
      "type": "java.lang.Boolean",
      "description": "Whether to enable GZIP compression of metrics batches published to Influx.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.influx.InfluxProperties",
      "defaultValue": true
    },
    {
      "name": "management.metrics.export.influx.connect-timeout",
      "type": "java.time.Duration",
      "description": "Connection timeout for requests to this backend.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.influx.InfluxProperties",
      "defaultValue": "1s"
    },
    {
      "name": "management.metrics.export.influx.consistency",
      "type": "io.micrometer.influx.InfluxConsistency",
      "description": "Write consistency for each point.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.influx.InfluxProperties",
      "defaultValue": "one"
    },
    {
      "name": "management.metrics.export.influx.db",
      "type": "java.lang.String",
      "description": "Tag that will be mapped to \"host\" when shipping metrics to Influx.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.influx.InfluxProperties",
      "defaultValue": "mydb"
    },
    {
      "name": "management.metrics.export.influx.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether exporting of metrics to this backend is enabled.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.influx.InfluxProperties",
      "defaultValue": true
    },
    {
      "name": "management.metrics.export.influx.num-threads",
      "type": "java.lang.Integer",
      "description": "Number of threads to use with the metrics publishing scheduler.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.influx.InfluxProperties",
      "defaultValue": 2
    },
    {
      "name": "management.metrics.export.influx.password",
      "type": "java.lang.String",
      "description": "Login password of the Influx server.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.influx.InfluxProperties"
    },
    {
      "name": "management.metrics.export.influx.read-timeout",
      "type": "java.time.Duration",
      "description": "Read timeout for requests to this backend.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.influx.InfluxProperties",
      "defaultValue": "10s"
    },
    {
      "name": "management.metrics.export.influx.retention-policy",
      "type": "java.lang.String",
      "description": "Retention policy to use (Influx writes to the DEFAULT retention policy if one is\n not specified).",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.influx.InfluxProperties"
    },
    {
      "name": "management.metrics.export.influx.step",
      "type": "java.time.Duration",
      "description": "Step size (i.e. reporting frequency) to use.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.influx.InfluxProperties",
      "defaultValue": "1m"
    },
    {
      "name": "management.metrics.export.influx.uri",
      "type": "java.lang.String",
      "description": "URI of the Influx server.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.influx.InfluxProperties",
      "defaultValue": "http://localhost:8086"
    },
    {
      "name": "management.metrics.export.influx.user-name",
      "type": "java.lang.String",
      "description": "Login user of the Influx server.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.influx.InfluxProperties"
    },
    {
      "name": "management.metrics.export.jmx.domain",
      "type": "java.lang.String",
      "description": "Metrics JMX domain name.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.jmx.JmxProperties",
      "defaultValue": "metrics"
    },
    {
      "name": "management.metrics.export.jmx.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether exporting of metrics to JMX is enabled.",
      "defaultValue": true
    },
    {
      "name": "management.metrics.export.jmx.step",
      "type": "java.time.Duration",
      "description": "Step size (i.e. reporting frequency) to use.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.jmx.JmxProperties",
      "defaultValue": "1m"
    },
    {
      "name": "management.metrics.export.newrelic.account-id",
      "type": "java.lang.String",
      "description": "New Relic account ID.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.newrelic.NewRelicProperties"
    },
    {
      "name": "management.metrics.export.newrelic.api-key",
      "type": "java.lang.String",
      "description": "New Relic API key.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.newrelic.NewRelicProperties"
    },
    {
      "name": "management.metrics.export.newrelic.batch-size",
      "type": "java.lang.Integer",
      "description": "Number of measurements per request to use for this backend. If more measurements\n are found, then multiple requests will be made.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.newrelic.NewRelicProperties",
      "defaultValue": 10000
    },
    {
      "name": "management.metrics.export.newrelic.connect-timeout",
      "type": "java.time.Duration",
      "description": "Connection timeout for requests to this backend.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.newrelic.NewRelicProperties",
      "defaultValue": "1s"
    },
    {
      "name": "management.metrics.export.newrelic.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether exporting of metrics to this backend is enabled.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.newrelic.NewRelicProperties",
      "defaultValue": true
    },
    {
      "name": "management.metrics.export.newrelic.num-threads",
      "type": "java.lang.Integer",
      "description": "Number of threads to use with the metrics publishing scheduler.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.newrelic.NewRelicProperties",
      "defaultValue": 2
    },
    {
      "name": "management.metrics.export.newrelic.read-timeout",
      "type": "java.time.Duration",
      "description": "Read timeout for requests to this backend.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.newrelic.NewRelicProperties",
      "defaultValue": "10s"
    },
    {
      "name": "management.metrics.export.newrelic.step",
      "type": "java.time.Duration",
      "description": "Step size (i.e. reporting frequency) to use.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.newrelic.NewRelicProperties",
      "defaultValue": "1m"
    },
    {
      "name": "management.metrics.export.newrelic.uri",
      "type": "java.lang.String",
      "description": "URI to ship metrics to.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.newrelic.NewRelicProperties",
      "defaultValue": "https://insights-collector.newrelic.com"
    },
    {
      "name": "management.metrics.export.prometheus.descriptions",
      "type": "java.lang.Boolean",
      "description": "Whether to enable publishing descriptions as part of the scrape payload to\n Prometheus. Turn this off to minimize the amount of data sent on each scrape.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.prometheus.PrometheusProperties",
      "defaultValue": true
    },
    {
      "name": "management.metrics.export.prometheus.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether exporting of metrics to Prometheus is enabled.",
      "defaultValue": true
    },
    {
      "name": "management.metrics.export.prometheus.step",
      "type": "java.time.Duration",
      "description": "Step size (i.e. reporting frequency) to use.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.prometheus.PrometheusProperties",
      "defaultValue": "1m"
    },
    {
      "name": "management.metrics.export.signalfx.access-token",
      "type": "java.lang.String",
      "description": "SignalFX access token.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.signalfx.SignalFxProperties"
    },
    {
      "name": "management.metrics.export.signalfx.batch-size",
      "type": "java.lang.Integer",
      "description": "Number of measurements per request to use for this backend. If more measurements\n are found, then multiple requests will be made.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.signalfx.SignalFxProperties",
      "defaultValue": 10000
    },
    {
      "name": "management.metrics.export.signalfx.connect-timeout",
      "type": "java.time.Duration",
      "description": "Connection timeout for requests to this backend.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.signalfx.SignalFxProperties",
      "defaultValue": "1s"
    },
    {
      "name": "management.metrics.export.signalfx.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether exporting of metrics to this backend is enabled.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.signalfx.SignalFxProperties",
      "defaultValue": true
    },
    {
      "name": "management.metrics.export.signalfx.num-threads",
      "type": "java.lang.Integer",
      "description": "Number of threads to use with the metrics publishing scheduler.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.signalfx.SignalFxProperties",
      "defaultValue": 2
    },
    {
      "name": "management.metrics.export.signalfx.read-timeout",
      "type": "java.time.Duration",
      "description": "Read timeout for requests to this backend.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.signalfx.SignalFxProperties",
      "defaultValue": "10s"
    },
    {
      "name": "management.metrics.export.signalfx.source",
      "type": "java.lang.String",
      "description": "Uniquely identifies the app instance that is publishing metrics to SignalFx.\n Defaults to the local host name.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.signalfx.SignalFxProperties"
    },
    {
      "name": "management.metrics.export.signalfx.step",
      "type": "java.time.Duration",
      "description": "Step size (i.e. reporting frequency) to use.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.signalfx.SignalFxProperties",
      "defaultValue": "10s"
    },
    {
      "name": "management.metrics.export.signalfx.uri",
      "type": "java.lang.String",
      "description": "URI to ship metrics to.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.signalfx.SignalFxProperties",
      "defaultValue": "https://ingest.signalfx.com"
    },
    {
      "name": "management.metrics.export.simple.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether, in the absence of any other exporter, exporting of metrics to an in-memory backend is enabled.",
      "defaultValue": true
    },
    {
      "name": "management.metrics.export.simple.mode",
      "type": "io.micrometer.core.instrument.simple.CountingMode",
      "description": "Counting mode.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleProperties",
      "defaultValue": "cumulative"
    },
    {
      "name": "management.metrics.export.simple.step",
      "type": "java.time.Duration",
      "description": "Step size (i.e. reporting frequency) to use.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleProperties",
      "defaultValue": "1m"
    },
    {
      "name": "management.metrics.export.statsd.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether exporting of metrics to StatsD is enabled.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.statsd.StatsdProperties",
      "defaultValue": true
    },
    {
      "name": "management.metrics.export.statsd.flavor",
      "type": "io.micrometer.statsd.StatsdFlavor",
      "description": "StatsD line protocol to use.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.statsd.StatsdProperties",
      "defaultValue": "datadog"
    },
    {
      "name": "management.metrics.export.statsd.host",
      "type": "java.lang.String",
      "description": "Host of the StatsD server to receive exported metrics.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.statsd.StatsdProperties",
      "defaultValue": "localhost"
    },
    {
      "name": "management.metrics.export.statsd.max-packet-length",
      "type": "java.lang.Integer",
      "description": "Total length of a single payload should be kept within your network's MTU.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.statsd.StatsdProperties",
      "defaultValue": 1400
    },
    {
      "name": "management.metrics.export.statsd.polling-frequency",
      "type": "java.time.Duration",
      "description": "How often gauges will be polled. When a gauge is polled, its value is recalculated\n and if the value has changed (or publishUnchangedMeters is true), it is sent to the\n StatsD server.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.statsd.StatsdProperties",
      "defaultValue": "10s"
    },
    {
      "name": "management.metrics.export.statsd.port",
      "type": "java.lang.Integer",
      "description": "Port of the StatsD server to receive exported metrics.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.statsd.StatsdProperties",
      "defaultValue": 8125
    },
    {
      "name": "management.metrics.export.statsd.publish-unchanged-meters",
      "type": "java.lang.Boolean",
      "description": "Whether to send unchanged meters to the StatsD server.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.statsd.StatsdProperties",
      "defaultValue": true
    },
    {
      "name": "management.metrics.export.statsd.queue-size",
      "type": "java.lang.Integer",
      "description": "Maximum size of the queue of items waiting to be sent to the StatsD server.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.statsd.StatsdProperties",
      "defaultValue": 2147483647,
      "deprecated": true,
      "deprecation": {"reason": "No longer configurable and an unbounded queue will always be used"}
    },
    {
      "name": "management.metrics.export.wavefront.api-token",
      "type": "java.lang.String",
      "description": "API token used when publishing metrics directly to the Wavefront API host.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.wavefront.WavefrontProperties"
    },
    {
      "name": "management.metrics.export.wavefront.batch-size",
      "type": "java.lang.Integer",
      "description": "Number of measurements per request to use for this backend. If more measurements\n are found, then multiple requests will be made.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.wavefront.WavefrontProperties",
      "defaultValue": 10000
    },
    {
      "name": "management.metrics.export.wavefront.connect-timeout",
      "type": "java.time.Duration",
      "description": "Connection timeout for requests to this backend.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.wavefront.WavefrontProperties",
      "defaultValue": "1s"
    },
    {
      "name": "management.metrics.export.wavefront.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether exporting of metrics to this backend is enabled.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.wavefront.WavefrontProperties",
      "defaultValue": true
    },
    {
      "name": "management.metrics.export.wavefront.global-prefix",
      "type": "java.lang.String",
      "description": "Global prefix to separate metrics originating from this app's white box\n instrumentation from those originating from other Wavefront integrations when\n viewed in the Wavefront UI.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.wavefront.WavefrontProperties"
    },
    {
      "name": "management.metrics.export.wavefront.num-threads",
      "type": "java.lang.Integer",
      "description": "Number of threads to use with the metrics publishing scheduler.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.wavefront.WavefrontProperties",
      "defaultValue": 2
    },
    {
      "name": "management.metrics.export.wavefront.read-timeout",
      "type": "java.time.Duration",
      "description": "Read timeout for requests to this backend.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.wavefront.WavefrontProperties",
      "defaultValue": "10s"
    },
    {
      "name": "management.metrics.export.wavefront.source",
      "type": "java.lang.String",
      "description": "Unique identifier for the app instance that is the source of metrics being\n published to Wavefront. Defaults to the local host name.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.wavefront.WavefrontProperties"
    },
    {
      "name": "management.metrics.export.wavefront.step",
      "type": "java.time.Duration",
      "description": "Step size (i.e. reporting frequency) to use.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.wavefront.WavefrontProperties",
      "defaultValue": "10s"
    },
    {
      "name": "management.metrics.export.wavefront.uri",
      "type": "java.net.URI",
      "description": "URI to ship metrics to.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.export.wavefront.WavefrontProperties",
      "defaultValue": "https://longboard.wavefront.com"
    },
    {
      "name": "management.metrics.use-global-registry",
      "type": "java.lang.Boolean",
      "description": "Whether auto-configured MeterRegistry implementations should be bound to the global\n static registry on Metrics. For testing, set this to 'false' to maximize test\n independence.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties",
      "defaultValue": true
    },
    {
      "name": "management.metrics.web.client.max-uri-tags",
      "type": "java.lang.Integer",
      "description": "Maximum number of unique URI tag values allowed. After the max number of\n tag values is reached, metrics with additional tag values are denied by\n filter.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties$Web$Client",
      "defaultValue": 100
    },
    {
      "name": "management.metrics.web.client.requests-metric-name",
      "type": "java.lang.String",
      "description": "Name of the metric for sent requests.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties$Web$Client",
      "defaultValue": "http.client.requests"
    },
    {
      "name": "management.metrics.web.server.auto-time-requests",
      "type": "java.lang.Boolean",
      "description": "Whether requests handled by Spring MVC or WebFlux should be automatically\n timed. If the number of time series emitted grows too large on account of\n request mapping timings, disable this and use 'Timed' on a per request\n mapping basis as needed.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties$Web$Server",
      "defaultValue": true
    },
    {
      "name": "management.metrics.web.server.requests-metric-name",
      "type": "java.lang.String",
      "description": "Name of the metric for received requests.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties$Web$Server",
      "defaultValue": "http.server.requests"
    },
    {
      "name": "management.port",
      "type": "java.lang.Integer",
      "description": "Management endpoint HTTP port. Use the same port as the application by default.",
      "deprecated": true,
      "deprecation": {"replacement": "management.server.port"}
    },
    {
      "name": "management.security.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable security.",
      "defaultValue": true,
      "deprecated": true,
      "deprecation": {"reason": "A global security auto-configuration is now provided. Provide your own WebSecurityConfigurer bean instead."}
    },
    {
      "name": "management.security.roles",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of roles that can access the management endpoint.",
      "deprecated": true,
      "deprecation": {"reason": "The security auto-configuration is no longer customizable. Provide your own WebSecurityConfigurer bean instead."}
    },
    {
      "name": "management.security.sessions",
      "description": "Session creating policy for security use (always, never, if_required,\n stateless).",
      "defaultValue": "stateless",
      "deprecated": true,
      "deprecation": {"reason": "The security auto-configuration is no longer customizable. Provide your own WebSecurityConfigurer bean instead."}
    },
    {
      "name": "management.server.add-application-context-header",
      "type": "java.lang.Boolean",
      "description": "Add the \"X-Application-Context\" HTTP header in each response.",
      "defaultValue": false
    },
    {
      "name": "management.server.address",
      "type": "java.net.InetAddress",
      "description": "Network address to which the management endpoints should bind. Requires a custom\n management.server.port.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.web.server.ManagementServerProperties"
    },
    {
      "name": "management.server.port",
      "type": "java.lang.Integer",
      "description": "Management endpoint HTTP port (uses the same port as the application by default).\n Configure a different port to use management-specific SSL.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.web.server.ManagementServerProperties"
    },
    {
      "name": "management.server.servlet.context-path",
      "type": "java.lang.String",
      "description": "Management endpoint context-path (for instance, `/management`). Requires a\n custom management.server.port.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.web.server.ManagementServerProperties$Servlet",
      "defaultValue": ""
    },
    {
      "name": "management.server.ssl.ciphers",
      "type": "java.lang.String[]",
      "sourceType": "org.springframework.boot.web.server.Ssl"
    },
    {
      "name": "management.server.ssl.client-auth",
      "type": "org.springframework.boot.web.server.Ssl$ClientAuth",
      "sourceType": "org.springframework.boot.web.server.Ssl"
    },
    {
      "name": "management.server.ssl.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.web.server.Ssl"
    },
    {
      "name": "management.server.ssl.enabled-protocols",
      "type": "java.lang.String[]",
      "sourceType": "org.springframework.boot.web.server.Ssl"
    },
    {
      "name": "management.server.ssl.key-alias",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.web.server.Ssl"
    },
    {
      "name": "management.server.ssl.key-password",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.web.server.Ssl"
    },
    {
      "name": "management.server.ssl.key-store",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.web.server.Ssl"
    },
    {
      "name": "management.server.ssl.key-store-password",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.web.server.Ssl"
    },
    {
      "name": "management.server.ssl.key-store-provider",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.web.server.Ssl"
    },
    {
      "name": "management.server.ssl.key-store-type",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.web.server.Ssl"
    },
    {
      "name": "management.server.ssl.protocol",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.web.server.Ssl"
    },
    {
      "name": "management.server.ssl.trust-store",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.web.server.Ssl"
    },
    {
      "name": "management.server.ssl.trust-store-password",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.web.server.Ssl"
    },
    {
      "name": "management.server.ssl.trust-store-provider",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.web.server.Ssl"
    },
    {
      "name": "management.server.ssl.trust-store-type",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.web.server.Ssl"
    },
    {
      "name": "management.shell.auth.jaas.domain",
      "type": "java.lang.String",
      "description": "JAAS domain.",
      "defaultValue": "my-domain",
      "deprecated": true,
      "deprecation": {"reason": "CRaSH support is no longer available."}
    },
    {
      "name": "management.shell.auth.key.path",
      "type": "java.lang.String",
      "description": "Path to the authentication key. This should point to a valid \".pem\" file.",
      "deprecated": true,
      "deprecation": {"reason": "CRaSH support is no longer available."}
    },
    {
      "name": "management.shell.auth.simple.user.name",
      "type": "java.lang.String",
      "description": "Login user.",
      "defaultValue": "user",
      "deprecated": true,
      "deprecation": {"reason": "CRaSH support is no longer available."}
    },
    {
      "name": "management.shell.auth.simple.user.password",
      "type": "java.lang.String",
      "description": "Login password.",
      "deprecated": true,
      "deprecation": {"reason": "CRaSH support is no longer available."}
    },
    {
      "name": "management.shell.auth.spring.roles",
      "type": "java.lang.String[]",
      "description": "Comma-separated list of required roles to login to the CRaSH console.",
      "defaultValue": ["ACTUATOR"],
      "deprecated": true,
      "deprecation": {"reason": "CRaSH support is no longer available."}
    },
    {
      "name": "management.shell.auth.type",
      "type": "java.lang.String",
      "description": "Authentication type. Auto-detected according to the environment (i.e. if Spring\n Security is available, \"spring\" is used by default).",
      "defaultValue": "simple",
      "deprecated": true,
      "deprecation": {"reason": "CRaSH support is no longer available."}
    },
    {
      "name": "management.shell.command-path-patterns",
      "type": "java.lang.String[]",
      "description": "Patterns to use to look for commands.",
      "defaultValue": [
        "classpath*:/commands/**",
        "classpath*:/crash/commands/**"
      ],
      "deprecated": true,
      "deprecation": {"reason": "CRaSH support is no longer available."}
    },
    {
      "name": "management.shell.command-refresh-interval",
      "type": "java.lang.Integer",
      "description": "Scan for changes and update the command if necessary (in seconds).",
      "defaultValue": -1,
      "deprecated": true,
      "deprecation": {"reason": "CRaSH support is no longer available."}
    },
    {
      "name": "management.shell.config-path-patterns",
      "type": "java.lang.String[]",
      "description": "Patterns to use to look for configurations.",
      "defaultValue": ["classpath*:/crash/*"],
      "deprecated": true,
      "deprecation": {"reason": "CRaSH support is no longer available."}
    },
    {
      "name": "management.shell.disabled-commands",
      "type": "java.lang.String[]",
      "description": "Comma-separated list of commands to disable.",
      "defaultValue": [
        "jpa*",
        "jdbc*",
        "jndi*"
      ],
      "deprecated": true,
      "deprecation": {"reason": "CRaSH support is no longer available."}
    },
    {
      "name": "management.shell.disabled-plugins",
      "type": "java.lang.String[]",
      "description": "Comma-separated list of plugins to disable. Certain plugins are disabled by default\n based on the environment.",
      "defaultValue": [],
      "deprecated": true,
      "deprecation": {"reason": "CRaSH support is no longer available."}
    },
    {
      "name": "management.shell.ssh.auth-timeout",
      "type": "java.lang.Integer",
      "description": "Number of milliseconds after user will be prompted to login again.",
      "defaultValue": 600000,
      "deprecated": true,
      "deprecation": {"reason": "CRaSH support is no longer available."}
    },
    {
      "name": "management.shell.ssh.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable CRaSH SSH support.",
      "defaultValue": true,
      "deprecated": true,
      "deprecation": {"reason": "CRaSH support is no longer available."}
    },
    {
      "name": "management.shell.ssh.idle-timeout",
      "type": "java.lang.Integer",
      "description": "Number of milliseconds after which unused connections are closed.",
      "defaultValue": 600000,
      "deprecated": true,
      "deprecation": {"reason": "CRaSH support is no longer available."}
    },
    {
      "name": "management.shell.ssh.key-path",
      "type": "java.lang.String",
      "description": "Path to the SSH server key.",
      "deprecated": true,
      "deprecation": {"reason": "CRaSH support is no longer available."}
    },
    {
      "name": "management.shell.ssh.port",
      "type": "java.lang.Integer",
      "description": "SSH port.",
      "defaultValue": 2000,
      "deprecated": true,
      "deprecation": {"reason": "CRaSH support is no longer available."}
    },
    {
      "name": "management.shell.telnet.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable CRaSH telnet support. Enabled by default if the TelnetPlugin is available.",
      "defaultValue": false,
      "deprecated": true,
      "deprecation": {"reason": "CRaSH support is no longer available."}
    },
    {
      "name": "management.shell.telnet.port",
      "type": "java.lang.Integer",
      "description": "Telnet port.",
      "defaultValue": 5000,
      "deprecated": true,
      "deprecation": {"reason": "CRaSH support is no longer available."}
    },
    {
      "name": "management.ssl.ciphers",
      "type": "java.lang.String[]",
      "deprecated": true,
      "deprecation": {"replacement": "management.server.ssl.ciphers"}
    },
    {
      "name": "management.ssl.client-auth",
      "deprecated": true,
      "deprecation": {"replacement": "management.server.ssl.client-auth"}
    },
    {
      "name": "management.ssl.enabled",
      "type": "java.lang.Boolean",
      "deprecated": true,
      "deprecation": {"replacement": "management.server.ssl.enabled"}
    },
    {
      "name": "management.ssl.enabled-protocols",
      "type": "java.lang.String[]",
      "deprecated": true,
      "deprecation": {"replacement": "management.server.ssl.enabled-protocols"}
    },
    {
      "name": "management.ssl.key-alias",
      "type": "java.lang.String",
      "deprecated": true,
      "deprecation": {"replacement": "management.server.ssl.key-alias"}
    },
    {
      "name": "management.ssl.key-password",
      "type": "java.lang.String",
      "deprecated": true,
      "deprecation": {"replacement": "management.server.ssl.key-password"}
    },
    {
      "name": "management.ssl.key-store",
      "type": "java.lang.String",
      "deprecated": true,
      "deprecation": {"replacement": "management.server.ssl.key-store"}
    },
    {
      "name": "management.ssl.key-store-password",
      "type": "java.lang.String",
      "deprecated": true,
      "deprecation": {"replacement": "management.server.ssl.key-store-password"}
    },
    {
      "name": "management.ssl.key-store-provider",
      "type": "java.lang.String",
      "deprecated": true,
      "deprecation": {"replacement": "management.server.ssl.key-store-provider"}
    },
    {
      "name": "management.ssl.key-store-type",
      "type": "java.lang.String",
      "deprecated": true,
      "deprecation": {"replacement": "management.server.ssl.key-store-type"}
    },
    {
      "name": "management.ssl.protocol",
      "type": "java.lang.String",
      "deprecated": true,
      "deprecation": {"replacement": "management.server.ssl.protocol"}
    },
    {
      "name": "management.ssl.trust-store",
      "type": "java.lang.String",
      "deprecated": true,
      "deprecation": {"replacement": "management.server.ssl.trust-store"}
    },
    {
      "name": "management.ssl.trust-store-password",
      "type": "java.lang.String",
      "deprecated": true,
      "deprecation": {"replacement": "management.server.ssl.trust-store-password"}
    },
    {
      "name": "management.ssl.trust-store-provider",
      "type": "java.lang.String",
      "deprecated": true,
      "deprecation": {"replacement": "management.server.ssl.trust-store-provider"}
    },
    {
      "name": "management.ssl.trust-store-type",
      "type": "java.lang.String",
      "deprecated": true,
      "deprecation": {"replacement": "management.server.ssl.trust-store-type"}
    },
    {
      "name": "management.trace.http.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable HTTP request-response tracing.",
      "defaultValue": true
    },
    {
      "name": "management.trace.http.include",
      "type": "java.util.Set<org.springframework.boot.actuate.trace.http.Include>",
      "description": "Items to be included in the trace. Defaults to request headers (excluding\n Authorization but including Cookie), response headers (including Set-Cookie), and\n time taken.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.trace.http.HttpTraceProperties",
      "defaultValue": [
        "request-headers",
        "response-headers",
        "cookies",
        "errors"
      ]
    },
    {
      "name": "management.trace.include",
      "deprecated": true,
      "deprecation": {"replacement": "management.trace.http.include"}
    },
    {
      "name": "mongodb.collection",
      "type": "java.lang.String",
      "description": "The MongoDB collection to store data",
      "sourceType": "org.rpis5.chapters.chapter_08.dataflow.mongodb.processor.MongodbProcessorProperties"
    },
    {
      "name": "mongodb.collection-expression",
      "type": "org.springframework.expression.Expression",
      "description": "The SpEL expression to evaluate MongoDB collection",
      "sourceType": "org.rpis5.chapters.chapter_08.dataflow.mongodb.processor.MongodbProcessorProperties"
    },
    {
      "name": "security.basic.authorize-mode",
      "description": "Security authorize mode to apply.",
      "defaultValue": "role",
      "deprecated": true,
      "deprecation": {"reason": "The security auto-configuration is no longer customizable. Provide your own WebSecurityConfigurer bean instead."}
    },
    {
      "name": "security.basic.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable basic authentication.",
      "defaultValue": true,
      "deprecated": true,
      "deprecation": {"reason": "The security auto-configuration is no longer customizable. Provide your own WebSecurityConfigurer bean instead."}
    },
    {
      "name": "security.basic.path",
      "type": "java.lang.String[]",
      "description": "Comma-separated list of paths to secure.",
      "defaultValue": ["/**"],
      "deprecated": true,
      "deprecation": {"reason": "The security auto-configuration is no longer customizable. Provide your own WebSecurityConfigurer bean instead."}
    },
    {
      "name": "security.basic.realm",
      "type": "java.lang.String",
      "description": "HTTP basic realm name.",
      "defaultValue": "Spring",
      "deprecated": true,
      "deprecation": {"reason": "The security auto-configuration is no longer customizable. Provide your own WebSecurityConfigurer bean instead."}
    },
    {
      "name": "security.enable-csrf",
      "type": "java.lang.Boolean",
      "description": "Whether to enable Cross Site Request Forgery support.",
      "defaultValue": false,
      "deprecated": true,
      "deprecation": {"reason": "The security auto-configuration is no longer customizable. Provide your own WebSecurityConfigurer bean instead."}
    },
    {
      "name": "security.filter-dispatcher-types",
      "type": "java.util.Set<java.lang.String>",
      "description": "Security filter chain dispatcher types.",
      "deprecated": true,
      "deprecation": {"replacement": "spring.security.filter.dispatcher-types"}
    },
    {
      "name": "security.filter-order",
      "type": "java.lang.Integer",
      "description": "Security filter chain order.",
      "defaultValue": 0,
      "deprecated": true,
      "deprecation": {"replacement": "spring.security.filter.order"}
    },
    {
      "name": "security.headers.cache",
      "type": "java.lang.Boolean",
      "description": "Whether to enable cache control HTTP headers.",
      "defaultValue": true,
      "deprecated": true,
      "deprecation": {"reason": "The security auto-configuration is no longer customizable. Provide your own WebSecurityConfigurer bean instead."}
    },
    {
      "name": "security.headers.content-security-policy",
      "type": "java.lang.String",
      "description": "Value for content security policy header.",
      "deprecated": true,
      "deprecation": {"reason": "The security auto-configuration is no longer customizable. Provide your own WebSecurityConfigurer bean instead."}
    },
    {
      "name": "security.headers.content-security-policy-mode",
      "description": "Content security policy mode.",
      "defaultValue": "default",
      "deprecated": true,
      "deprecation": {"reason": "The security auto-configuration is no longer customizable. Provide your own WebSecurityConfigurer bean instead."}
    },
    {
      "name": "security.headers.content-type",
      "type": "java.lang.Boolean",
      "description": "Whether to enable \"X-Content-Type-Options\" header.",
      "defaultValue": true,
      "deprecated": true,
      "deprecation": {"reason": "The security auto-configuration is no longer customizable. Provide your own WebSecurityConfigurer bean instead."}
    },
    {
      "name": "security.headers.frame",
      "type": "java.lang.Boolean",
      "description": "Whether to enable \"X-Frame-Options\" header.",
      "defaultValue": true,
      "deprecated": true,
      "deprecation": {"reason": "The security auto-configuration is no longer customizable. Provide your own WebSecurityConfigurer bean instead."}
    },
    {
      "name": "security.headers.hsts",
      "description": "HTTP Strict Transport Security (HSTS) mode (none, domain, all).",
      "defaultValue": "all",
      "deprecated": true,
      "deprecation": {"reason": "The security auto-configuration is no longer customizable. Provide your own WebSecurityConfigurer bean instead."}
    },
    {
      "name": "security.headers.xss",
      "type": "java.lang.Boolean",
      "description": "Whether to enable cross site scripting (XSS) protection.",
      "defaultValue": true,
      "deprecated": true,
      "deprecation": {"reason": "The security auto-configuration is no longer customizable. Provide your own WebSecurityConfigurer bean instead."}
    },
    {
      "name": "security.ignored",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of paths to exclude from the default secured paths.",
      "deprecated": true,
      "deprecation": {"reason": "The security auto-configuration is no longer customizable. Provide your own WebSecurityConfigurer bean instead."}
    },
    {
      "name": "security.require-ssl",
      "type": "java.lang.Boolean",
      "description": "Whether to enable secure channel for all requests.",
      "defaultValue": false,
      "deprecated": true,
      "deprecation": {"reason": "The security auto-configuration is no longer customizable. Provide your own WebSecurityConfigurer bean instead."}
    },
    {
      "name": "security.sessions",
      "type": "org.springframework.security.config.http.SessionCreationPolicy",
      "description": "Session creation policy (always, never, if_required, stateless).",
      "defaultValue": "stateless",
      "deprecated": true,
      "deprecation": {"reason": "The security auto-configuration is no longer customizable. Provide your own WebSecurityConfigurer bean instead."}
    },
    {
      "name": "security.user.name",
      "type": "java.lang.String",
      "description": "Default user name.",
      "defaultValue": "user",
      "deprecated": true,
      "deprecation": {"replacement": "spring.security.user.name"}
    },
    {
      "name": "security.user.password",
      "type": "java.lang.String",
      "description": "Password for the default user name.",
      "deprecated": true,
      "deprecation": {"replacement": "spring.security.user.password"}
    },
    {
      "name": "security.user.role",
      "type": "java.util.List<java.lang.String>",
      "description": "Granted roles for the default user name.",
      "deprecated": true,
      "deprecation": {"replacement": "spring.security.user.roles"}
    },
    {
      "name": "server.address",
      "type": "java.net.InetAddress",
      "description": "Network address to which the server should bind.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties"
    },
    {
      "name": "server.compression.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.web.server.Compression"
    },
    {
      "name": "server.compression.excluded-user-agents",
      "type": "java.lang.String[]",
      "sourceType": "org.springframework.boot.web.server.Compression"
    },
    {
      "name": "server.compression.mime-types",
      "type": "java.lang.String[]",
      "sourceType": "org.springframework.boot.web.server.Compression"
    },
    {
      "name": "server.compression.min-response-size",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.web.server.Compression"
    },
    {
      "name": "server.connection-timeout",
      "type": "java.time.Duration",
      "description": "Time that connectors wait for another HTTP request before closing the connection.\n When not set, the connector's container-specific default is used. Use a value of -1\n to indicate no (that is, an infinite) timeout.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties"
    },
    {
      "name": "server.context-parameters",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "ServletContext parameters.",
      "deprecated": true,
      "deprecation": {"replacement": "server.servlet.context-parameters"}
    },
    {
      "name": "server.context-path",
      "type": "java.lang.String",
      "description": "Context path of the application.",
      "deprecated": true,
      "deprecation": {"replacement": "server.servlet.context-path"}
    },
    {
      "name": "server.display-name",
      "type": "java.lang.String",
      "description": "Display name of the application.",
      "defaultValue": "application",
      "deprecated": true,
      "deprecation": {"replacement": "server.servlet.application-display-name"}
    },
    {
      "name": "server.error.include-exception",
      "type": "java.lang.Boolean",
      "description": "Include the \"exception\" attribute.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ErrorProperties",
      "defaultValue": false
    },
    {
      "name": "server.error.include-stacktrace",
      "type": "org.springframework.boot.autoconfigure.web.ErrorProperties$IncludeStacktrace",
      "description": "When to include a \"stacktrace\" attribute.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ErrorProperties",
      "defaultValue": "never"
    },
    {
      "name": "server.error.path",
      "type": "java.lang.String",
      "description": "Path of the error controller.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ErrorProperties",
      "defaultValue": "/error"
    },
    {
      "name": "server.error.whitelabel.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable the default error page displayed in browsers in case of a\n server error.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ErrorProperties$Whitelabel",
      "defaultValue": true
    },
    {
      "name": "server.http2.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.web.server.Http2"
    },
    {
      "name": "server.jetty.acceptors",
      "type": "java.lang.Integer",
      "description": "Number of acceptor threads to use.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty"
    },
    {
      "name": "server.jetty.accesslog.append",
      "type": "java.lang.Boolean",
      "description": "Append to log.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty$Accesslog",
      "defaultValue": false
    },
    {
      "name": "server.jetty.accesslog.date-format",
      "type": "java.lang.String",
      "description": "Timestamp format of the request log.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty$Accesslog",
      "defaultValue": "dd/MMM/yyyy:HH:mm:ss Z"
    },
    {
      "name": "server.jetty.accesslog.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable access log.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty$Accesslog",
      "defaultValue": false
    },
    {
      "name": "server.jetty.accesslog.extended-format",
      "type": "java.lang.Boolean",
      "description": "Enable extended NCSA format.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty$Accesslog",
      "defaultValue": false
    },
    {
      "name": "server.jetty.accesslog.file-date-format",
      "type": "java.lang.String",
      "description": "Date format to place in log file name.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty$Accesslog"
    },
    {
      "name": "server.jetty.accesslog.filename",
      "type": "java.lang.String",
      "description": "Log filename. If not specified, logs redirect to \"System.err\".",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty$Accesslog"
    },
    {
      "name": "server.jetty.accesslog.locale",
      "type": "java.util.Locale",
      "description": "Locale of the request log.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty$Accesslog"
    },
    {
      "name": "server.jetty.accesslog.log-cookies",
      "type": "java.lang.Boolean",
      "description": "Enable logging of the request cookies.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty$Accesslog",
      "defaultValue": false
    },
    {
      "name": "server.jetty.accesslog.log-latency",
      "type": "java.lang.Boolean",
      "description": "Enable logging of request processing time.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty$Accesslog",
      "defaultValue": false
    },
    {
      "name": "server.jetty.accesslog.log-server",
      "type": "java.lang.Boolean",
      "description": "Enable logging of the request hostname.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty$Accesslog",
      "defaultValue": false
    },
    {
      "name": "server.jetty.accesslog.retention-period",
      "type": "java.lang.Integer",
      "description": "Number of days before rotated log files are deleted.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty$Accesslog",
      "defaultValue": 31
    },
    {
      "name": "server.jetty.accesslog.time-zone",
      "type": "java.util.TimeZone",
      "description": "Timezone of the request log.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty$Accesslog",
      "defaultValue": "GMT"
    },
    {
      "name": "server.jetty.max-http-post-size",
      "type": "java.lang.Integer",
      "description": "Maximum size, in bytes, of the HTTP post or put content.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty",
      "defaultValue": 0
    },
    {
      "name": "server.jetty.selectors",
      "type": "java.lang.Integer",
      "description": "Number of selector threads to use.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty"
    },
    {
      "name": "server.jsp-servlet.class-name",
      "type": "java.lang.String",
      "deprecated": true,
      "deprecation": {"replacement": "server.servlet.jsp.class-name"}
    },
    {
      "name": "server.jsp-servlet.init-parameters",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "deprecated": true,
      "deprecation": {"replacement": "server.servlet.jsp.init-parameters"}
    },
    {
      "name": "server.jsp-servlet.registered",
      "type": "java.lang.Boolean",
      "deprecated": true,
      "deprecation": {"replacement": "server.servlet.jsp.registered"}
    },
    {
      "name": "server.max-http-header-size",
      "type": "java.lang.Integer",
      "description": "Maximum size, in bytes, of the HTTP message header.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "defaultValue": 0
    },
    {
      "name": "server.max-http-post-size",
      "type": "java.lang.Integer",
      "description": "Maximum size in bytes of the HTTP post content.",
      "defaultValue": 0,
      "deprecated": true,
      "deprecation": {"reason": "Use dedicated property for each container."}
    },
    {
      "name": "server.port",
      "type": "java.lang.Integer",
      "description": "Server HTTP port.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "defaultValue": 8080
    },
    {
      "name": "server.server-header",
      "type": "java.lang.String",
      "description": "Value to use for the Server response header (if empty, no header is sent).",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties"
    },
    {
      "name": "server.servlet-path",
      "type": "java.lang.String",
      "description": "Path of the main dispatcher servlet.",
      "defaultValue": "/",
      "deprecated": true,
      "deprecation": {"replacement": "server.servlet.path"}
    },
    {
      "name": "server.servlet.application-display-name",
      "type": "java.lang.String",
      "description": "Display name of the application.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Servlet",
      "defaultValue": "application"
    },
    {
      "name": "server.servlet.context-parameters",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Servlet context init parameters.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Servlet"
    },
    {
      "name": "server.servlet.context-path",
      "type": "java.lang.String",
      "description": "Context path of the application.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Servlet"
    },
    {
      "name": "server.servlet.jsp.class-name",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.web.servlet.server.Jsp"
    },
    {
      "name": "server.servlet.jsp.init-parameters",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "sourceType": "org.springframework.boot.web.servlet.server.Jsp"
    },
    {
      "name": "server.servlet.jsp.registered",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.web.servlet.server.Jsp"
    },
    {
      "name": "server.servlet.path",
      "type": "java.lang.String",
      "description": "Path of the main dispatcher servlet.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Servlet",
      "defaultValue": "/"
    },
    {
      "name": "server.servlet.session.cookie.comment",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.web.servlet.server.Session$Cookie"
    },
    {
      "name": "server.servlet.session.cookie.domain",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.web.servlet.server.Session$Cookie"
    },
    {
      "name": "server.servlet.session.cookie.http-only",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.web.servlet.server.Session$Cookie"
    },
    {
      "name": "server.servlet.session.cookie.max-age",
      "type": "java.time.Duration",
      "sourceType": "org.springframework.boot.web.servlet.server.Session$Cookie"
    },
    {
      "name": "server.servlet.session.cookie.name",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.web.servlet.server.Session$Cookie"
    },
    {
      "name": "server.servlet.session.cookie.path",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.web.servlet.server.Session$Cookie"
    },
    {
      "name": "server.servlet.session.cookie.secure",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.web.servlet.server.Session$Cookie"
    },
    {
      "name": "server.servlet.session.persistent",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.web.servlet.server.Session"
    },
    {
      "name": "server.servlet.session.store-dir",
      "type": "java.io.File",
      "sourceType": "org.springframework.boot.web.servlet.server.Session"
    },
    {
      "name": "server.servlet.session.timeout",
      "type": "java.time.Duration",
      "sourceType": "org.springframework.boot.web.servlet.server.Session"
    },
    {
      "name": "server.servlet.session.tracking-modes",
      "type": "java.util.Set<org.springframework.boot.web.servlet.server.Session.SessionTrackingMode>",
      "sourceType": "org.springframework.boot.web.servlet.server.Session"
    },
    {
      "name": "server.session.cookie.comment",
      "type": "java.lang.String",
      "description": "Comment for the session cookie.",
      "deprecated": true,
      "deprecation": {"replacement": "server.servlet.session.cookie.comment"}
    },
    {
      "name": "server.session.cookie.domain",
      "type": "java.lang.String",
      "description": "Domain for the session cookie.",
      "deprecated": true,
      "deprecation": {"replacement": "server.servlet.session.cookie.domain"}
    },
    {
      "name": "server.session.cookie.http-only",
      "type": "java.lang.Boolean",
      "description": "\"HttpOnly\" flag for the session cookie.",
      "deprecated": true,
      "deprecation": {"replacement": "server.servlet.session.cookie.http-only"}
    },
    {
      "name": "server.session.cookie.max-age",
      "type": "java.time.Duration",
      "description": "Maximum age of the session cookie.",
      "deprecated": true,
      "deprecation": {"replacement": "server.servlet.session.cookie.max-age"}
    },
    {
      "name": "server.session.cookie.name",
      "type": "java.lang.String",
      "description": "Session cookie name.",
      "deprecated": true,
      "deprecation": {"replacement": "server.servlet.session.cookie.name"}
    },
    {
      "name": "server.session.cookie.path",
      "type": "java.lang.String",
      "description": "Path of the session cookie.",
      "deprecated": true,
      "deprecation": {"replacement": "server.servlet.session.cookie.path"}
    },
    {
      "name": "server.session.cookie.secure",
      "type": "java.lang.Boolean",
      "description": "\"Secure\" flag for the session cookie.",
      "deprecated": true,
      "deprecation": {"replacement": "server.servlet.session.cookie.secure"}
    },
    {
      "name": "server.session.persistent",
      "type": "java.lang.Boolean",
      "description": "Whether to persist session data between restarts.",
      "defaultValue": false,
      "deprecated": true,
      "deprecation": {"replacement": "server.servlet.session.persistent"}
    },
    {
      "name": "server.session.store-dir",
      "type": "java.io.File",
      "description": "Directory used to store session data.",
      "deprecated": true,
      "deprecation": {"replacement": "server.servlet.session.store-dir"}
    },
    {
      "name": "server.session.timeout",
      "type": "java.time.Duration",
      "description": "Session timeout. If a duration suffix is not specified, seconds will be used.",
      "deprecated": true,
      "deprecation": {"replacement": "server.servlet.session.timeout"}
    },
    {
      "name": "server.session.tracking-modes",
      "type": "java.util.Set<org.springframework.boot.web.servlet.server.Session.SessionTrackingMode>",
      "description": "Session tracking modes (one or more of the following: \"cookie\", \"url\", \"ssl\").",
      "deprecated": true,
      "deprecation": {"replacement": "server.servlet.session.tracking-modes"}
    },
    {
      "name": "server.ssl.ciphers",
      "type": "java.lang.String[]",
      "sourceType": "org.springframework.boot.web.server.Ssl"
    },
    {
      "name": "server.ssl.client-auth",
      "type": "org.springframework.boot.web.server.Ssl$ClientAuth",
      "sourceType": "org.springframework.boot.web.server.Ssl"
    },
    {
      "name": "server.ssl.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.web.server.Ssl"
    },
    {
      "name": "server.ssl.enabled-protocols",
      "type": "java.lang.String[]",
      "sourceType": "org.springframework.boot.web.server.Ssl"
    },
    {
      "name": "server.ssl.key-alias",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.web.server.Ssl"
    },
    {
      "name": "server.ssl.key-password",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.web.server.Ssl"
    },
    {
      "name": "server.ssl.key-store",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.web.server.Ssl"
    },
    {
      "name": "server.ssl.key-store-password",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.web.server.Ssl"
    },
    {
      "name": "server.ssl.key-store-provider",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.web.server.Ssl"
    },
    {
      "name": "server.ssl.key-store-type",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.web.server.Ssl"
    },
    {
      "name": "server.ssl.protocol",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.web.server.Ssl"
    },
    {
      "name": "server.ssl.trust-store",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.web.server.Ssl"
    },
    {
      "name": "server.ssl.trust-store-password",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.web.server.Ssl"
    },
    {
      "name": "server.ssl.trust-store-provider",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.web.server.Ssl"
    },
    {
      "name": "server.ssl.trust-store-type",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.web.server.Ssl"
    },
    {
      "name": "server.tomcat.accept-count",
      "type": "java.lang.Integer",
      "description": "Maximum queue length for incoming connection requests when all possible request\n processing threads are in use.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": 0
    },
    {
      "name": "server.tomcat.accesslog.buffered",
      "type": "java.lang.Boolean",
      "description": "Whether to buffer output such that it is flushed only periodically.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": true
    },
    {
      "name": "server.tomcat.accesslog.directory",
      "type": "java.lang.String",
      "description": "Directory in which log files are created. Can be absolute or relative to\n the Tomcat base dir.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": "logs"
    },
    {
      "name": "server.tomcat.accesslog.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable access log.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": false
    },
    {
      "name": "server.tomcat.accesslog.file-date-format",
      "type": "java.lang.String",
      "description": "Date format to place in the log file name.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": ".yyyy-MM-dd"
    },
    {
      "name": "server.tomcat.accesslog.pattern",
      "type": "java.lang.String",
      "description": "Format pattern for access logs.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": "common"
    },
    {
      "name": "server.tomcat.accesslog.prefix",
      "type": "java.lang.String",
      "description": "Log file name prefix.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": "access_log"
    },
    {
      "name": "server.tomcat.accesslog.rename-on-rotate",
      "type": "java.lang.Boolean",
      "description": "Whether to defer inclusion of the date stamp in the file name until rotate\n time.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": false
    },
    {
      "name": "server.tomcat.accesslog.request-attributes-enabled",
      "type": "java.lang.Boolean",
      "description": "Set request attributes for the IP address, Hostname, protocol, and port\n used for the request.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": false
    },
    {
      "name": "server.tomcat.accesslog.rotate",
      "type": "java.lang.Boolean",
      "description": "Whether to enable access log rotation.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": true
    },
    {
      "name": "server.tomcat.accesslog.suffix",
      "type": "java.lang.String",
      "description": "Log file name suffix.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": ".log"
    },
    {
      "name": "server.tomcat.additional-tld-skip-patterns",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of additional patterns that match jars to ignore for TLD\n scanning. The special '?' and '*' characters can be used in the pattern to\n match one and only one character and zero or more characters respectively.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat"
    },
    {
      "name": "server.tomcat.background-processor-delay",
      "type": "java.time.Duration",
      "description": "Delay between the invocation of backgroundProcess methods. If a duration suffix\n is not specified, seconds will be used.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": "30s"
    },
    {
      "name": "server.tomcat.basedir",
      "type": "java.io.File",
      "description": "Tomcat base directory. If not specified, a temporary directory is used.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat"
    },
    {
      "name": "server.tomcat.internal-proxies",
      "type": "java.lang.String",
      "description": "Regular expression matching trusted IP addresses.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": "10\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|192\\.168\\.\\d{1,3}\\.\\d{1,3}|169\\.254\\.\\d{1,3}\\.\\d{1,3}|127\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|172\\.1[6-9]{1}\\.\\d{1,3}\\.\\d{1,3}|172\\.2[0-9]{1}\\.\\d{1,3}\\.\\d{1,3}|172\\.3[0-1]{1}\\.\\d{1,3}\\.\\d{1,3}"
    },
    {
      "name": "server.tomcat.max-connections",
      "type": "java.lang.Integer",
      "description": "Maximum number of connections that the server accepts and processes at any\n given time. Once the limit has been reached, the operating system may still\n accept connections based on the \"acceptCount\" property.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": 0
    },
    {
      "name": "server.tomcat.max-http-header-size",
      "type": "java.lang.Integer",
      "description": "Maximum size, in bytes, of the HTTP message header.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": 0
    },
    {
      "name": "server.tomcat.max-http-post-size",
      "type": "java.lang.Integer",
      "description": "Maximum size, in bytes, of the HTTP post content.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": 0
    },
    {
      "name": "server.tomcat.max-threads",
      "type": "java.lang.Integer",
      "description": "Maximum number of worker threads.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": 0
    },
    {
      "name": "server.tomcat.min-spare-threads",
      "type": "java.lang.Integer",
      "description": "Minimum number of worker threads.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": 0
    },
    {
      "name": "server.tomcat.port-header",
      "type": "java.lang.String",
      "description": "Name of the HTTP header used to override the original port value.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": "X-Forwarded-Port"
    },
    {
      "name": "server.tomcat.protocol-header",
      "type": "java.lang.String",
      "description": "Header that holds the incoming protocol, usually named \"X-Forwarded-Proto\".",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat"
    },
    {
      "name": "server.tomcat.protocol-header-https-value",
      "type": "java.lang.String",
      "description": "Value of the protocol header indicating whether the incoming request uses SSL.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": "https"
    },
    {
      "name": "server.tomcat.redirect-context-root",
      "type": "java.lang.Boolean",
      "description": "Whether requests to the context root should be redirected by appending a / to\n the path.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat"
    },
    {
      "name": "server.tomcat.remote-ip-header",
      "type": "java.lang.String",
      "description": "Name of the HTTP header from which the remote IP is extracted. For instance,\n `X-FORWARDED-FOR`.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat"
    },
    {
      "name": "server.tomcat.resource.cache-ttl",
      "type": "java.time.Duration",
      "description": "Time-to-live of the static resource cache.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Resource"
    },
    {
      "name": "server.tomcat.uri-encoding",
      "type": "java.nio.charset.Charset",
      "description": "Character encoding to use to decode the URI.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat"
    },
    {
      "name": "server.tomcat.use-relative-redirects",
      "type": "java.lang.Boolean",
      "description": "Whether HTTP 1.1 and later location headers generated by a call to sendRedirect\n will use relative or absolute redirects.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat"
    },
    {
      "name": "server.undertow.accesslog.dir",
      "type": "java.io.File",
      "description": "Undertow access log directory.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow$Accesslog"
    },
    {
      "name": "server.undertow.accesslog.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable the access log.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow$Accesslog",
      "defaultValue": false
    },
    {
      "name": "server.undertow.accesslog.pattern",
      "type": "java.lang.String",
      "description": "Format pattern for access logs.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow$Accesslog",
      "defaultValue": "common"
    },
    {
      "name": "server.undertow.accesslog.prefix",
      "type": "java.lang.String",
      "description": "Log file name prefix.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow$Accesslog",
      "defaultValue": "access_log."
    },
    {
      "name": "server.undertow.accesslog.rotate",
      "type": "java.lang.Boolean",
      "description": "Whether to enable access log rotation.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow$Accesslog",
      "defaultValue": true
    },
    {
      "name": "server.undertow.accesslog.suffix",
      "type": "java.lang.String",
      "description": "Log file name suffix.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow$Accesslog",
      "defaultValue": "log"
    },
    {
      "name": "server.undertow.buffer-size",
      "type": "java.lang.Integer",
      "description": "Size of each buffer, in bytes.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow"
    },
    {
      "name": "server.undertow.buffers-per-region",
      "type": "java.lang.Integer",
      "description": "Number of buffer per region.",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "server.undertow.direct-buffers",
      "type": "java.lang.Boolean",
      "description": "Whether to allocate buffers outside the Java heap.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow"
    },
    {
      "name": "server.undertow.eager-filter-init",
      "type": "java.lang.Boolean",
      "description": "Whether servlet filters should be initialized on startup.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow",
      "defaultValue": true
    },
    {
      "name": "server.undertow.io-threads",
      "type": "java.lang.Integer",
      "description": "Number of I/O threads to create for the worker.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow"
    },
    {
      "name": "server.undertow.max-http-post-size",
      "type": "java.lang.Long",
      "description": "Maximum size, in bytes, of the HTTP post content.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow",
      "defaultValue": 0
    },
    {
      "name": "server.undertow.worker-threads",
      "type": "java.lang.Integer",
      "description": "Number of worker threads.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow"
    },
    {
      "name": "server.use-forward-headers",
      "type": "java.lang.Boolean",
      "description": "Whether X-Forwarded-* headers should be applied to the HttpRequest.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties"
    },
    {
      "name": "spring.activemq.broker-url",
      "type": "java.lang.String",
      "description": "URL of the ActiveMQ broker. Auto-generated by default.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties"
    },
    {
      "name": "spring.activemq.close-timeout",
      "type": "java.time.Duration",
      "description": "Time to wait before considering a close complete.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties",
      "defaultValue": "15s"
    },
    {
      "name": "spring.activemq.in-memory",
      "type": "java.lang.Boolean",
      "description": "Whether the default broker URL should be in memory. Ignored if an explicit broker\n has been specified.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties",
      "defaultValue": true
    },
    {
      "name": "spring.activemq.non-blocking-redelivery",
      "type": "java.lang.Boolean",
      "description": "Whether to stop message delivery before re-delivering messages from a rolled back\n transaction. This implies that message order is not preserved when this is enabled.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties",
      "defaultValue": false
    },
    {
      "name": "spring.activemq.packages.trust-all",
      "type": "java.lang.Boolean",
      "description": "Whether to trust all packages.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Packages"
    },
    {
      "name": "spring.activemq.packages.trusted",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of specific packages to trust (when not trusting all\n packages).",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Packages"
    },
    {
      "name": "spring.activemq.password",
      "type": "java.lang.String",
      "description": "Login password of the broker.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties"
    },
    {
      "name": "spring.activemq.pool.block-if-full",
      "type": "java.lang.Boolean",
      "description": "Whether to block when a connection is requested and the pool is full. Set it to\n false to throw a \"JMSException\" instead.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": true
    },
    {
      "name": "spring.activemq.pool.block-if-full-timeout",
      "type": "java.time.Duration",
      "description": "Blocking period before throwing an exception if the pool is still full.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": "-1ms"
    },
    {
      "name": "spring.activemq.pool.create-connection-on-startup",
      "type": "java.lang.Boolean",
      "description": "Whether to create a connection on startup. Can be used to warm up the pool on\n startup.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": true
    },
    {
      "name": "spring.activemq.pool.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether a PooledConnectionFactory should be created, instead of a regular\n ConnectionFactory.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": false
    },
    {
      "name": "spring.activemq.pool.expiry-timeout",
      "type": "java.time.Duration",
      "description": "Connection expiration timeout.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": "0ms"
    },
    {
      "name": "spring.activemq.pool.idle-timeout",
      "type": "java.time.Duration",
      "description": "Connection idle timeout.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": "30s"
    },
    {
      "name": "spring.activemq.pool.max-connections",
      "type": "java.lang.Integer",
      "description": "Maximum number of pooled connections.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": 1
    },
    {
      "name": "spring.activemq.pool.maximum-active-session-per-connection",
      "type": "java.lang.Integer",
      "description": "Maximum number of active sessions per connection.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": 500
    },
    {
      "name": "spring.activemq.pool.reconnect-on-exception",
      "type": "java.lang.Boolean",
      "description": "Reset the connection when a \"JMSException\" occurs.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": true
    },
    {
      "name": "spring.activemq.pool.time-between-expiration-check",
      "type": "java.time.Duration",
      "description": "Time to sleep between runs of the idle connection eviction thread. When\n negative, no idle connection eviction thread runs.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": "-1ms"
    },
    {
      "name": "spring.activemq.pool.use-anonymous-producers",
      "type": "java.lang.Boolean",
      "description": "Whether to use only one anonymous \"MessageProducer\" instance. Set it to false\n to create one \"MessageProducer\" every time one is required.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": true
    },
    {
      "name": "spring.activemq.send-timeout",
      "type": "java.time.Duration",
      "description": "Time to wait on message sends for a response. Set it to 0 to wait forever.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties",
      "defaultValue": "0ms"
    },
    {
      "name": "spring.activemq.user",
      "type": "java.lang.String",
      "description": "Login user of the broker.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties"
    },
    {
      "name": "spring.aop.auto",
      "type": "java.lang.Boolean",
      "description": "Add @EnableAspectJAutoProxy.",
      "defaultValue": true
    },
    {
      "name": "spring.aop.proxy-target-class",
      "type": "java.lang.Boolean",
      "description": "Whether subclass-based (CGLIB) proxies are to be created (true), as opposed to standard Java interface-based proxies (false).",
      "defaultValue": true
    },
    {
      "name": "spring.application.admin.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable admin features for the application.",
      "defaultValue": false
    },
    {
      "name": "spring.application.admin.jmx-name",
      "type": "java.lang.String",
      "description": "JMX name of the application admin MBean.",
      "defaultValue": "org.springframework.boot:type=Admin,name=SpringApplication"
    },
    {
      "name": "spring.application.index",
      "type": "java.lang.Integer",
      "description": "Application index.",
      "deprecated": true,
      "deprecation": {"reason": "Application context ids are now unique by default."}
    },
    {
      "name": "spring.application.name",
      "type": "java.lang.String",
      "description": "Application name.",
      "sourceType": "org.springframework.boot.context.ContextIdApplicationContextInitializer"
    },
    {
      "name": "spring.artemis.embedded.cluster-password",
      "type": "java.lang.String",
      "description": "Cluster password. Randomly generated on startup by default.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties$Embedded"
    },
    {
      "name": "spring.artemis.embedded.data-directory",
      "type": "java.lang.String",
      "description": "Journal file directory. Not necessary if persistence is turned off.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties$Embedded"
    },
    {
      "name": "spring.artemis.embedded.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable embedded mode if the Artemis server APIs are available.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties$Embedded",
      "defaultValue": true
    },
    {
      "name": "spring.artemis.embedded.persistent",
      "type": "java.lang.Boolean",
      "description": "Whether to enable persistent store.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties$Embedded",
      "defaultValue": false
    },
    {
      "name": "spring.artemis.embedded.queues",
      "type": "java.lang.String[]",
      "description": "Comma-separated list of queues to create on startup.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties$Embedded",
      "defaultValue": []
    },
    {
      "name": "spring.artemis.embedded.server-id",
      "type": "java.lang.Integer",
      "description": "Server ID. By default, an auto-incremented counter is used.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties$Embedded",
      "defaultValue": 0
    },
    {
      "name": "spring.artemis.embedded.topics",
      "type": "java.lang.String[]",
      "description": "Comma-separated list of topics to create on startup.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties$Embedded",
      "defaultValue": []
    },
    {
      "name": "spring.artemis.host",
      "type": "java.lang.String",
      "description": "Artemis broker host.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties",
      "defaultValue": "localhost"
    },
    {
      "name": "spring.artemis.mode",
      "type": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisMode",
      "description": "Artemis deployment mode, auto-detected by default.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties"
    },
    {
      "name": "spring.artemis.password",
      "type": "java.lang.String",
      "description": "Login password of the broker.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties"
    },
    {
      "name": "spring.artemis.port",
      "type": "java.lang.Integer",
      "description": "Artemis broker port.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties",
      "defaultValue": 61616
    },
    {
      "name": "spring.artemis.user",
      "type": "java.lang.String",
      "description": "Login user of the broker.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties"
    },
    {
      "name": "spring.autoconfigure.exclude",
      "type": "java.util.List<java.lang.Class>",
      "description": "Auto-configuration classes to exclude."
    },
    {
      "name": "spring.banner.charset",
      "type": "java.nio.charset.Charset",
      "description": "Banner file encoding.",
      "defaultValue": "UTF-8"
    },
    {
      "name": "spring.banner.image.height",
      "type": "java.lang.Integer",
      "description": "Height of the banner image in chars (default based on image height)."
    },
    {
      "name": "spring.banner.image.invert",
      "type": "java.lang.Boolean",
      "description": "Whether images should be inverted for dark terminal themes.",
      "defaultValue": false
    },
    {
      "name": "spring.banner.image.location",
      "type": "org.springframework.core.io.Resource",
      "description": "Banner image file location (jpg or png can also be used).",
      "defaultValue": "classpath:banner.gif"
    },
    {
      "name": "spring.banner.image.margin",
      "type": "java.lang.Integer",
      "description": "Left hand image margin in chars.",
      "defaultValue": 2
    },
    {
      "name": "spring.banner.image.width",
      "type": "java.lang.Integer",
      "description": "Width of the banner image in chars.",
      "defaultValue": 76
    },
    {
      "name": "spring.banner.location",
      "type": "org.springframework.core.io.Resource",
      "description": "Banner text resource location.",
      "defaultValue": "classpath:banner.txt"
    },
    {
      "name": "spring.batch.initialize-schema",
      "type": "org.springframework.boot.jdbc.DataSourceInitializationMode",
      "description": "Database schema initialization mode.",
      "sourceType": "org.springframework.boot.autoconfigure.batch.BatchProperties",
      "defaultValue": "embedded"
    },
    {
      "name": "spring.batch.initializer.enabled",
      "type": "java.lang.Boolean",
      "description": "Create the required batch tables on startup if necessary. Enabled automatically\n if no custom table prefix is set or if a custom schema is configured.",
      "deprecated": true,
      "deprecation": {"replacement": "spring.batch.initialize-schema"}
    },
    {
      "name": "spring.batch.job.enabled",
      "type": "java.lang.Boolean",
      "description": "Execute all Spring Batch jobs in the context on startup.",
      "defaultValue": true
    },
    {
      "name": "spring.batch.job.names",
      "type": "java.lang.String",
      "description": "Comma-separated list of job names to execute on startup (for instance,\n `job1,job2`). By default, all Jobs found in the context are executed.",
      "sourceType": "org.springframework.boot.autoconfigure.batch.BatchProperties$Job",
      "defaultValue": ""
    },
    {
      "name": "spring.batch.schema",
      "type": "java.lang.String",
      "description": "Path to the SQL file to use to initialize the database schema.",
      "sourceType": "org.springframework.boot.autoconfigure.batch.BatchProperties",
      "defaultValue": "classpath:org/springframework/batch/core/schema-@@platform@@.sql"
    },
    {
      "name": "spring.batch.table-prefix",
      "type": "java.lang.String",
      "description": "Table prefix for all the batch meta-data tables.",
      "sourceType": "org.springframework.boot.autoconfigure.batch.BatchProperties"
    },
    {
      "name": "spring.beaninfo.ignore",
      "type": "java.lang.Boolean",
      "description": "Whether to skip search of BeanInfo classes.",
      "sourceType": "org.springframework.boot.context.config.ConfigFileApplicationListener",
      "defaultValue": true
    },
    {
      "name": "spring.cache.cache-names",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of cache names to create if supported by the underlying cache\n manager. Usually, this disables the ability to create additional caches on-the-fly.",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties"
    },
    {
      "name": "spring.cache.caffeine.spec",
      "type": "java.lang.String",
      "description": "The spec to use to create caches. See CaffeineSpec for more details on the spec\n format.",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$Caffeine"
    },
    {
      "name": "spring.cache.couchbase.expiration",
      "type": "java.time.Duration",
      "description": "Entry expiration. By default the entries never expire. Note that this value is\n ultimately converted to seconds.",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$Couchbase"
    },
    {
      "name": "spring.cache.ehcache.config",
      "type": "org.springframework.core.io.Resource",
      "description": "The location of the configuration file to use to initialize EhCache.",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$EhCache"
    },
    {
      "name": "spring.cache.infinispan.config",
      "type": "org.springframework.core.io.Resource",
      "description": "The location of the configuration file to use to initialize Infinispan.",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$Infinispan"
    },
    {
      "name": "spring.cache.jcache.config",
      "type": "org.springframework.core.io.Resource",
      "description": "The location of the configuration file to use to initialize the cache manager.\n The configuration file is dependent of the underlying cache implementation.",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$JCache"
    },
    {
      "name": "spring.cache.jcache.provider",
      "type": "java.lang.String",
      "description": "Fully qualified name of the CachingProvider implementation to use to retrieve\n the JSR-107 compliant cache manager. Needed only if more than one JSR-107\n implementation is available on the classpath.",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$JCache"
    },
    {
      "name": "spring.cache.redis.cache-null-values",
      "type": "java.lang.Boolean",
      "description": "Allow caching null values.",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$Redis",
      "defaultValue": true
    },
    {
      "name": "spring.cache.redis.key-prefix",
      "type": "java.lang.String",
      "description": "Key prefix.",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$Redis"
    },
    {
      "name": "spring.cache.redis.time-to-live",
      "type": "java.time.Duration",
      "description": "Entry expiration. By default the entries never expire.",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$Redis"
    },
    {
      "name": "spring.cache.redis.use-key-prefix",
      "type": "java.lang.Boolean",
      "description": "Whether to use the key prefix when writing to Redis.",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$Redis",
      "defaultValue": true
    },
    {
      "name": "spring.cache.type",
      "type": "org.springframework.boot.autoconfigure.cache.CacheType",
      "description": "Cache type. By default, auto-detected according to the environment.",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties"
    },
    {
      "name": "spring.cloud.config.allow-override",
      "type": "java.lang.Boolean",
      "description": "Flag to indicate that {@link #isOverrideSystemProperties()\n systemPropertiesOverride} can be used. Set to false to prevent users from changing\n the default accidentally. Default true.",
      "sourceType": "org.springframework.cloud.bootstrap.config.PropertySourceBootstrapProperties",
      "defaultValue": true
    },
    {
      "name": "spring.cloud.config.discovery.enabled",
      "type": "java.lang.Boolean",
      "description": "Flag to indicate that config server discovery is enabled (config server URL\n will be looked up via discovery).",
      "sourceType": "org.springframework.cloud.config.client.ConfigClientProperties$Discovery",
      "defaultValue": false
    },
    {
      "name": "spring.cloud.config.discovery.service-id",
      "type": "java.lang.String",
      "description": "Service id to locate config server.",
      "sourceType": "org.springframework.cloud.config.client.ConfigClientProperties$Discovery",
      "defaultValue": "configserver"
    },
    {
      "name": "spring.cloud.config.enabled",
      "type": "java.lang.Boolean",
      "description": "Flag to say that remote configuration is enabled. Default true;",
      "sourceType": "org.springframework.cloud.config.client.ConfigClientProperties",
      "defaultValue": true
    },
    {
      "name": "spring.cloud.config.fail-fast",
      "type": "java.lang.Boolean",
      "description": "Flag to indicate that failure to connect to the server is fatal (default false).",
      "sourceType": "org.springframework.cloud.config.client.ConfigClientProperties",
      "defaultValue": false
    },
    {
      "name": "spring.cloud.config.headers",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Additional headers used to create the client request.",
      "sourceType": "org.springframework.cloud.config.client.ConfigClientProperties"
    },
    {
      "name": "spring.cloud.config.label",
      "type": "java.lang.String",
      "description": "The label name to use to pull remote configuration properties. The default is set\n on the server (generally \"master\" for a git based server).",
      "sourceType": "org.springframework.cloud.config.client.ConfigClientProperties"
    },
    {
      "name": "spring.cloud.config.name",
      "type": "java.lang.String",
      "description": "Name of application used to fetch remote properties.",
      "sourceType": "org.springframework.cloud.config.client.ConfigClientProperties"
    },
    {
      "name": "spring.cloud.config.override-none",
      "type": "java.lang.Boolean",
      "description": "Flag to indicate that when {@link #setAllowOverride(boolean) allowOverride} is\n true, external properties should take lowest priority, and not override any\n existing property sources (including local config files). Default false.",
      "sourceType": "org.springframework.cloud.bootstrap.config.PropertySourceBootstrapProperties",
      "defaultValue": false
    },
    {
      "name": "spring.cloud.config.override-system-properties",
      "type": "java.lang.Boolean",
      "description": "Flag to indicate that the external properties should override system properties.\n Default true.",
      "sourceType": "org.springframework.cloud.bootstrap.config.PropertySourceBootstrapProperties",
      "defaultValue": true
    },
    {
      "name": "spring.cloud.config.password",
      "type": "java.lang.String",
      "description": "The password to use (HTTP Basic) when contacting the remote server.",
      "sourceType": "org.springframework.cloud.config.client.ConfigClientProperties"
    },
    {
      "name": "spring.cloud.config.profile",
      "type": "java.lang.String",
      "description": "The default profile to use when fetching remote configuration (comma-separated).\n Default is \"default\".",
      "sourceType": "org.springframework.cloud.config.client.ConfigClientProperties",
      "defaultValue": "default"
    },
    {
      "name": "spring.cloud.config.request-read-timeout",
      "type": "java.lang.Integer",
      "description": "timeout on waiting to read data from the Config Server.",
      "sourceType": "org.springframework.cloud.config.client.ConfigClientProperties",
      "defaultValue": 0
    },
    {
      "name": "spring.cloud.config.retry.initial-interval",
      "type": "java.lang.Long",
      "description": "Initial retry interval in milliseconds.",
      "sourceType": "org.springframework.cloud.config.client.RetryProperties",
      "defaultValue": 1000
    },
    {
      "name": "spring.cloud.config.retry.max-attempts",
      "type": "java.lang.Integer",
      "description": "Maximum number of attempts.",
      "sourceType": "org.springframework.cloud.config.client.RetryProperties",
      "defaultValue": 6
    },
    {
      "name": "spring.cloud.config.retry.max-interval",
      "type": "java.lang.Long",
      "description": "Maximum interval for backoff.",
      "sourceType": "org.springframework.cloud.config.client.RetryProperties",
      "defaultValue": 2000
    },
    {
      "name": "spring.cloud.config.retry.multiplier",
      "type": "java.lang.Double",
      "description": "Multiplier for next interval.",
      "sourceType": "org.springframework.cloud.config.client.RetryProperties",
      "defaultValue": 1.1
    },
    {
      "name": "spring.cloud.config.send-state",
      "type": "java.lang.Boolean",
      "description": "Flag to indicate whether to send state. Default true.",
      "sourceType": "org.springframework.cloud.config.client.ConfigClientProperties",
      "defaultValue": true
    },
    {
      "name": "spring.cloud.config.token",
      "type": "java.lang.String",
      "description": "Security Token passed thru to underlying environment repository.",
      "sourceType": "org.springframework.cloud.config.client.ConfigClientProperties"
    },
    {
      "name": "spring.cloud.config.uri",
      "type": "java.lang.String[]",
      "description": "The URI of the remote server (default http://localhost:8888).",
      "sourceType": "org.springframework.cloud.config.client.ConfigClientProperties",
      "defaultValue": ["http://localhost:8888"]
    },
    {
      "name": "spring.cloud.config.username",
      "type": "java.lang.String",
      "description": "The username to use (HTTP Basic) when contacting the remote server.",
      "sourceType": "org.springframework.cloud.config.client.ConfigClientProperties"
    },
    {
      "name": "spring.cloud.discovery.client.health-indicator.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.cloud.client.discovery.health.DiscoveryClientHealthIndicatorProperties",
      "defaultValue": true
    },
    {
      "name": "spring.cloud.discovery.client.health-indicator.include-description",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.cloud.client.discovery.health.DiscoveryClientHealthIndicatorProperties",
      "defaultValue": false
    },
    {
      "name": "spring.cloud.discovery.client.simple.instances",
      "type": "java.util.Map<java.lang.String,java.util.List<org.springframework.cloud.client.discovery.simple.SimpleDiscoveryProperties.SimpleServiceInstance>>",
      "sourceType": "org.springframework.cloud.client.discovery.simple.SimpleDiscoveryProperties"
    },
    {
      "name": "spring.cloud.discovery.client.simple.local.metadata",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Metadata for the service instance. Can be used by discovery clients to modify\n their behaviour per instance, e.g. when load balancing.",
      "sourceType": "org.springframework.cloud.client.discovery.simple.SimpleDiscoveryProperties$SimpleServiceInstance"
    },
    {
      "name": "spring.cloud.discovery.client.simple.local.service-id",
      "type": "java.lang.String",
      "description": "The identifier or name for the service. Multiple instances might share the same\n service id.",
      "sourceType": "org.springframework.cloud.client.discovery.simple.SimpleDiscoveryProperties$SimpleServiceInstance"
    },
    {
      "name": "spring.cloud.discovery.client.simple.local.uri",
      "type": "java.net.URI",
      "description": "The URI of the service instance. Will be parsed to extract the scheme, hos and\n port.",
      "sourceType": "org.springframework.cloud.client.discovery.simple.SimpleDiscoveryProperties$SimpleServiceInstance"
    },
    {
      "name": "spring.cloud.hypermedia.refresh.fixed-delay",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.cloud.client.hypermedia.CloudHypermediaAutoConfiguration$CloudHypermediaProperties$Refresh",
      "defaultValue": 5000
    },
    {
      "name": "spring.cloud.hypermedia.refresh.initial-delay",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.cloud.client.hypermedia.CloudHypermediaAutoConfiguration$CloudHypermediaProperties$Refresh",
      "defaultValue": 10000
    },
    {
      "name": "spring.cloud.inetutils.default-hostname",
      "type": "java.lang.String",
      "description": "The default hostname. Used in case of errors.",
      "sourceType": "org.springframework.cloud.commons.util.InetUtilsProperties",
      "defaultValue": "localhost"
    },
    {
      "name": "spring.cloud.inetutils.default-ip-address",
      "type": "java.lang.String",
      "description": "The default ipaddress. Used in case of errors.",
      "sourceType": "org.springframework.cloud.commons.util.InetUtilsProperties",
      "defaultValue": "127.0.0.1"
    },
    {
      "name": "spring.cloud.inetutils.ignored-interfaces",
      "type": "java.util.List<java.lang.String>",
      "description": "List of Java regex expressions for network interfaces that will be ignored.",
      "sourceType": "org.springframework.cloud.commons.util.InetUtilsProperties"
    },
    {
      "name": "spring.cloud.inetutils.preferred-networks",
      "type": "java.util.List<java.lang.String>",
      "description": "List of Java regex expressions for network addresses that will be preferred.",
      "sourceType": "org.springframework.cloud.commons.util.InetUtilsProperties"
    },
    {
      "name": "spring.cloud.inetutils.timeout-seconds",
      "type": "java.lang.Integer",
      "description": "Timeout in seconds for calculating hostname.",
      "sourceType": "org.springframework.cloud.commons.util.InetUtilsProperties",
      "defaultValue": 1
    },
    {
      "name": "spring.cloud.inetutils.use-only-site-local-interfaces",
      "type": "java.lang.Boolean",
      "description": "Use only interfaces with site local addresses. See {@link InetAddress#isSiteLocalAddress()} for more details.",
      "sourceType": "org.springframework.cloud.commons.util.InetUtilsProperties",
      "defaultValue": false
    },
    {
      "name": "spring.cloud.loadbalancer.retry.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.cloud.client.loadbalancer.LoadBalancerRetryProperties",
      "defaultValue": true
    },
    {
      "name": "spring.cloud.refresh.extra-refreshable",
      "type": "java.util.Set<java.lang.String>",
      "description": "Additional class names for beans to post process into refresh scope.",
      "defaultValue": true
    },
    {
      "name": "spring.cloud.service-registry.auto-registration.enabled",
      "type": "java.lang.Boolean",
      "description": "If Auto-Service Registration is enabled, default to true.",
      "sourceType": "org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationProperties",
      "defaultValue": true
    },
    {
      "name": "spring.cloud.service-registry.auto-registration.fail-fast",
      "type": "java.lang.Boolean",
      "description": "Should startup fail if there is no AutoServiceRegistration, default to false.",
      "sourceType": "org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationProperties",
      "defaultValue": false
    },
    {
      "name": "spring.cloud.service-registry.auto-registration.register-management",
      "type": "java.lang.Boolean",
      "description": "Whether to register the management as a service, defaults to true",
      "sourceType": "org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationProperties",
      "defaultValue": true
    },
    {
      "name": "spring.cloud.stream.binders",
      "type": "java.util.Map<java.lang.String,org.springframework.cloud.stream.config.BinderProperties>",
      "description": "Additional per-binder properties (see {@link BinderProperties}) if more then one binder of the same type is used\n (i.e., connect to multiple instances of RabbitMq). Here you can specify multiple\n binder configurations, each with different environment settings. For example;\n spring.cloud.stream.binders.rabbit1.environment. . . , spring.cloud.stream.binders.rabbit2.environment. . .",
      "sourceType": "org.springframework.cloud.stream.config.BindingServiceProperties"
    },
    {
      "name": "spring.cloud.stream.binding-retry-interval",
      "type": "java.lang.Integer",
      "description": "Retry interval (in seconds) used to schedule binding attempts. Default: 30 sec.",
      "sourceType": "org.springframework.cloud.stream.config.BindingServiceProperties",
      "defaultValue": 30
    },
    {
      "name": "spring.cloud.stream.bindings",
      "type": "java.util.Map<java.lang.String,org.springframework.cloud.stream.config.BindingProperties>",
      "description": "Additional binding properties (see {@link BinderProperties}) per binding name (e.g., 'input`).\n\n For example; This sets the content-type for the 'input' binding of a Sink application:\n 'spring.cloud.stream.bindings.input.contentType=text/plain'",
      "sourceType": "org.springframework.cloud.stream.config.BindingServiceProperties"
    },
    {
      "name": "spring.cloud.stream.default-binder",
      "type": "java.lang.String",
      "description": "The name of the binder to use by all bindings in the event multiple binders available (e.g., 'rabbit');",
      "sourceType": "org.springframework.cloud.stream.config.BindingServiceProperties"
    },
    {
      "name": "spring.cloud.stream.dynamic-destinations",
      "type": "java.lang.String[]",
      "description": "A list of destinations that can be bound dynamically. If set, only listed destinations can be bound.",
      "sourceType": "org.springframework.cloud.stream.config.BindingServiceProperties",
      "defaultValue": []
    },
    {
      "name": "spring.cloud.stream.instance-count",
      "type": "java.lang.Integer",
      "description": "The number of deployed instances of an application.\n Default: 1.\n NOTE: Could also be managed per individual binding\n \"spring.cloud.stream.bindings.foo.consumer.instance-count\" where 'foo' is\n the name of the binding.",
      "sourceType": "org.springframework.cloud.stream.config.BindingServiceProperties",
      "defaultValue": 1
    },
    {
      "name": "spring.cloud.stream.instance-index",
      "type": "java.lang.Integer",
      "description": "The instance id of the application: a number from 0 to instanceCount-1.\n Used for partitioning and with Kafka.\n NOTE: Could also be managed per individual binding\n \"spring.cloud.stream.bindings.foo.consumer.instance-index\" where 'foo' is\n the name of the binding.",
      "sourceType": "org.springframework.cloud.stream.config.BindingServiceProperties",
      "defaultValue": 0
    },
    {
      "name": "spring.cloud.stream.integration.message-handler-not-propagated-headers",
      "type": "java.lang.String[]",
      "description": "Message header names that will NOT be copied from the inbound message.",
      "sourceType": "org.springframework.cloud.stream.config.SpringIntegrationProperties"
    },
    {
      "name": "spring.cloud.stream.metrics.export-properties",
      "type": "java.util.Map<java.lang.String,java.lang.Object>",
      "description": "List of properties that are going to be appended to each message. This gets\n populate by onApplicationEvent, once the context refreshes to avoid overhead of\n doing per message basis.",
      "sourceType": "org.springframework.cloud.stream.micrometer.ApplicationMetricsProperties"
    },
    {
      "name": "spring.cloud.stream.metrics.key",
      "type": "java.lang.String",
      "description": "The name of the metric being emitted. Should be an unique value per application.\n Defaults to: ${spring.application.name:${vcap.application.name:${spring.config.name:application}}}",
      "sourceType": "org.springframework.cloud.stream.micrometer.ApplicationMetricsProperties"
    },
    {
      "name": "spring.cloud.stream.metrics.meter-filter",
      "type": "java.lang.String",
      "description": "Pattern to control the 'meters' one wants to capture. By default all 'meters' will be captured.\n For example, 'spring.integration.*' will only capture metric information for meters whose name starts with 'spring.integration'.",
      "sourceType": "org.springframework.cloud.stream.micrometer.ApplicationMetricsProperties"
    },
    {
      "name": "spring.cloud.stream.metrics.properties",
      "type": "java.lang.String[]",
      "description": "Application properties that should be added to the metrics payload\n For example: `spring.application**`",
      "sourceType": "org.springframework.cloud.stream.micrometer.ApplicationMetricsProperties"
    },
    {
      "name": "spring.cloud.stream.metrics.schedule-interval",
      "type": "java.time.Duration",
      "description": "Interval expressed as Duration for scheduling metrics snapshots publishing.\n Defaults to 60 seconds",
      "sourceType": "org.springframework.cloud.stream.micrometer.ApplicationMetricsProperties",
      "defaultValue": "60s"
    },
    {
      "name": "spring.cloud.stream.rabbit.binder.admin-addresses",
      "type": "java.lang.String[]",
      "description": "Urls for management plugins; only needed for queue affinity.",
      "sourceType": "org.springframework.cloud.stream.binder.rabbit.properties.RabbitBinderConfigurationProperties",
      "defaultValue": []
    },
    {
      "name": "spring.cloud.stream.rabbit.binder.admin-adresses",
      "type": "java.lang.String[]",
      "sourceType": "org.springframework.cloud.stream.binder.rabbit.properties.RabbitBinderConfigurationProperties",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.cloud.stream.rabbit.binder.compression-level",
      "type": "java.lang.Integer",
      "description": "Compression level for compressed bindings; see 'java.util.zip.Deflator'.",
      "sourceType": "org.springframework.cloud.stream.binder.rabbit.properties.RabbitBinderConfigurationProperties",
      "defaultValue": 0
    },
    {
      "name": "spring.cloud.stream.rabbit.binder.connection-name-prefix",
      "type": "java.lang.String",
      "description": "Prefix for connection names from this binder.",
      "sourceType": "org.springframework.cloud.stream.binder.rabbit.properties.RabbitBinderConfigurationProperties"
    },
    {
      "name": "spring.cloud.stream.rabbit.binder.nodes",
      "type": "java.lang.String[]",
      "description": "Cluster member node names; only needed for queue affinity.",
      "sourceType": "org.springframework.cloud.stream.binder.rabbit.properties.RabbitBinderConfigurationProperties",
      "defaultValue": []
    },
    {
      "name": "spring.cloud.stream.rabbit.bindings",
      "type": "java.util.Map<java.lang.String,org.springframework.cloud.stream.binder.rabbit.properties.RabbitBindingProperties>",
      "sourceType": "org.springframework.cloud.stream.binder.rabbit.properties.RabbitExtendedBindingProperties"
    },
    {
      "name": "spring.config.additional-location",
      "type": "java.lang.String",
      "description": "Config file locations used in addition to the defaults.",
      "sourceType": "org.springframework.boot.context.config.ConfigFileApplicationListener"
    },
    {
      "name": "spring.config.location",
      "type": "java.lang.String",
      "description": "Config file locations that replace the defaults.",
      "sourceType": "org.springframework.boot.context.config.ConfigFileApplicationListener"
    },
    {
      "name": "spring.config.name",
      "type": "java.lang.String",
      "description": "Config file name.",
      "sourceType": "org.springframework.boot.context.config.ConfigFileApplicationListener",
      "defaultValue": "application"
    },
    {
      "name": "spring.couchbase.bootstrap-hosts",
      "type": "java.util.List<java.lang.String>",
      "description": "Couchbase nodes (host or IP address) to bootstrap from.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties"
    },
    {
      "name": "spring.couchbase.bucket.name",
      "type": "java.lang.String",
      "description": "Name of the bucket to connect to.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Bucket",
      "defaultValue": "default"
    },
    {
      "name": "spring.couchbase.bucket.password",
      "type": "java.lang.String",
      "description": "Password of the bucket.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Bucket",
      "defaultValue": ""
    },
    {
      "name": "spring.couchbase.env.endpoints.key-value",
      "type": "java.lang.Integer",
      "description": "Number of sockets per node against the key/value service.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Endpoints",
      "defaultValue": 1
    },
    {
      "name": "spring.couchbase.env.endpoints.query",
      "type": "java.lang.Integer",
      "description": "Number of sockets per node against the query (N1QL) service.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Endpoints",
      "deprecated": true,
      "deprecation": {"replacement": "spring.couchbase.env.endpoints.queryservice.max-endpoints"}
    },
    {
      "name": "spring.couchbase.env.endpoints.queryservice.max-endpoints",
      "type": "java.lang.Integer",
      "description": "Maximum number of sockets per node.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Endpoints$CouchbaseService",
      "defaultValue": 1
    },
    {
      "name": "spring.couchbase.env.endpoints.queryservice.min-endpoints",
      "type": "java.lang.Integer",
      "description": "Minimum number of sockets per node.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Endpoints$CouchbaseService",
      "defaultValue": 1
    },
    {
      "name": "spring.couchbase.env.endpoints.view",
      "type": "java.lang.Integer",
      "description": "Number of sockets per node against the view service.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Endpoints",
      "deprecated": true,
      "deprecation": {"replacement": "spring.couchbase.env.endpoints.viewservice.max-endpoints"}
    },
    {
      "name": "spring.couchbase.env.endpoints.viewservice.max-endpoints",
      "type": "java.lang.Integer",
      "description": "Maximum number of sockets per node.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Endpoints$CouchbaseService",
      "defaultValue": 1
    },
    {
      "name": "spring.couchbase.env.endpoints.viewservice.min-endpoints",
      "type": "java.lang.Integer",
      "description": "Minimum number of sockets per node.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Endpoints$CouchbaseService",
      "defaultValue": 1
    },
    {
      "name": "spring.couchbase.env.ssl.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable SSL support. Enabled automatically if a \"keyStore\" is\n provided unless specified otherwise.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Ssl"
    },
    {
      "name": "spring.couchbase.env.ssl.key-store",
      "type": "java.lang.String",
      "description": "Path to the JVM key store that holds the certificates.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Ssl"
    },
    {
      "name": "spring.couchbase.env.ssl.key-store-password",
      "type": "java.lang.String",
      "description": "Password used to access the key store.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Ssl"
    },
    {
      "name": "spring.couchbase.env.timeouts.connect",
      "type": "java.time.Duration",
      "description": "Bucket connections timeouts.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Timeouts",
      "defaultValue": "5000ms"
    },
    {
      "name": "spring.couchbase.env.timeouts.key-value",
      "type": "java.time.Duration",
      "description": "Blocking operations performed on a specific key timeout.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Timeouts",
      "defaultValue": "2500ms"
    },
    {
      "name": "spring.couchbase.env.timeouts.query",
      "type": "java.time.Duration",
      "description": "N1QL query operations timeout.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Timeouts",
      "defaultValue": "7500ms"
    },
    {
      "name": "spring.couchbase.env.timeouts.socket-connect",
      "type": "java.time.Duration",
      "description": "Socket connect connections timeout.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Timeouts",
      "defaultValue": "1000ms"
    },
    {
      "name": "spring.couchbase.env.timeouts.view",
      "type": "java.time.Duration",
      "description": "Regular and geospatial view operations timeout.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Timeouts",
      "defaultValue": "7500ms"
    },
    {
      "name": "spring.dao.exceptiontranslation.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable the PersistenceExceptionTranslationPostProcessor.",
      "defaultValue": true
    },
    {
      "name": "spring.data.cassandra.cluster-name",
      "type": "java.lang.String",
      "description": "Name of the Cassandra cluster.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.cassandra.compression",
      "type": "com.datastax.driver.core.ProtocolOptions$Compression",
      "description": "Compression supported by the Cassandra binary protocol.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "defaultValue": "none"
    },
    {
      "name": "spring.data.cassandra.connect-timeout",
      "type": "java.time.Duration",
      "description": "Socket option: connection time out.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.cassandra.connect-timeout-millis",
      "type": "java.lang.Integer",
      "description": "Socket option: connection time out.",
      "deprecated": true,
      "deprecation": {"replacement": "spring.data.cassandra.connect-timeout"}
    },
    {
      "name": "spring.data.cassandra.consistency-level",
      "type": "com.datastax.driver.core.ConsistencyLevel",
      "description": "Queries consistency level.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.cassandra.contact-points",
      "type": "java.util.List<java.lang.String>",
      "description": "Cluster node addresses.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "defaultValue": ["localhost"]
    },
    {
      "name": "spring.data.cassandra.fetch-size",
      "type": "java.lang.Integer",
      "description": "Queries default fetch size.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.cassandra.keyspace-name",
      "type": "java.lang.String",
      "description": "Keyspace name to use.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.cassandra.load-balancing-policy",
      "type": "java.lang.Class<? extends com.datastax.driver.core.policies.LoadBalancingPolicy>",
      "description": "Class name of the load balancing policy.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.cassandra.password",
      "type": "java.lang.String",
      "description": "Login password of the server.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.cassandra.pool.heartbeat-interval",
      "type": "java.time.Duration",
      "description": "Heartbeat interval after which a message is sent on an idle connection to make\n sure it's still alive. If a duration suffix is not specified, seconds will be\n used.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties$Pool",
      "defaultValue": "30s"
    },
    {
      "name": "spring.data.cassandra.pool.idle-timeout",
      "type": "java.time.Duration",
      "description": "Idle timeout before an idle connection is removed. If a duration suffix is not\n specified, seconds will be used.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties$Pool",
      "defaultValue": "120s"
    },
    {
      "name": "spring.data.cassandra.pool.max-queue-size",
      "type": "java.lang.Integer",
      "description": "Maximum number of requests that get queued if no connection is available.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties$Pool",
      "defaultValue": 256
    },
    {
      "name": "spring.data.cassandra.pool.pool-timeout",
      "type": "java.time.Duration",
      "description": "Pool timeout when trying to acquire a connection from a host's pool.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties$Pool",
      "defaultValue": "5000ms"
    },
    {
      "name": "spring.data.cassandra.port",
      "type": "java.lang.Integer",
      "description": "Port of the Cassandra server.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.cassandra.read-timeout",
      "type": "java.time.Duration",
      "description": "Socket option: read time out.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.cassandra.read-timeout-millis",
      "type": "java.lang.Integer",
      "description": "Socket option: read time out.",
      "deprecated": true,
      "deprecation": {"replacement": "spring.data.cassandra.read-timeout"}
    },
    {
      "name": "spring.data.cassandra.reconnection-policy",
      "type": "java.lang.Class<? extends com.datastax.driver.core.policies.ReconnectionPolicy>",
      "description": "Reconnection policy class.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.cassandra.repositories.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable Cassandra repositories.",
      "defaultValue": true,
      "deprecated": true,
      "deprecation": {"replacement": "spring.data.cassandra.repositories.type"}
    },
    {
      "name": "spring.data.cassandra.repositories.type",
      "type": "org.springframework.boot.autoconfigure.data.RepositoryType",
      "description": "Type of Cassandra repositories to enable.",
      "defaultValue": "auto"
    },
    {
      "name": "spring.data.cassandra.retry-policy",
      "type": "java.lang.Class<? extends com.datastax.driver.core.policies.RetryPolicy>",
      "description": "Class name of the retry policy.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.cassandra.schema-action",
      "type": "java.lang.String",
      "description": "Schema action to take at startup.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "defaultValue": "none"
    },
    {
      "name": "spring.data.cassandra.serial-consistency-level",
      "type": "com.datastax.driver.core.ConsistencyLevel",
      "description": "Queries serial consistency level.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.cassandra.ssl",
      "type": "java.lang.Boolean",
      "description": "Enable SSL support.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "defaultValue": false
    },
    {
      "name": "spring.data.cassandra.username",
      "type": "java.lang.String",
      "description": "Login user of the server.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.couchbase.auto-index",
      "type": "java.lang.Boolean",
      "description": "Automatically create views and indexes. Use the meta-data provided by\n \"@ViewIndexed\", \"@N1qlPrimaryIndexed\" and \"@N1qlSecondaryIndexed\".",
      "sourceType": "org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataProperties",
      "defaultValue": false
    },
    {
      "name": "spring.data.couchbase.consistency",
      "type": "org.springframework.data.couchbase.core.query.Consistency",
      "description": "Consistency to apply by default on generated queries.",
      "sourceType": "org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataProperties",
      "defaultValue": "read-your-own-writes"
    },
    {
      "name": "spring.data.couchbase.repositories.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable Couchbase repositories.",
      "defaultValue": true,
      "deprecated": true,
      "deprecation": {"replacement": "spring.data.couchbase.repositories.type"}
    },
    {
      "name": "spring.data.couchbase.repositories.type",
      "type": "org.springframework.boot.autoconfigure.data.RepositoryType",
      "description": "Type of Couchbase repositories to enable.",
      "defaultValue": "auto"
    },
    {
      "name": "spring.data.elasticsearch.cluster-name",
      "type": "java.lang.String",
      "description": "Elasticsearch cluster name.",
      "sourceType": "org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchProperties",
      "defaultValue": "elasticsearch"
    },
    {
      "name": "spring.data.elasticsearch.cluster-nodes",
      "type": "java.lang.String",
      "description": "Comma-separated list of cluster node addresses.",
      "sourceType": "org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchProperties"
    },
    {
      "name": "spring.data.elasticsearch.properties",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Additional properties used to configure the client.",
      "sourceType": "org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchProperties"
    },
    {
      "name": "spring.data.elasticsearch.repositories.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable Elasticsearch repositories.",
      "defaultValue": true
    },
    {
      "name": "spring.data.jpa.repositories.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable JPA repositories.",
      "defaultValue": true
    },
    {
      "name": "spring.data.ldap.repositories.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable LDAP repositories.",
      "defaultValue": true
    },
    {
      "name": "spring.data.mongodb.authentication-database",
      "type": "java.lang.String",
      "description": "Authentication database name.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties"
    },
    {
      "name": "spring.data.mongodb.database",
      "type": "java.lang.String",
      "description": "Database name.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties"
    },
    {
      "name": "spring.data.mongodb.field-naming-strategy",
      "type": "java.lang.Class<?>",
      "description": "Fully qualified name of the FieldNamingStrategy to use.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties"
    },
    {
      "name": "spring.data.mongodb.grid-fs-database",
      "type": "java.lang.String",
      "description": "GridFS database name.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties"
    },
    {
      "name": "spring.data.mongodb.host",
      "type": "java.lang.String",
      "description": "Mongo server host. Cannot be set with URI.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties"
    },
    {
      "name": "spring.data.mongodb.password",
      "type": "java.lang.Character[]",
      "description": "Login password of the mongo server. Cannot be set with URI.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties"
    },
    {
      "name": "spring.data.mongodb.port",
      "type": "java.lang.Integer",
      "description": "Mongo server port. Cannot be set with URI.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties"
    },
    {
      "name": "spring.data.mongodb.repositories.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable Mongo repositories.",
      "defaultValue": true,
      "deprecated": true,
      "deprecation": {"replacement": "spring.data.mongodb.repositories.type"}
    },
    {
      "name": "spring.data.mongodb.repositories.type",
      "type": "org.springframework.boot.autoconfigure.data.RepositoryType",
      "description": "Type of Mongo repositories to enable.",
      "defaultValue": "auto"
    },
    {
      "name": "spring.data.mongodb.uri",
      "type": "java.lang.String",
      "description": "Mongo database URI. Cannot be set with host, port and credentials.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties",
      "defaultValue": "mongodb://localhost/test"
    },
    {
      "name": "spring.data.mongodb.username",
      "type": "java.lang.String",
      "description": "Login user of the mongo server. Cannot be set with URI.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties"
    },
    {
      "name": "spring.data.neo4j.auto-index",
      "type": "org.neo4j.ogm.config.AutoIndexMode",
      "description": "Auto index mode.",
      "sourceType": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties",
      "defaultValue": "none"
    },
    {
      "name": "spring.data.neo4j.compiler",
      "type": "java.lang.String",
      "description": "Compiler to use.",
      "deprecated": true,
      "deprecation": {"reason": "Not supported anymore as of Neo4j 3."}
    },
    {
      "name": "spring.data.neo4j.embedded.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable embedded mode if the embedded driver is available.",
      "sourceType": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties$Embedded",
      "defaultValue": true
    },
    {
      "name": "spring.data.neo4j.open-in-view",
      "type": "java.lang.Boolean",
      "description": "Register OpenSessionInViewInterceptor. Binds a Neo4j Session to the thread for the\n entire processing of the request.\",",
      "sourceType": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties",
      "defaultValue": true
    },
    {
      "name": "spring.data.neo4j.password",
      "type": "java.lang.String",
      "description": "Login password of the server.",
      "sourceType": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties"
    },
    {
      "name": "spring.data.neo4j.repositories.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable Neo4j repositories.",
      "defaultValue": true
    },
    {
      "name": "spring.data.neo4j.uri",
      "type": "java.lang.String",
      "description": "URI used by the driver. Auto-detected by default.",
      "sourceType": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties"
    },
    {
      "name": "spring.data.neo4j.username",
      "type": "java.lang.String",
      "description": "Login user of the server.",
      "sourceType": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties"
    },
    {
      "name": "spring.data.redis.repositories.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable Redis repositories.",
      "defaultValue": true
    },
    {
      "name": "spring.data.rest.base-path",
      "type": "java.lang.String",
      "description": "Base path to be used by Spring Data REST to expose repository resources.",
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties"
    },
    {
      "name": "spring.data.rest.default-media-type",
      "type": "org.springframework.http.MediaType",
      "description": "Content type to use as a default when none is specified.",
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties"
    },
    {
      "name": "spring.data.rest.default-page-size",
      "type": "java.lang.Integer",
      "description": "Default size of pages.",
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties"
    },
    {
      "name": "spring.data.rest.detection-strategy",
      "type": "org.springframework.data.rest.core.mapping.RepositoryDetectionStrategy$RepositoryDetectionStrategies",
      "description": "Strategy to use to determine which repositories get exposed.",
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties",
      "defaultValue": "default"
    },
    {
      "name": "spring.data.rest.enable-enum-translation",
      "type": "java.lang.Boolean",
      "description": "Whether to enable enum value translation through the Spring Data REST default\n resource bundle.",
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties"
    },
    {
      "name": "spring.data.rest.limit-param-name",
      "type": "java.lang.String",
      "description": "Name of the URL query string parameter that indicates how many results to return at\n once.",
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties"
    },
    {
      "name": "spring.data.rest.max-page-size",
      "type": "java.lang.Integer",
      "description": "Maximum size of pages.",
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties"
    },
    {
      "name": "spring.data.rest.page-param-name",
      "type": "java.lang.String",
      "description": "Name of the URL query string parameter that indicates what page to return.",
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties"
    },
    {
      "name": "spring.data.rest.return-body-on-create",
      "type": "java.lang.Boolean",
      "description": "Whether to return a response body after creating an entity.",
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties"
    },
    {
      "name": "spring.data.rest.return-body-on-update",
      "type": "java.lang.Boolean",
      "description": "Whether to return a response body after updating an entity.",
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties"
    },
    {
      "name": "spring.data.rest.sort-param-name",
      "type": "java.lang.String",
      "description": "Name of the URL query string parameter that indicates what direction to sort\n results.",
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties"
    },
    {
      "name": "spring.data.solr.host",
      "type": "java.lang.String",
      "description": "Solr host. Ignored if \"zk-host\" is set.",
      "sourceType": "org.springframework.boot.autoconfigure.solr.SolrProperties",
      "defaultValue": "http://127.0.0.1:8983/solr"
    },
    {
      "name": "spring.data.solr.repositories.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable Solr repositories.",
      "defaultValue": true
    },
    {
      "name": "spring.data.solr.zk-host",
      "type": "java.lang.String",
      "description": "ZooKeeper host address in the form HOST:PORT.",
      "sourceType": "org.springframework.boot.autoconfigure.solr.SolrProperties"
    },
    {
      "name": "spring.data.web.pageable.default-page-size",
      "type": "java.lang.Integer",
      "description": "Default page size.",
      "sourceType": "org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties$Pageable",
      "defaultValue": 20
    },
    {
      "name": "spring.data.web.pageable.max-page-size",
      "type": "java.lang.Integer",
      "description": "Maximum page size to be accepted.",
      "sourceType": "org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties$Pageable",
      "defaultValue": 2000
    },
    {
      "name": "spring.data.web.pageable.one-indexed-parameters",
      "type": "java.lang.Boolean",
      "description": "Whether to expose and assume 1-based page number indexes. Defaults to \"false\",\n meaning a page number of 0 in the request equals the first page.",
      "sourceType": "org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties$Pageable",
      "defaultValue": false
    },
    {
      "name": "spring.data.web.pageable.page-parameter",
      "type": "java.lang.String",
      "description": "Page index parameter name.",
      "sourceType": "org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties$Pageable",
      "defaultValue": "page"
    },
    {
      "name": "spring.data.web.pageable.prefix",
      "type": "java.lang.String",
      "description": "General prefix to be prepended to the page number and page size parameters.",
      "sourceType": "org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties$Pageable",
      "defaultValue": ""
    },
    {
      "name": "spring.data.web.pageable.qualifier-delimiter",
      "type": "java.lang.String",
      "description": "Delimiter to be used between the qualifier and the actual page number and size\n properties.",
      "sourceType": "org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties$Pageable",
      "defaultValue": "_"
    },
    {
      "name": "spring.data.web.pageable.size-parameter",
      "type": "java.lang.String",
      "description": "Page size parameter name.",
      "sourceType": "org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties$Pageable",
      "defaultValue": "size"
    },
    {
      "name": "spring.data.web.sort.sort-parameter",
      "type": "java.lang.String",
      "description": "Sort parameter name.",
      "sourceType": "org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties$Sort",
      "defaultValue": "sort"
    },
    {
      "name": "spring.datasource.continue-on-error",
      "type": "java.lang.Boolean",
      "description": "Whether to stop if an error occurs while initializing the database.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "defaultValue": false
    },
    {
      "name": "spring.datasource.data",
      "type": "java.util.List<java.lang.String>",
      "description": "Data (DML) script resource references.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.data-password",
      "type": "java.lang.String",
      "description": "Password of the database to execute DML scripts (if different).",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.data-username",
      "type": "java.lang.String",
      "description": "Username of the database to execute DML scripts (if different).",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.dbcp2.abandoned-usage-tracking",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.access-to-underlying-connection-allowed",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.cache-state",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.connection-init-sqls",
      "type": "java.util.List<java.lang.String>",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.default-auto-commit",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.default-catalog",
      "type": "java.lang.String",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.default-query-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.default-read-only",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.default-transaction-isolation",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.disconnection-sql-codes",
      "type": "java.util.Set<java.lang.String>",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.driver",
      "type": "java.sql.Driver",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.driver-class-name",
      "type": "java.lang.String",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.enable-auto-commit-on-return",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.eviction-policy-class-name",
      "type": "java.lang.String",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.fast-fail-validation",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.initial-size",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.jmx-name",
      "type": "java.lang.String",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.lifo",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.log-abandoned",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.log-expired-connections",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.login-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.max-conn-lifetime-millis",
      "type": "java.lang.Long",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.max-idle",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.max-open-prepared-statements",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.max-total",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.max-wait-millis",
      "type": "java.lang.Long",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.min-evictable-idle-time-millis",
      "type": "java.lang.Long",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.min-idle",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.num-tests-per-eviction-run",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.password",
      "type": "java.lang.String",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.pool-prepared-statements",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.remove-abandoned-on-borrow",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.remove-abandoned-on-maintenance",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.remove-abandoned-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.rollback-on-return",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.soft-min-evictable-idle-time-millis",
      "type": "java.lang.Long",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.test-on-borrow",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.test-on-create",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.test-on-return",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.test-while-idle",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.time-between-eviction-runs-millis",
      "type": "java.lang.Long",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.url",
      "type": "java.lang.String",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.username",
      "type": "java.lang.String",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.validation-query",
      "type": "java.lang.String",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.validation-query-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.driver-class-name",
      "type": "java.lang.String",
      "description": "Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.generate-unique-name",
      "type": "java.lang.Boolean",
      "description": "Whether to generate a random datasource name.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "defaultValue": false
    },
    {
      "name": "spring.datasource.hikari.allow-pool-suspension",
      "type": "java.lang.Boolean",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.auto-commit",
      "type": "java.lang.Boolean",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.catalog",
      "type": "java.lang.String",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.connection-init-sql",
      "type": "java.lang.String",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.connection-test-query",
      "type": "java.lang.String",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.connection-timeout",
      "type": "java.lang.Long",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.data-source-class-name",
      "type": "java.lang.String",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.data-source-j-n-d-i",
      "type": "java.lang.String",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.data-source-properties",
      "type": "java.util.Properties",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.driver-class-name",
      "type": "java.lang.String",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.health-check-properties",
      "type": "java.util.Properties",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.health-check-registry",
      "type": "java.lang.Object",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.idle-timeout",
      "type": "java.lang.Long",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.initialization-fail-fast",
      "type": "java.lang.Boolean",
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.datasource.hikari.initialization-fail-timeout",
      "type": "java.lang.Long",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.isolate-internal-queries",
      "type": "java.lang.Boolean",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.jdbc-url",
      "type": "java.lang.String",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.jdbc4-connection-test",
      "type": "java.lang.Boolean",
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.datasource.hikari.leak-detection-threshold",
      "type": "java.lang.Long",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.login-timeout",
      "type": "java.lang.Integer",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.max-lifetime",
      "type": "java.lang.Long",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.maximum-pool-size",
      "type": "java.lang.Integer",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.metric-registry",
      "type": "java.lang.Object",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.metrics-tracker-factory",
      "type": "com.zaxxer.hikari.metrics.MetricsTrackerFactory",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.minimum-idle",
      "type": "java.lang.Integer",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.password",
      "type": "java.lang.String",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.pool-name",
      "type": "java.lang.String",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.read-only",
      "type": "java.lang.Boolean",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.register-mbeans",
      "type": "java.lang.Boolean",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.scheduled-executor",
      "type": "java.util.concurrent.ScheduledExecutorService",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.scheduled-executor-service",
      "type": "java.util.concurrent.ScheduledThreadPoolExecutor",
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.datasource.hikari.schema",
      "type": "java.lang.String",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.transaction-isolation",
      "type": "java.lang.String",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.username",
      "type": "java.lang.String",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.validation-timeout",
      "type": "java.lang.Long",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.initialization-mode",
      "type": "org.springframework.boot.jdbc.DataSourceInitializationMode",
      "description": "Initialize the datasource with available DDL and DML scripts.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "defaultValue": "embedded"
    },
    {
      "name": "spring.datasource.initialize",
      "defaultValue": true,
      "deprecated": true,
      "deprecation": {"replacement": "spring.datasource.initialization-mode"}
    },
    {
      "name": "spring.datasource.jmx-enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable JMX support (if provided by the underlying pool).",
      "defaultValue": false
    },
    {
      "name": "spring.datasource.jndi-name",
      "type": "java.lang.String",
      "description": "JNDI location of the datasource. Class, url, username & password are ignored when\n set.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.name",
      "type": "java.lang.String",
      "description": "Name of the datasource. Default to \"testdb\" when using an embedded database.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.password",
      "type": "java.lang.String",
      "description": "Login password of the database.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.platform",
      "type": "java.lang.String",
      "description": "Platform to use in the DDL or DML scripts (such as schema-${platform}.sql or\n data-${platform}.sql).",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "defaultValue": "all"
    },
    {
      "name": "spring.datasource.schema",
      "type": "java.util.List<java.lang.String>",
      "description": "Schema (DDL) script resource references.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.schema-password",
      "type": "java.lang.String",
      "description": "Password of the database to execute DDL scripts (if different).",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.schema-username",
      "type": "java.lang.String",
      "description": "Username of the database to execute DDL scripts (if different).",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.separator",
      "type": "java.lang.String",
      "description": "Statement separator in SQL initialization scripts.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "defaultValue": ";"
    },
    {
      "name": "spring.datasource.sql-script-encoding",
      "type": "java.nio.charset.Charset",
      "description": "SQL scripts encoding.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.tomcat.abandon-when-percentage-full",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.access-to-underlying-connection-allowed",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.alternate-username-allowed",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.commit-on-return",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.connection-properties",
      "type": "java.lang.String",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.data-source",
      "type": "java.lang.Object",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.data-source-j-n-d-i",
      "type": "java.lang.String",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.db-properties",
      "type": "java.util.Properties",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.default-auto-commit",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.default-catalog",
      "type": "java.lang.String",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.default-read-only",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.default-transaction-isolation",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.driver-class-name",
      "type": "java.lang.String",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.fair-queue",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.ignore-exception-on-pre-load",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.init-s-q-l",
      "type": "java.lang.String",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.initial-size",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.jdbc-interceptors",
      "type": "java.lang.String",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.jmx-enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.log-abandoned",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.log-validation-errors",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.login-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.max-active",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.max-age",
      "type": "java.lang.Long",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.max-idle",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.max-wait",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.min-evictable-idle-time-millis",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.min-idle",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.name",
      "type": "java.lang.String",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.num-tests-per-eviction-run",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.password",
      "type": "java.lang.String",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.propagate-interrupt-state",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.remove-abandoned",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.remove-abandoned-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.rollback-on-return",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.suspect-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.test-on-borrow",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.test-on-connect",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.test-on-return",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.test-while-idle",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.time-between-eviction-runs-millis",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.url",
      "type": "java.lang.String",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.use-disposable-connection-facade",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.use-equals",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.use-lock",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.use-statement-facade",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.username",
      "type": "java.lang.String",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.validation-interval",
      "type": "java.lang.Long",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.validation-query",
      "type": "java.lang.String",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.validation-query-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.validator-class-name",
      "type": "java.lang.String",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.type",
      "type": "java.lang.Class<? extends javax.sql.DataSource>",
      "description": "Fully qualified name of the connection pool implementation to use. By default, it\n is auto-detected from the classpath.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.url",
      "type": "java.lang.String",
      "description": "JDBC URL of the database.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.username",
      "type": "java.lang.String",
      "description": "Login username of the database.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.xa.data-source-class-name",
      "type": "java.lang.String",
      "description": "XA datasource fully qualified name.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties$Xa"
    },
    {
      "name": "spring.datasource.xa.properties",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Properties to pass to the XA data source.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties$Xa"
    },
    {
      "name": "spring.elasticsearch.jest.connection-timeout",
      "type": "java.time.Duration",
      "description": "Connection timeout.",
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties",
      "defaultValue": "3s"
    },
    {
      "name": "spring.elasticsearch.jest.multi-threaded",
      "type": "java.lang.Boolean",
      "description": "Whether to enable connection requests from multiple execution threads.",
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties",
      "defaultValue": true
    },
    {
      "name": "spring.elasticsearch.jest.password",
      "type": "java.lang.String",
      "description": "Login password.",
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties"
    },
    {
      "name": "spring.elasticsearch.jest.proxy.host",
      "type": "java.lang.String",
      "description": "Proxy host the HTTP client should use.",
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties$Proxy"
    },
    {
      "name": "spring.elasticsearch.jest.proxy.port",
      "type": "java.lang.Integer",
      "description": "Proxy port the HTTP client should use.",
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties$Proxy"
    },
    {
      "name": "spring.elasticsearch.jest.read-timeout",
      "type": "java.time.Duration",
      "description": "Read timeout.",
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties",
      "defaultValue": "3s"
    },
    {
      "name": "spring.elasticsearch.jest.uris",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of the Elasticsearch instances to use.",
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties",
      "defaultValue": ["http://localhost:9200"]
    },
    {
      "name": "spring.elasticsearch.jest.username",
      "type": "java.lang.String",
      "description": "Login username.",
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties"
    },
    {
      "name": "spring.flyway.baseline-description",
      "type": "java.lang.String",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "spring.flyway.baseline-on-migrate",
      "type": "java.lang.Boolean",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "spring.flyway.baseline-version",
      "type": "org.flywaydb.core.api.MigrationVersion",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "spring.flyway.check-location",
      "type": "java.lang.Boolean",
      "description": "Whether to check that migration scripts location exists.",
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayProperties",
      "defaultValue": true
    },
    {
      "name": "spring.flyway.clean-disabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "spring.flyway.clean-on-validation-error",
      "type": "java.lang.Boolean",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "spring.flyway.dry-run-output",
      "type": "java.io.OutputStream",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "spring.flyway.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable flyway.",
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayProperties",
      "defaultValue": true
    },
    {
      "name": "spring.flyway.encoding",
      "type": "java.lang.String",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "spring.flyway.error-handlers",
      "type": "org.flywaydb.core.api.errorhandler.ErrorHandler[]",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "spring.flyway.group",
      "type": "java.lang.Boolean",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "spring.flyway.ignore-future-migrations",
      "type": "java.lang.Boolean",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "spring.flyway.ignore-missing-migrations",
      "type": "java.lang.Boolean",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "spring.flyway.init-sqls",
      "type": "java.util.List<java.lang.String>",
      "description": "SQL statements to execute to initialize a connection immediately after obtaining\n it.",
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayProperties"
    },
    {
      "name": "spring.flyway.installed-by",
      "type": "java.lang.String",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "spring.flyway.locations",
      "type": "java.lang.String[]",
      "description": "The locations of migrations scripts. Can contain the special \"{vendor}\" placeholder\n to use vendor-specific locations.",
      "sourceType": "org.flywaydb.core.Flyway",
      "defaultValue": ["classpath:db/migration"]
    },
    {
      "name": "spring.flyway.mixed",
      "type": "java.lang.Boolean",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "spring.flyway.out-of-order",
      "type": "java.lang.Boolean",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "spring.flyway.password",
      "type": "java.lang.String",
      "description": "JDBC password to use if you want Flyway to create its own DataSource.",
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayProperties"
    },
    {
      "name": "spring.flyway.placeholder-prefix",
      "type": "java.lang.String",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "spring.flyway.placeholder-replacement",
      "type": "java.lang.Boolean",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "spring.flyway.placeholder-suffix",
      "type": "java.lang.String",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "spring.flyway.placeholders",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "spring.flyway.repeatable-sql-migration-prefix",
      "type": "java.lang.String",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "spring.flyway.schemas",
      "type": "java.lang.String[]",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "spring.flyway.skip-default-callbacks",
      "type": "java.lang.Boolean",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "spring.flyway.skip-default-resolvers",
      "type": "java.lang.Boolean",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "spring.flyway.sql-migration-prefix",
      "type": "java.lang.String",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "spring.flyway.sql-migration-separator",
      "type": "java.lang.String",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "spring.flyway.sql-migration-suffix",
      "type": "java.lang.String",
      "sourceType": "org.flywaydb.core.Flyway",
      "deprecated": true,
      "deprecation": {"replacement": "spring.flyway.sql-migration-suffixes"}
    },
    {
      "name": "spring.flyway.sql-migration-suffixes",
      "type": "java.lang.String[]",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "spring.flyway.table",
      "type": "java.lang.String",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "spring.flyway.target",
      "type": "org.flywaydb.core.api.MigrationVersion",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "spring.flyway.undo-sql-migration-prefix",
      "type": "java.lang.String",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "spring.flyway.url",
      "type": "java.lang.String",
      "description": "JDBC url of the database to migrate. If not set, the primary configured data source\n is used.",
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayProperties"
    },
    {
      "name": "spring.flyway.user",
      "type": "java.lang.String",
      "description": "Login user of the database to migrate.",
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayProperties"
    },
    {
      "name": "spring.flyway.validate-on-migrate",
      "type": "java.lang.Boolean",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "spring.freemarker.allow-request-override",
      "type": "java.lang.Boolean",
      "description": "Whether HttpServletRequest attributes are allowed to override (hide) controller\n generated model attributes of the same name.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": false
    },
    {
      "name": "spring.freemarker.allow-session-override",
      "type": "java.lang.Boolean",
      "description": "Whether HttpSession attributes are allowed to override (hide) controller generated\n model attributes of the same name.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": false
    },
    {
      "name": "spring.freemarker.cache",
      "type": "java.lang.Boolean",
      "description": "Whether to enable template caching.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": false
    },
    {
      "name": "spring.freemarker.charset",
      "type": "java.nio.charset.Charset",
      "description": "Template encoding.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": "UTF-8"
    },
    {
      "name": "spring.freemarker.check-template-location",
      "type": "java.lang.Boolean",
      "description": "Whether to check that the templates location exists.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": true
    },
    {
      "name": "spring.freemarker.content-type",
      "type": "org.springframework.util.MimeType",
      "description": "Content-Type value.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": "text/html"
    },
    {
      "name": "spring.freemarker.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable MVC view resolution for this technology.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": true
    },
    {
      "name": "spring.freemarker.expose-request-attributes",
      "type": "java.lang.Boolean",
      "description": "Whether all request attributes should be added to the model prior to merging with\n the template.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": false
    },
    {
      "name": "spring.freemarker.expose-session-attributes",
      "type": "java.lang.Boolean",
      "description": "Whether all HttpSession attributes should be added to the model prior to merging\n with the template.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": false
    },
    {
      "name": "spring.freemarker.expose-spring-macro-helpers",
      "type": "java.lang.Boolean",
      "description": "Whether to expose a RequestContext for use by Spring's macro library, under the\n name \"springMacroRequestContext\".",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": true
    },
    {
      "name": "spring.freemarker.prefer-file-system-access",
      "type": "java.lang.Boolean",
      "description": "Whether to prefer file system access for template loading. File system access\n enables hot detection of template changes.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": true
    },
    {
      "name": "spring.freemarker.prefix",
      "type": "java.lang.String",
      "description": "Prefix that gets prepended to view names when building a URL.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": ""
    },
    {
      "name": "spring.freemarker.request-context-attribute",
      "type": "java.lang.String",
      "description": "Name of the RequestContext attribute for all views.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties"
    },
    {
      "name": "spring.freemarker.settings",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Well-known FreeMarker keys which are passed to FreeMarker's Configuration.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties"
    },
    {
      "name": "spring.freemarker.suffix",
      "type": "java.lang.String",
      "description": "Suffix that gets appended to view names when building a URL.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": ".ftl"
    },
    {
      "name": "spring.freemarker.template-loader-path",
      "type": "java.lang.String[]",
      "description": "Comma-separated list of template paths.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": ["classpath:/templates/"]
    },
    {
      "name": "spring.freemarker.view-names",
      "type": "java.lang.String[]",
      "description": "White list of view names that can be resolved.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties"
    },
    {
      "name": "spring.git.properties",
      "type": "java.lang.String",
      "description": "Resource reference to a generated git info properties file.",
      "deprecated": true,
      "deprecation": {"replacement": "spring.info.git.location"}
    },
    {
      "name": "spring.groovy.template.allow-request-override",
      "type": "java.lang.Boolean",
      "description": "Whether HttpServletRequest attributes are allowed to override (hide) controller\n generated model attributes of the same name.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": false
    },
    {
      "name": "spring.groovy.template.allow-session-override",
      "type": "java.lang.Boolean",
      "description": "Whether HttpSession attributes are allowed to override (hide) controller generated\n model attributes of the same name.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": false
    },
    {
      "name": "spring.groovy.template.cache",
      "type": "java.lang.Boolean",
      "description": "Whether to enable template caching.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": false
    },
    {
      "name": "spring.groovy.template.charset",
      "type": "java.nio.charset.Charset",
      "description": "Template encoding.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": "UTF-8"
    },
    {
      "name": "spring.groovy.template.check-template-location",
      "type": "java.lang.Boolean",
      "description": "Whether to check that the templates location exists.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": true
    },
    {
      "name": "spring.groovy.template.configuration.auto-escape",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"
    },
    {
      "name": "spring.groovy.template.configuration.auto-indent",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"
    },
    {
      "name": "spring.groovy.template.configuration.auto-indent-string",
      "type": "java.lang.String",
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"
    },
    {
      "name": "spring.groovy.template.configuration.auto-new-line",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"
    },
    {
      "name": "spring.groovy.template.configuration.base-template-class",
      "type": "java.lang.Class<? extends groovy.text.markup.BaseTemplate>",
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"
    },
    {
      "name": "spring.groovy.template.configuration.cache-templates",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"
    },
    {
      "name": "spring.groovy.template.configuration.declaration-encoding",
      "type": "java.lang.String",
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"
    },
    {
      "name": "spring.groovy.template.configuration.expand-empty-elements",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"
    },
    {
      "name": "spring.groovy.template.configuration.locale",
      "type": "java.util.Locale",
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"
    },
    {
      "name": "spring.groovy.template.configuration.new-line-string",
      "type": "java.lang.String",
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"
    },
    {
      "name": "spring.groovy.template.configuration.resource-loader-path",
      "type": "java.lang.String",
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"
    },
    {
      "name": "spring.groovy.template.configuration.use-double-quotes",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"
    },
    {
      "name": "spring.groovy.template.content-type",
      "type": "org.springframework.util.MimeType",
      "description": "Content-Type value.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": "text/html"
    },
    {
      "name": "spring.groovy.template.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable MVC view resolution for this technology.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": true
    },
    {
      "name": "spring.groovy.template.expose-request-attributes",
      "type": "java.lang.Boolean",
      "description": "Whether all request attributes should be added to the model prior to merging with\n the template.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": false
    },
    {
      "name": "spring.groovy.template.expose-session-attributes",
      "type": "java.lang.Boolean",
      "description": "Whether all HttpSession attributes should be added to the model prior to merging\n with the template.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": false
    },
    {
      "name": "spring.groovy.template.expose-spring-macro-helpers",
      "type": "java.lang.Boolean",
      "description": "Whether to expose a RequestContext for use by Spring's macro library, under the\n name \"springMacroRequestContext\".",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": true
    },
    {
      "name": "spring.groovy.template.prefix",
      "type": "java.lang.String",
      "description": "Prefix that gets prepended to view names when building a URL.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": ""
    },
    {
      "name": "spring.groovy.template.request-context-attribute",
      "type": "java.lang.String",
      "description": "Name of the RequestContext attribute for all views.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties"
    },
    {
      "name": "spring.groovy.template.resource-loader-path",
      "type": "java.lang.String",
      "description": "Template path.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": "classpath:/templates/"
    },
    {
      "name": "spring.groovy.template.suffix",
      "type": "java.lang.String",
      "description": "Suffix that gets appended to view names when building a URL.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": ".tpl"
    },
    {
      "name": "spring.groovy.template.view-names",
      "type": "java.lang.String[]",
      "description": "White list of view names that can be resolved.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties"
    },
    {
      "name": "spring.gson.date-format",
      "type": "java.lang.String",
      "description": "Format to use when serializing Date objects.",
      "sourceType": "org.springframework.boot.autoconfigure.gson.GsonProperties"
    },
    {
      "name": "spring.gson.disable-html-escaping",
      "type": "java.lang.Boolean",
      "description": "Whether to disable the escaping of HTML characters such as '<', '>', etc.",
      "sourceType": "org.springframework.boot.autoconfigure.gson.GsonProperties"
    },
    {
      "name": "spring.gson.disable-inner-class-serialization",
      "type": "java.lang.Boolean",
      "description": "Whether to exclude inner classes during serialization.",
      "sourceType": "org.springframework.boot.autoconfigure.gson.GsonProperties"
    },
    {
      "name": "spring.gson.enable-complex-map-key-serialization",
      "type": "java.lang.Boolean",
      "description": "Whether to enable serialization of complex map keys (i.e. non-primitives).",
      "sourceType": "org.springframework.boot.autoconfigure.gson.GsonProperties"
    },
    {
      "name": "spring.gson.exclude-fields-without-expose-annotation",
      "type": "java.lang.Boolean",
      "description": "Whether to exclude all fields from consideration for serialization or\n deserialization that do not have the \"Expose\" annotation.",
      "sourceType": "org.springframework.boot.autoconfigure.gson.GsonProperties"
    },
    {
      "name": "spring.gson.field-naming-policy",
      "type": "com.google.gson.FieldNamingPolicy",
      "description": "Naming policy that should be applied to an object's field during serialization and\n deserialization.",
      "sourceType": "org.springframework.boot.autoconfigure.gson.GsonProperties"
    },
    {
      "name": "spring.gson.generate-non-executable-json",
      "type": "java.lang.Boolean",
      "description": "Whether to generate non executable JSON by prefixing the output with some special\n text.",
      "sourceType": "org.springframework.boot.autoconfigure.gson.GsonProperties"
    },
    {
      "name": "spring.gson.lenient",
      "type": "java.lang.Boolean",
      "description": "Whether to be lenient about parsing JSON that doesn't conform to RFC 4627.",
      "sourceType": "org.springframework.boot.autoconfigure.gson.GsonProperties"
    },
    {
      "name": "spring.gson.long-serialization-policy",
      "type": "com.google.gson.LongSerializationPolicy",
      "description": "Serialization policy for Long and long types.",
      "sourceType": "org.springframework.boot.autoconfigure.gson.GsonProperties"
    },
    {
      "name": "spring.gson.pretty-printing",
      "type": "java.lang.Boolean",
      "description": "Whether to output serialized JSON that fits in a page for pretty printing.",
      "sourceType": "org.springframework.boot.autoconfigure.gson.GsonProperties"
    },
    {
      "name": "spring.gson.serialize-nulls",
      "type": "java.lang.Boolean",
      "description": "Whether to serialize null fields.",
      "sourceType": "org.springframework.boot.autoconfigure.gson.GsonProperties"
    },
    {
      "name": "spring.h2.console.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable the console.",
      "sourceType": "org.springframework.boot.autoconfigure.h2.H2ConsoleProperties",
      "defaultValue": false
    },
    {
      "name": "spring.h2.console.path",
      "type": "java.lang.String",
      "description": "Path at which the console is available.",
      "sourceType": "org.springframework.boot.autoconfigure.h2.H2ConsoleProperties",
      "defaultValue": "/h2-console"
    },
    {
      "name": "spring.h2.console.settings.trace",
      "type": "java.lang.Boolean",
      "description": "Whether to enable trace output.",
      "sourceType": "org.springframework.boot.autoconfigure.h2.H2ConsoleProperties$Settings",
      "defaultValue": false
    },
    {
      "name": "spring.h2.console.settings.web-allow-others",
      "type": "java.lang.Boolean",
      "description": "Whether to enable remote access.",
      "sourceType": "org.springframework.boot.autoconfigure.h2.H2ConsoleProperties$Settings",
      "defaultValue": false
    },
    {
      "name": "spring.hateoas.use-hal-as-default-json-media-type",
      "type": "java.lang.Boolean",
      "description": "Whether application/hal+json responses should be sent to requests that accept\n application/json.",
      "sourceType": "org.springframework.boot.autoconfigure.hateoas.HateoasProperties",
      "defaultValue": true
    },
    {
      "name": "spring.hazelcast.config",
      "type": "org.springframework.core.io.Resource",
      "description": "The location of the configuration file to use to initialize Hazelcast.",
      "sourceType": "org.springframework.boot.autoconfigure.hazelcast.HazelcastProperties"
    },
    {
      "name": "spring.http.converters.preferred-json-mapper",
      "type": "java.lang.String",
      "description": "Preferred JSON mapper to use for HTTP message conversion. By default, auto-detected according to the environment."
    },
    {
      "name": "spring.http.encoding.charset",
      "type": "java.nio.charset.Charset",
      "description": "Charset of HTTP requests and responses. Added to the \"Content-Type\" header if not\n set explicitly.",
      "sourceType": "org.springframework.boot.autoconfigure.http.HttpEncodingProperties",
      "defaultValue": "UTF-8"
    },
    {
      "name": "spring.http.encoding.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable http encoding support.",
      "defaultValue": true
    },
    {
      "name": "spring.http.encoding.force",
      "type": "java.lang.Boolean",
      "description": "Whether to force the encoding to the configured charset on HTTP requests and\n responses.",
      "sourceType": "org.springframework.boot.autoconfigure.http.HttpEncodingProperties"
    },
    {
      "name": "spring.http.encoding.force-request",
      "type": "java.lang.Boolean",
      "description": "Whether to force the encoding to the configured charset on HTTP requests. Defaults\n to true when \"force\" has not been specified.",
      "sourceType": "org.springframework.boot.autoconfigure.http.HttpEncodingProperties"
    },
    {
      "name": "spring.http.encoding.force-response",
      "type": "java.lang.Boolean",
      "description": "Whether to force the encoding to the configured charset on HTTP responses.",
      "sourceType": "org.springframework.boot.autoconfigure.http.HttpEncodingProperties"
    },
    {
      "name": "spring.http.encoding.mapping",
      "type": "java.util.Map<java.util.Locale,java.nio.charset.Charset>",
      "description": "Locale in which to encode mapping.",
      "sourceType": "org.springframework.boot.autoconfigure.http.HttpEncodingProperties"
    },
    {
      "name": "spring.http.multipart.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable support of multipart uploads.",
      "defaultValue": true,
      "deprecated": true,
      "deprecation": {"replacement": "spring.servlet.multipart.enabled"}
    },
    {
      "name": "spring.http.multipart.file-size-threshold",
      "type": "java.lang.String",
      "description": "Threshold after which files will be written to disk. Values can use the suffixes\n \"MB\" or \"KB\" to indicate megabytes or kilobytes respectively.",
      "defaultValue": "0",
      "deprecated": true,
      "deprecation": {"replacement": "spring.servlet.multipart.file-size-threshold"}
    },
    {
      "name": "spring.http.multipart.location",
      "type": "java.lang.String",
      "description": "Intermediate location of uploaded files.",
      "deprecated": true,
      "deprecation": {"replacement": "spring.servlet.multipart.location"}
    },
    {
      "name": "spring.http.multipart.max-file-size",
      "type": "java.lang.String",
      "description": "Max file size. Values can use the suffixes \"MB\" or \"KB\" to indicate megabytes or\n kilobytes respectively.",
      "defaultValue": "1MB",
      "deprecated": true,
      "deprecation": {"replacement": "spring.servlet.multipart.max-file-size"}
    },
    {
      "name": "spring.http.multipart.max-request-size",
      "type": "java.lang.String",
      "description": "Max request size. Values can use the suffixes \"MB\" or \"KB\" to indicate megabytes or\n kilobytes respectively.",
      "defaultValue": "10MB",
      "deprecated": true,
      "deprecation": {"replacement": "spring.servlet.multipart.max-request-size"}
    },
    {
      "name": "spring.http.multipart.resolve-lazily",
      "type": "java.lang.Boolean",
      "description": "Whether to resolve the multipart request lazily at the time of file or parameter\n access.",
      "defaultValue": false,
      "deprecated": true,
      "deprecation": {"replacement": "spring.servlet.multipart.resolve-lazily"}
    },
    {
      "name": "spring.influx.password",
      "type": "java.lang.String",
      "description": "Login password.",
      "sourceType": "org.springframework.boot.autoconfigure.influx.InfluxDbProperties"
    },
    {
      "name": "spring.influx.url",
      "type": "java.lang.String",
      "description": "URL of the InfluxDB instance to which to connect.",
      "sourceType": "org.springframework.boot.autoconfigure.influx.InfluxDbProperties"
    },
    {
      "name": "spring.influx.user",
      "type": "java.lang.String",
      "description": "Login user.",
      "sourceType": "org.springframework.boot.autoconfigure.influx.InfluxDbProperties"
    },
    {
      "name": "spring.info.build.location",
      "type": "org.springframework.core.io.Resource",
      "description": "Location of the generated build-info.properties file.",
      "sourceType": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties$Build",
      "defaultValue": "classpath:META-INF/build-info.properties"
    },
    {
      "name": "spring.info.git.location",
      "type": "org.springframework.core.io.Resource",
      "description": "Location of the generated git.properties file.",
      "sourceType": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties$Git",
      "defaultValue": "classpath:git.properties"
    },
    {
      "name": "spring.integration.jdbc.initialize-schema",
      "type": "org.springframework.boot.jdbc.DataSourceInitializationMode",
      "description": "Database schema initialization mode.",
      "sourceType": "org.springframework.boot.autoconfigure.integration.IntegrationProperties$Jdbc",
      "defaultValue": "embedded"
    },
    {
      "name": "spring.integration.jdbc.schema",
      "type": "java.lang.String",
      "description": "Path to the SQL file to use to initialize the database schema.",
      "sourceType": "org.springframework.boot.autoconfigure.integration.IntegrationProperties$Jdbc",
      "defaultValue": "classpath:org/springframework/integration/jdbc/schema-@@platform@@.sql"
    },
    {
      "name": "spring.integration.poller.fixed-delay",
      "type": "java.lang.Long",
      "description": "Fixed delay for default poller.",
      "sourceType": "org.springframework.cloud.stream.config.DefaultPollerProperties",
      "defaultValue": 1000
    },
    {
      "name": "spring.integration.poller.max-messages-per-poll",
      "type": "java.lang.Long",
      "description": "Maximum messages per poll for the default poller.",
      "sourceType": "org.springframework.cloud.stream.config.DefaultPollerProperties",
      "defaultValue": 1
    },
    {
      "name": "spring.jackson.date-format",
      "type": "java.lang.String",
      "description": "Date format string or a fully-qualified date format class name. For instance,\n `yyyy-MM-dd HH:mm:ss`.",
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties"
    },
    {
      "name": "spring.jackson.default-property-inclusion",
      "type": "com.fasterxml.jackson.annotation.JsonInclude$Include",
      "description": "Controls the inclusion of properties during serialization. Configured with one of\n the values in Jackson's JsonInclude.Include enumeration.",
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties"
    },
    {
      "name": "spring.jackson.deserialization",
      "type": "java.util.Map<com.fasterxml.jackson.databind.DeserializationFeature,java.lang.Boolean>",
      "description": "Jackson on/off features that affect the way Java objects are deserialized.",
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties"
    },
    {
      "name": "spring.jackson.generator",
      "type": "java.util.Map<com.fasterxml.jackson.core.JsonGenerator.Feature,java.lang.Boolean>",
      "description": "Jackson on/off features for generators.",
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties"
    },
    {
      "name": "spring.jackson.joda-date-time-format",
      "type": "java.lang.String",
      "description": "Joda date time format string. If not configured, \"date-format\" is used as a\n fallback if it is configured with a format string.",
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties"
    },
    {
      "name": "spring.jackson.locale",
      "type": "java.util.Locale",
      "description": "Locale used for formatting.",
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties"
    },
    {
      "name": "spring.jackson.mapper",
      "type": "java.util.Map<com.fasterxml.jackson.databind.MapperFeature,java.lang.Boolean>",
      "description": "Jackson general purpose on/off features.",
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties"
    },
    {
      "name": "spring.jackson.parser",
      "type": "java.util.Map<com.fasterxml.jackson.core.JsonParser.Feature,java.lang.Boolean>",
      "description": "Jackson on/off features for parsers.",
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties"
    },
    {
      "name": "spring.jackson.property-naming-strategy",
      "type": "java.lang.String",
      "description": "One of the constants on Jackson's PropertyNamingStrategy. Can also be a\n fully-qualified class name of a PropertyNamingStrategy subclass.",
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties"
    },
    {
      "name": "spring.jackson.serialization",
      "type": "java.util.Map<com.fasterxml.jackson.databind.SerializationFeature,java.lang.Boolean>",
      "description": "Jackson on/off features that affect the way Java objects are serialized.",
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties"
    },
    {
      "name": "spring.jackson.time-zone",
      "type": "java.util.TimeZone",
      "description": "Time zone used when formatting dates. For instance, \"America/Los_Angeles\" or\n \"GMT+10\".",
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties"
    },
    {
      "name": "spring.jdbc.template.fetch-size",
      "type": "java.lang.Integer",
      "description": "Number of rows that should be fetched from the database when more rows are\n needed. Use -1 to use the JDBC driver's default configuration.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.JdbcProperties$Template",
      "defaultValue": -1
    },
    {
      "name": "spring.jdbc.template.max-rows",
      "type": "java.lang.Integer",
      "description": "Maximum number of rows. Use -1 to use the JDBC driver's default configuration.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.JdbcProperties$Template",
      "defaultValue": -1
    },
    {
      "name": "spring.jdbc.template.query-timeout",
      "type": "java.time.Duration",
      "description": "Query timeout. Default is to use the JDBC driver's default configuration. If a\n duration suffix is not specified, seconds will be used.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.JdbcProperties$Template"
    },
    {
      "name": "spring.jersey.application-path",
      "type": "java.lang.String",
      "description": "Path that serves as the base URI for the application. If specified, overrides the\n value of \"@ApplicationPath\".",
      "sourceType": "org.springframework.boot.autoconfigure.jersey.JerseyProperties"
    },
    {
      "name": "spring.jersey.filter.order",
      "type": "java.lang.Integer",
      "description": "Jersey filter chain order.",
      "sourceType": "org.springframework.boot.autoconfigure.jersey.JerseyProperties$Filter",
      "defaultValue": 0
    },
    {
      "name": "spring.jersey.init",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Init parameters to pass to Jersey through the servlet or filter.",
      "sourceType": "org.springframework.boot.autoconfigure.jersey.JerseyProperties"
    },
    {
      "name": "spring.jersey.servlet.load-on-startup",
      "type": "java.lang.Integer",
      "description": "Load on startup priority of the Jersey servlet.",
      "sourceType": "org.springframework.boot.autoconfigure.jersey.JerseyProperties$Servlet",
      "defaultValue": -1
    },
    {
      "name": "spring.jersey.type",
      "type": "org.springframework.boot.autoconfigure.jersey.JerseyProperties$Type",
      "description": "Jersey integration type.",
      "sourceType": "org.springframework.boot.autoconfigure.jersey.JerseyProperties",
      "defaultValue": "servlet"
    },
    {
      "name": "spring.jms.jndi-name",
      "type": "java.lang.String",
      "description": "Connection factory JNDI name. When set, takes precedence to others connection\n factory auto-configurations.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties"
    },
    {
      "name": "spring.jms.listener.acknowledge-mode",
      "type": "org.springframework.boot.autoconfigure.jms.JmsProperties$AcknowledgeMode",
      "description": "Acknowledge mode of the container. By default, the listener is transacted with\n automatic acknowledgment.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Listener"
    },
    {
      "name": "spring.jms.listener.auto-startup",
      "type": "java.lang.Boolean",
      "description": "Start the container automatically on startup.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Listener",
      "defaultValue": true
    },
    {
      "name": "spring.jms.listener.concurrency",
      "type": "java.lang.Integer",
      "description": "Minimum number of concurrent consumers.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Listener"
    },
    {
      "name": "spring.jms.listener.max-concurrency",
      "type": "java.lang.Integer",
      "description": "Maximum number of concurrent consumers.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Listener"
    },
    {
      "name": "spring.jms.pub-sub-domain",
      "type": "java.lang.Boolean",
      "description": "Whether the default destination type is topic.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties",
      "defaultValue": false
    },
    {
      "name": "spring.jms.template.default-destination",
      "type": "java.lang.String",
      "description": "Default destination to use on send and receive operations that do not have a\n destination parameter.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Template"
    },
    {
      "name": "spring.jms.template.delivery-delay",
      "type": "java.time.Duration",
      "description": "Delivery delay to use for send calls.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Template"
    },
    {
      "name": "spring.jms.template.delivery-mode",
      "type": "org.springframework.boot.autoconfigure.jms.JmsProperties$DeliveryMode",
      "description": "Delivery mode. Enables QoS (Quality of Service) when set.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Template"
    },
    {
      "name": "spring.jms.template.priority",
      "type": "java.lang.Integer",
      "description": "Priority of a message when sending. Enables QoS (Quality of Service) when set.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Template"
    },
    {
      "name": "spring.jms.template.qos-enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable explicit QoS (Quality of Service) when sending a message.\n When enabled, the delivery mode, priority and time-to-live properties will be\n used when sending a message. QoS is automatically enabled when at least one of\n those settings is customized.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Template"
    },
    {
      "name": "spring.jms.template.receive-timeout",
      "type": "java.time.Duration",
      "description": "Timeout to use for receive calls.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Template"
    },
    {
      "name": "spring.jms.template.time-to-live",
      "type": "java.time.Duration",
      "description": "Time-to-live of a message when sending. Enables QoS (Quality of Service) when\n set.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Template"
    },
    {
      "name": "spring.jmx.default-domain",
      "type": "java.lang.String",
      "description": "JMX domain name."
    },
    {
      "name": "spring.jmx.enabled",
      "type": "java.lang.Boolean",
      "description": "Expose management beans to the JMX domain.",
      "defaultValue": true
    },
    {
      "name": "spring.jmx.server",
      "type": "java.lang.String",
      "description": "MBeanServer bean name.",
      "defaultValue": "mbeanServer"
    },
    {
      "name": "spring.jooq.sql-dialect",
      "type": "org.jooq.SQLDialect",
      "description": "SQL dialect to use. Auto-detected by default.",
      "sourceType": "org.springframework.boot.autoconfigure.jooq.JooqProperties"
    },
    {
      "name": "spring.jpa.database",
      "type": "org.springframework.orm.jpa.vendor.Database",
      "description": "Target database to operate on, auto-detected by default. Can be alternatively set\n using the \"databasePlatform\" property.",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties"
    },
    {
      "name": "spring.jpa.database-platform",
      "type": "java.lang.String",
      "description": "Name of the target database to operate on, auto-detected by default. Can be\n alternatively set using the \"Database\" enum.",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties"
    },
    {
      "name": "spring.jpa.generate-ddl",
      "type": "java.lang.Boolean",
      "description": "Whether to initialize the schema on startup.",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties",
      "defaultValue": false
    },
    {
      "name": "spring.jpa.hibernate.ddl-auto",
      "type": "java.lang.String",
      "description": "DDL mode. This is actually a shortcut for the \"hibernate.hbm2ddl.auto\"\n property. Defaults to \"create-drop\" when using an embedded database and no\n schema manager was detected. Otherwise, defaults to \"none\".",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Hibernate"
    },
    {
      "name": "spring.jpa.hibernate.naming.implicit-strategy",
      "type": "java.lang.String",
      "description": "Fully qualified name of the implicit naming strategy.",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Naming"
    },
    {
      "name": "spring.jpa.hibernate.naming.physical-strategy",
      "type": "java.lang.String",
      "description": "Fully qualified name of the physical naming strategy.",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Naming"
    },
    {
      "name": "spring.jpa.hibernate.naming.strategy",
      "type": "java.lang.String",
      "description": "Hibernate 4 naming strategy fully qualified name. Not supported with Hibernate\n 5.",
      "deprecated": true,
      "deprecation": {"reason": "Auto-configuration for Hibernate 4 is no longer provided."}
    },
    {
      "name": "spring.jpa.hibernate.use-new-id-generator-mappings",
      "type": "java.lang.Boolean",
      "description": "Whether to use Hibernate's newer IdentifierGenerator for AUTO, TABLE and\n SEQUENCE. This is actually a shortcut for the\n \"hibernate.id.new_generator_mappings\" property. When not specified will default\n to \"true\".",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Hibernate"
    },
    {
      "name": "spring.jpa.mapping-resources",
      "type": "java.util.List<java.lang.String>",
      "description": "Mapping resources (equivalent to \"mapping-file\" entries in persistence.xml).",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties"
    },
    {
      "name": "spring.jpa.open-in-view",
      "type": "java.lang.Boolean",
      "description": "Register OpenEntityManagerInViewInterceptor. Binds a JPA EntityManager to the\n thread for the entire processing of the request.",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties",
      "defaultValue": true
    },
    {
      "name": "spring.jpa.properties",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Additional native properties to set on the JPA provider.",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties"
    },
    {
      "name": "spring.jpa.show-sql",
      "type": "java.lang.Boolean",
      "description": "Whether to enable logging of SQL statements.",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties",
      "defaultValue": false
    },
    {
      "name": "spring.jta.atomikos.connectionfactory.borrow-connection-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosConnectionFactoryBean"
    },
    {
      "name": "spring.jta.atomikos.connectionfactory.ignore-session-transacted-flag",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosConnectionFactoryBean"
    },
    {
      "name": "spring.jta.atomikos.connectionfactory.local-transaction-mode",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosConnectionFactoryBean"
    },
    {
      "name": "spring.jta.atomikos.connectionfactory.maintenance-interval",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosConnectionFactoryBean"
    },
    {
      "name": "spring.jta.atomikos.connectionfactory.max-idle-time",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosConnectionFactoryBean"
    },
    {
      "name": "spring.jta.atomikos.connectionfactory.max-lifetime",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosConnectionFactoryBean"
    },
    {
      "name": "spring.jta.atomikos.connectionfactory.max-pool-size",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosConnectionFactoryBean"
    },
    {
      "name": "spring.jta.atomikos.connectionfactory.min-pool-size",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosConnectionFactoryBean"
    },
    {
      "name": "spring.jta.atomikos.connectionfactory.reap-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosConnectionFactoryBean"
    },
    {
      "name": "spring.jta.atomikos.connectionfactory.unique-resource-name",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosConnectionFactoryBean"
    },
    {
      "name": "spring.jta.atomikos.connectionfactory.xa-connection-factory-class-name",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosConnectionFactoryBean"
    },
    {
      "name": "spring.jta.atomikos.connectionfactory.xa-properties",
      "type": "java.util.Properties",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosConnectionFactoryBean"
    },
    {
      "name": "spring.jta.atomikos.datasource.borrow-connection-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosDataSourceBean"
    },
    {
      "name": "spring.jta.atomikos.datasource.concurrent-connection-validation",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosDataSourceBean"
    },
    {
      "name": "spring.jta.atomikos.datasource.default-isolation-level",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosDataSourceBean"
    },
    {
      "name": "spring.jta.atomikos.datasource.login-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosDataSourceBean"
    },
    {
      "name": "spring.jta.atomikos.datasource.maintenance-interval",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosDataSourceBean"
    },
    {
      "name": "spring.jta.atomikos.datasource.max-idle-time",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosDataSourceBean"
    },
    {
      "name": "spring.jta.atomikos.datasource.max-lifetime",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosDataSourceBean"
    },
    {
      "name": "spring.jta.atomikos.datasource.max-pool-size",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosDataSourceBean"
    },
    {
      "name": "spring.jta.atomikos.datasource.min-pool-size",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosDataSourceBean"
    },
    {
      "name": "spring.jta.atomikos.datasource.reap-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosDataSourceBean"
    },
    {
      "name": "spring.jta.atomikos.datasource.test-query",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosDataSourceBean"
    },
    {
      "name": "spring.jta.atomikos.datasource.unique-resource-name",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosDataSourceBean"
    },
    {
      "name": "spring.jta.atomikos.datasource.xa-data-source-class-name",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosDataSourceBean"
    },
    {
      "name": "spring.jta.atomikos.datasource.xa-properties",
      "type": "java.util.Properties",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosDataSourceBean"
    },
    {
      "name": "spring.jta.atomikos.properties.allow-sub-transactions",
      "type": "java.lang.Boolean",
      "description": "Specify whether sub-transactions are allowed.",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosProperties",
      "defaultValue": true
    },
    {
      "name": "spring.jta.atomikos.properties.checkpoint-interval",
      "type": "java.lang.Long",
      "description": "Interval between checkpoints, expressed as the number of log writes between two\n checkpoint. A checkpoint reduces the log file size at the expense of adding some\n overhead in the runtime.",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosProperties",
      "defaultValue": 500
    },
    {
      "name": "spring.jta.atomikos.properties.default-jta-timeout",
      "type": "java.time.Duration",
      "description": "Default timeout for JTA transactions.",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosProperties",
      "defaultValue": "10000ms"
    },
    {
      "name": "spring.jta.atomikos.properties.default-max-wait-time-on-shutdown",
      "type": "java.lang.Long",
      "description": "How long should normal shutdown (no-force) wait for transactions to complete.",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosProperties"
    },
    {
      "name": "spring.jta.atomikos.properties.enable-logging",
      "type": "java.lang.Boolean",
      "description": "Whether to enable disk logging.",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosProperties",
      "defaultValue": true
    },
    {
      "name": "spring.jta.atomikos.properties.force-shutdown-on-vm-exit",
      "type": "java.lang.Boolean",
      "description": "Whether a VM shutdown should trigger forced shutdown of the transaction core.",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosProperties",
      "defaultValue": false
    },
    {
      "name": "spring.jta.atomikos.properties.log-base-dir",
      "type": "java.lang.String",
      "description": "Directory in which the log files should be stored. Defaults to the current working\n directory.",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosProperties"
    },
    {
      "name": "spring.jta.atomikos.properties.log-base-name",
      "type": "java.lang.String",
      "description": "Transactions log file base name.",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosProperties",
      "defaultValue": "tmlog"
    },
    {
      "name": "spring.jta.atomikos.properties.max-actives",
      "type": "java.lang.Integer",
      "description": "Maximum number of active transactions.",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosProperties",
      "defaultValue": 50
    },
    {
      "name": "spring.jta.atomikos.properties.max-timeout",
      "type": "java.time.Duration",
      "description": "Maximum timeout that can be allowed for transactions.",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosProperties",
      "defaultValue": "300000ms"
    },
    {
      "name": "spring.jta.atomikos.properties.recovery.delay",
      "type": "java.time.Duration",
      "description": "Delay between two recovery scans.",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosProperties$Recovery",
      "defaultValue": "10000ms"
    },
    {
      "name": "spring.jta.atomikos.properties.recovery.forget-orphaned-log-entries-delay",
      "type": "java.time.Duration",
      "description": "Delay after which recovery can cleanup pending ('orphaned') log entries.",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosProperties$Recovery",
      "defaultValue": "86400000ms"
    },
    {
      "name": "spring.jta.atomikos.properties.recovery.max-retries",
      "type": "java.lang.Integer",
      "description": "Number of retry attempts to commit the transaction before throwing an\n exception.",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosProperties$Recovery",
      "defaultValue": 5
    },
    {
      "name": "spring.jta.atomikos.properties.recovery.retry-interval",
      "type": "java.time.Duration",
      "description": "Delay between retry attempts.",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosProperties$Recovery",
      "defaultValue": "10000ms"
    },
    {
      "name": "spring.jta.atomikos.properties.serial-jta-transactions",
      "type": "java.lang.Boolean",
      "description": "Whether sub-transactions should be joined when possible.",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosProperties",
      "defaultValue": true
    },
    {
      "name": "spring.jta.atomikos.properties.service",
      "type": "java.lang.String",
      "description": "Transaction manager implementation that should be started.",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosProperties"
    },
    {
      "name": "spring.jta.atomikos.properties.threaded-two-phase-commit",
      "type": "java.lang.Boolean",
      "description": "Whether to use different (and concurrent) threads for two-phase commit on the\n participating resources.",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosProperties",
      "defaultValue": false
    },
    {
      "name": "spring.jta.atomikos.properties.transaction-manager-unique-name",
      "type": "java.lang.String",
      "description": "The transaction manager's unique name. Defaults to the machine's IP address. If you\n plan to run more than one transaction manager against one database you must set\n this property to a unique value.",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosProperties"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.acquire-increment",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.acquisition-interval",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.acquisition-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.allow-local-transactions",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.apply-transaction-timeout",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.automatic-enlisting-enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.cache-producers-consumers",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.class-name",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.defer-connection-release",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.disabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.driver-properties",
      "type": "java.util.Properties",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.failed",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.ignore-recovery-failures",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.max-idle-time",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.max-pool-size",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.min-pool-size",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.password",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.share-transaction-connections",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.test-connections",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.two-pc-ordering-position",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.unique-name",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.use-tm-join",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.user",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.acquire-increment",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.acquisition-interval",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.acquisition-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.allow-local-transactions",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.apply-transaction-timeout",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.automatic-enlisting-enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.class-name",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.cursor-holdability",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.defer-connection-release",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.disabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.driver-properties",
      "type": "java.util.Properties",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.enable-jdbc4-connection-test",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.failed",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.ignore-recovery-failures",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.isolation-level",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.local-auto-commit",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.login-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.max-idle-time",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.max-pool-size",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.min-pool-size",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.prepared-statement-cache-size",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.share-transaction-connections",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.test-query",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.two-pc-ordering-position",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.unique-name",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.use-tm-join",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.properties.allow-multiple-lrc",
      "type": "java.lang.Boolean",
      "description": "Whether to allow multiple LRC resources to be enlisted into the same transaction.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": false
    },
    {
      "name": "spring.jta.bitronix.properties.asynchronous2-pc",
      "type": "java.lang.Boolean",
      "description": "Whether to enable asynchronously execution of two phase commit.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": false
    },
    {
      "name": "spring.jta.bitronix.properties.background-recovery-interval",
      "type": "java.lang.Integer",
      "description": "Interval in minutes at which to run the recovery process in the background.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": 1,
      "deprecated": true,
      "deprecation": {"replacement": "spring.jta.bitronix.properties.background-recovery-interval-seconds"}
    },
    {
      "name": "spring.jta.bitronix.properties.background-recovery-interval-seconds",
      "type": "java.lang.Integer",
      "description": "Interval in seconds at which to run the recovery process in the background.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": 60
    },
    {
      "name": "spring.jta.bitronix.properties.current-node-only-recovery",
      "type": "java.lang.Boolean",
      "description": "Whether to recover only the current node. Should be enabled if you run multiple instances of the transaction manager on the same JMS and JDBC resources.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": true
    },
    {
      "name": "spring.jta.bitronix.properties.debug-zero-resource-transaction",
      "type": "java.lang.Boolean",
      "description": "Whether to log the creation and commit call stacks of transactions executed without a single enlisted resource.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": false
    },
    {
      "name": "spring.jta.bitronix.properties.default-transaction-timeout",
      "type": "java.lang.Integer",
      "description": "Default transaction timeout, in seconds.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": 60
    },
    {
      "name": "spring.jta.bitronix.properties.disable-jmx",
      "type": "java.lang.Boolean",
      "description": "Whether to enable JMX support.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": false
    },
    {
      "name": "spring.jta.bitronix.properties.exception-analyzer",
      "type": "java.lang.String",
      "description": "Set the fully qualified name of the exception analyzer implementation to use.",
      "sourceType": "bitronix.tm.Configuration"
    },
    {
      "name": "spring.jta.bitronix.properties.filter-log-status",
      "type": "java.lang.Boolean",
      "description": "Whether to enable filtering of logs so that only mandatory logs are written.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": false
    },
    {
      "name": "spring.jta.bitronix.properties.force-batching-enabled",
      "type": "java.lang.Boolean",
      "description": "Whether disk forces are batched.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": true
    },
    {
      "name": "spring.jta.bitronix.properties.forced-write-enabled",
      "type": "java.lang.Boolean",
      "description": "Whether logs are forced to disk.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": true
    },
    {
      "name": "spring.jta.bitronix.properties.graceful-shutdown-interval",
      "type": "java.lang.Integer",
      "description": "Maximum amount of seconds the TM waits for transactions to get done before aborting them at shutdown time.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": 60
    },
    {
      "name": "spring.jta.bitronix.properties.jndi-transaction-synchronization-registry-name",
      "type": "java.lang.String",
      "description": "JNDI name of the TransactionSynchronizationRegistry.",
      "sourceType": "bitronix.tm.Configuration"
    },
    {
      "name": "spring.jta.bitronix.properties.jndi-user-transaction-name",
      "type": "java.lang.String",
      "description": "JNDI name of the UserTransaction.",
      "sourceType": "bitronix.tm.Configuration"
    },
    {
      "name": "spring.jta.bitronix.properties.journal",
      "type": "java.lang.String",
      "description": "Name of the journal. Can be 'disk', 'null', or a class name.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": "disk"
    },
    {
      "name": "spring.jta.bitronix.properties.log-part1-filename",
      "type": "java.lang.String",
      "description": "Name of the first fragment of the journal.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": "btm1.tlog"
    },
    {
      "name": "spring.jta.bitronix.properties.log-part2-filename",
      "type": "java.lang.String",
      "description": "Name of the second fragment of the journal.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": "btm2.tlog"
    },
    {
      "name": "spring.jta.bitronix.properties.max-log-size-in-mb",
      "type": "java.lang.Integer",
      "description": "Maximum size in megabytes of the journal fragments.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": 2
    },
    {
      "name": "spring.jta.bitronix.properties.resource-configuration-filename",
      "type": "java.lang.String",
      "description": "ResourceLoader configuration file name.",
      "sourceType": "bitronix.tm.Configuration"
    },
    {
      "name": "spring.jta.bitronix.properties.server-id",
      "type": "java.lang.String",
      "description": "ASCII ID that must uniquely identify this TM instance. Defaults to the machine's IP address.",
      "sourceType": "bitronix.tm.Configuration"
    },
    {
      "name": "spring.jta.bitronix.properties.skip-corrupted-logs",
      "type": "java.lang.Boolean",
      "description": "Skip corrupted transactions log entries. Use only at last resort when all you have to recover is a pair of corrupted files.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": false
    },
    {
      "name": "spring.jta.bitronix.properties.warn-about-zero-resource-transaction",
      "type": "java.lang.Boolean",
      "description": "Whether to log a warning for transactions executed without a single enlisted resource.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": true
    },
    {
      "name": "spring.jta.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable JTA support.",
      "defaultValue": true
    },
    {
      "name": "spring.jta.log-dir",
      "type": "java.lang.String",
      "description": "Transaction logs directory.",
      "sourceType": "org.springframework.boot.autoconfigure.transaction.jta.JtaProperties"
    },
    {
      "name": "spring.jta.narayana.default-timeout",
      "type": "java.time.Duration",
      "description": "Transaction timeout. If a duration suffix is not specified, seconds will be used.",
      "sourceType": "org.springframework.boot.jta.narayana.NarayanaProperties",
      "defaultValue": "60s"
    },
    {
      "name": "spring.jta.narayana.expiry-scanners",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of expiry scanners.",
      "sourceType": "org.springframework.boot.jta.narayana.NarayanaProperties",
      "defaultValue": ["com.arjuna.ats.internal.arjuna.recovery.ExpiredTransactionStatusManagerScanner"]
    },
    {
      "name": "spring.jta.narayana.log-dir",
      "type": "java.lang.String",
      "description": "Transaction object store directory.",
      "sourceType": "org.springframework.boot.jta.narayana.NarayanaProperties"
    },
    {
      "name": "spring.jta.narayana.one-phase-commit",
      "type": "java.lang.Boolean",
      "description": "Whether to enable one phase commit optimization.",
      "sourceType": "org.springframework.boot.jta.narayana.NarayanaProperties",
      "defaultValue": true
    },
    {
      "name": "spring.jta.narayana.periodic-recovery-period",
      "type": "java.time.Duration",
      "description": "Interval in which periodic recovery scans are performed. If a duration suffix is\n not specified, seconds will be used.",
      "sourceType": "org.springframework.boot.jta.narayana.NarayanaProperties",
      "defaultValue": "120s"
    },
    {
      "name": "spring.jta.narayana.recovery-backoff-period",
      "type": "java.time.Duration",
      "description": "Back off period between first and second phases of the recovery scan. If a duration\n suffix is not specified, seconds will be used.",
      "sourceType": "org.springframework.boot.jta.narayana.NarayanaProperties",
      "defaultValue": "10s"
    },
    {
      "name": "spring.jta.narayana.recovery-db-pass",
      "type": "java.lang.String",
      "description": "Database password to be used by the recovery manager.",
      "sourceType": "org.springframework.boot.jta.narayana.NarayanaProperties"
    },
    {
      "name": "spring.jta.narayana.recovery-db-user",
      "type": "java.lang.String",
      "description": "Database username to be used by the recovery manager.",
      "sourceType": "org.springframework.boot.jta.narayana.NarayanaProperties"
    },
    {
      "name": "spring.jta.narayana.recovery-jms-pass",
      "type": "java.lang.String",
      "description": "JMS password to be used by the recovery manager.",
      "sourceType": "org.springframework.boot.jta.narayana.NarayanaProperties"
    },
    {
      "name": "spring.jta.narayana.recovery-jms-user",
      "type": "java.lang.String",
      "description": "JMS username to be used by the recovery manager.",
      "sourceType": "org.springframework.boot.jta.narayana.NarayanaProperties"
    },
    {
      "name": "spring.jta.narayana.recovery-modules",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of recovery modules.",
      "sourceType": "org.springframework.boot.jta.narayana.NarayanaProperties"
    },
    {
      "name": "spring.jta.narayana.transaction-manager-id",
      "type": "java.lang.String",
      "description": "Unique transaction manager id.",
      "sourceType": "org.springframework.boot.jta.narayana.NarayanaProperties",
      "defaultValue": "1"
    },
    {
      "name": "spring.jta.narayana.xa-resource-orphan-filters",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of orphan filters.",
      "sourceType": "org.springframework.boot.jta.narayana.NarayanaProperties"
    },
    {
      "name": "spring.jta.transaction-manager-id",
      "type": "java.lang.String",
      "description": "Transaction manager unique identifier.",
      "sourceType": "org.springframework.boot.autoconfigure.transaction.jta.JtaProperties"
    },
    {
      "name": "spring.kafka.admin.client-id",
      "type": "java.lang.String",
      "description": "ID to pass to the server when making requests. Used for server-side logging.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Admin"
    },
    {
      "name": "spring.kafka.admin.fail-fast",
      "type": "java.lang.Boolean",
      "description": "Whether to fail fast if the broker is not available on startup.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Admin",
      "defaultValue": false
    },
    {
      "name": "spring.kafka.admin.properties",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Additional admin-specific properties used to configure the client.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Admin"
    },
    {
      "name": "spring.kafka.admin.ssl.key-password",
      "type": "java.lang.String",
      "description": "Password of the private key in the key store file.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "name": "spring.kafka.admin.ssl.key-store-type",
      "type": "java.lang.String",
      "description": "Type of the key store.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "name": "spring.kafka.admin.ssl.keystore-location",
      "type": "org.springframework.core.io.Resource",
      "description": "Location of the key store file.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "name": "spring.kafka.admin.ssl.keystore-password",
      "type": "java.lang.String",
      "description": "Store password for the key store file.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "name": "spring.kafka.admin.ssl.protocol",
      "type": "java.lang.String",
      "description": "SSL protocol to use.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "name": "spring.kafka.admin.ssl.trust-store-type",
      "type": "java.lang.String",
      "description": "Type of the trust store.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "name": "spring.kafka.admin.ssl.truststore-location",
      "type": "org.springframework.core.io.Resource",
      "description": "Location of the trust store file.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "name": "spring.kafka.admin.ssl.truststore-password",
      "type": "java.lang.String",
      "description": "Store password for the trust store file.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "name": "spring.kafka.bootstrap-servers",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-delimited list of host:port pairs to use for establishing the initial\n connection to the Kafka cluster.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties"
    },
    {
      "name": "spring.kafka.client-id",
      "type": "java.lang.String",
      "description": "ID to pass to the server when making requests. Used for server-side logging.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties"
    },
    {
      "name": "spring.kafka.consumer.auto-commit-interval",
      "type": "java.time.Duration",
      "description": "Frequency with which the consumer offsets are auto-committed to Kafka if\n 'enable.auto.commit' is set to true.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer"
    },
    {
      "name": "spring.kafka.consumer.auto-offset-reset",
      "type": "java.lang.String",
      "description": "What to do when there is no initial offset in Kafka or if the current offset no\n longer exists on the server.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer"
    },
    {
      "name": "spring.kafka.consumer.bootstrap-servers",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-delimited list of host:port pairs to use for establishing the initial\n connection to the Kafka cluster.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer"
    },
    {
      "name": "spring.kafka.consumer.client-id",
      "type": "java.lang.String",
      "description": "ID to pass to the server when making requests. Used for server-side logging.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer"
    },
    {
      "name": "spring.kafka.consumer.enable-auto-commit",
      "type": "java.lang.Boolean",
      "description": "Whether the consumer's offset is periodically committed in the background.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer"
    },
    {
      "name": "spring.kafka.consumer.fetch-max-wait",
      "type": "java.time.Duration",
      "description": "Maximum amount of time the server blocks before answering the fetch request if\n there isn't sufficient data to immediately satisfy the requirement given by\n \"fetch.min.bytes\".",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer"
    },
    {
      "name": "spring.kafka.consumer.fetch-min-size",
      "type": "java.lang.Integer",
      "description": "Minimum amount of data, in bytes, the server should return for a fetch request.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer"
    },
    {
      "name": "spring.kafka.consumer.group-id",
      "type": "java.lang.String",
      "description": "Unique string that identifies the consumer group to which this consumer\n belongs.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer"
    },
    {
      "name": "spring.kafka.consumer.heartbeat-interval",
      "type": "java.time.Duration",
      "description": "Expected time between heartbeats to the consumer coordinator.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer"
    },
    {
      "name": "spring.kafka.consumer.key-deserializer",
      "type": "java.lang.Class<?>",
      "description": "Deserializer class for keys.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer"
    },
    {
      "name": "spring.kafka.consumer.max-poll-records",
      "type": "java.lang.Integer",
      "description": "Maximum number of records returned in a single call to poll().",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer"
    },
    {
      "name": "spring.kafka.consumer.properties",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Additional consumer-specific properties used to configure the client.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer"
    },
    {
      "name": "spring.kafka.consumer.ssl.key-password",
      "type": "java.lang.String",
      "description": "Password of the private key in the key store file.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "name": "spring.kafka.consumer.ssl.key-store-type",
      "type": "java.lang.String",
      "description": "Type of the key store.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "name": "spring.kafka.consumer.ssl.keystore-location",
      "type": "org.springframework.core.io.Resource",
      "description": "Location of the key store file.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "name": "spring.kafka.consumer.ssl.keystore-password",
      "type": "java.lang.String",
      "description": "Store password for the key store file.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "name": "spring.kafka.consumer.ssl.protocol",
      "type": "java.lang.String",
      "description": "SSL protocol to use.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "name": "spring.kafka.consumer.ssl.trust-store-type",
      "type": "java.lang.String",
      "description": "Type of the trust store.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "name": "spring.kafka.consumer.ssl.truststore-location",
      "type": "org.springframework.core.io.Resource",
      "description": "Location of the trust store file.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "name": "spring.kafka.consumer.ssl.truststore-password",
      "type": "java.lang.String",
      "description": "Store password for the trust store file.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "name": "spring.kafka.consumer.value-deserializer",
      "type": "java.lang.Class<?>",
      "description": "Deserializer class for values.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer"
    },
    {
      "name": "spring.kafka.jaas.control-flag",
      "type": "org.springframework.kafka.security.jaas.KafkaJaasLoginModuleInitializer$ControlFlag",
      "description": "Control flag for login configuration.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Jaas",
      "defaultValue": "required"
    },
    {
      "name": "spring.kafka.jaas.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable JAAS configuration.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Jaas",
      "defaultValue": false
    },
    {
      "name": "spring.kafka.jaas.login-module",
      "type": "java.lang.String",
      "description": "Login module.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Jaas",
      "defaultValue": "com.sun.security.auth.module.Krb5LoginModule"
    },
    {
      "name": "spring.kafka.jaas.options",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Additional JAAS options.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Jaas"
    },
    {
      "name": "spring.kafka.listener.ack-count",
      "type": "java.lang.Integer",
      "description": "Number of records between offset commits when ackMode is \"COUNT\" or\n \"COUNT_TIME\".",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Listener"
    },
    {
      "name": "spring.kafka.listener.ack-mode",
      "type": "org.springframework.kafka.listener.AbstractMessageListenerContainer$AckMode",
      "description": "Listener AckMode. See the spring-kafka documentation.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Listener"
    },
    {
      "name": "spring.kafka.listener.ack-time",
      "type": "java.time.Duration",
      "description": "Time between offset commits when ackMode is \"TIME\" or \"COUNT_TIME\".",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Listener"
    },
    {
      "name": "spring.kafka.listener.client-id",
      "type": "java.lang.String",
      "description": "Prefix for the listener's consumer client.id property.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Listener"
    },
    {
      "name": "spring.kafka.listener.concurrency",
      "type": "java.lang.Integer",
      "description": "Number of threads to run in the listener containers.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Listener"
    },
    {
      "name": "spring.kafka.listener.idle-event-interval",
      "type": "java.time.Duration",
      "description": "Time between publishing idle consumer events (no data received).",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Listener"
    },
    {
      "name": "spring.kafka.listener.log-container-config",
      "type": "java.lang.Boolean",
      "description": "Whether to log the container configuration during initialization (INFO level).",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Listener"
    },
    {
      "name": "spring.kafka.listener.monitor-interval",
      "type": "java.time.Duration",
      "description": "Time between checks for non-responsive consumers. If a duration suffix is not\n specified, seconds will be used.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Listener"
    },
    {
      "name": "spring.kafka.listener.no-poll-threshold",
      "type": "java.lang.Float",
      "description": "Multiplier applied to \"pollTimeout\" to determine if a consumer is\n non-responsive.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Listener"
    },
    {
      "name": "spring.kafka.listener.poll-timeout",
      "type": "java.time.Duration",
      "description": "Timeout to use when polling the consumer.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Listener"
    },
    {
      "name": "spring.kafka.listener.type",
      "type": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Listener$Type",
      "description": "Listener type.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Listener",
      "defaultValue": "single"
    },
    {
      "name": "spring.kafka.producer.acks",
      "type": "java.lang.String",
      "description": "Number of acknowledgments the producer requires the leader to have received\n before considering a request complete.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer"
    },
    {
      "name": "spring.kafka.producer.batch-size",
      "type": "java.lang.Integer",
      "description": "Default batch size in bytes. A small batch size will make batching less common\n and may reduce throughput (a batch size of zero disables batching entirely).",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer"
    },
    {
      "name": "spring.kafka.producer.bootstrap-servers",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-delimited list of host:port pairs to use for establishing the initial\n connection to the Kafka cluster.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer"
    },
    {
      "name": "spring.kafka.producer.buffer-memory",
      "type": "java.lang.Long",
      "description": "Total bytes of memory the producer can use to buffer records waiting to be sent\n to the server.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer"
    },
    {
      "name": "spring.kafka.producer.client-id",
      "type": "java.lang.String",
      "description": "ID to pass to the server when making requests. Used for server-side logging.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer"
    },
    {
      "name": "spring.kafka.producer.compression-type",
      "type": "java.lang.String",
      "description": "Compression type for all data generated by the producer.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer"
    },
    {
      "name": "spring.kafka.producer.key-serializer",
      "type": "java.lang.Class<?>",
      "description": "Serializer class for keys.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer"
    },
    {
      "name": "spring.kafka.producer.properties",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Additional producer-specific properties used to configure the client.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer"
    },
    {
      "name": "spring.kafka.producer.retries",
      "type": "java.lang.Integer",
      "description": "When greater than zero, enables retrying of failed sends.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer"
    },
    {
      "name": "spring.kafka.producer.ssl.key-password",
      "type": "java.lang.String",
      "description": "Password of the private key in the key store file.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "name": "spring.kafka.producer.ssl.key-store-type",
      "type": "java.lang.String",
      "description": "Type of the key store.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "name": "spring.kafka.producer.ssl.keystore-location",
      "type": "org.springframework.core.io.Resource",
      "description": "Location of the key store file.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "name": "spring.kafka.producer.ssl.keystore-password",
      "type": "java.lang.String",
      "description": "Store password for the key store file.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "name": "spring.kafka.producer.ssl.protocol",
      "type": "java.lang.String",
      "description": "SSL protocol to use.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "name": "spring.kafka.producer.ssl.trust-store-type",
      "type": "java.lang.String",
      "description": "Type of the trust store.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "name": "spring.kafka.producer.ssl.truststore-location",
      "type": "org.springframework.core.io.Resource",
      "description": "Location of the trust store file.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "name": "spring.kafka.producer.ssl.truststore-password",
      "type": "java.lang.String",
      "description": "Store password for the trust store file.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "name": "spring.kafka.producer.transaction-id-prefix",
      "type": "java.lang.String",
      "description": "When non empty, enables transaction support for producer.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer"
    },
    {
      "name": "spring.kafka.producer.value-serializer",
      "type": "java.lang.Class<?>",
      "description": "Serializer class for values.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer"
    },
    {
      "name": "spring.kafka.properties",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Additional properties, common to producers and consumers, used to configure the\n client.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties"
    },
    {
      "name": "spring.kafka.ssl.key-password",
      "type": "java.lang.String",
      "description": "Password of the private key in the key store file.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "name": "spring.kafka.ssl.key-store-type",
      "type": "java.lang.String",
      "description": "Type of the key store.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "name": "spring.kafka.ssl.keystore-location",
      "type": "org.springframework.core.io.Resource",
      "description": "Location of the key store file.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "name": "spring.kafka.ssl.keystore-password",
      "type": "java.lang.String",
      "description": "Store password for the key store file.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "name": "spring.kafka.ssl.protocol",
      "type": "java.lang.String",
      "description": "SSL protocol to use.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "name": "spring.kafka.ssl.trust-store-type",
      "type": "java.lang.String",
      "description": "Type of the trust store.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "name": "spring.kafka.ssl.truststore-location",
      "type": "org.springframework.core.io.Resource",
      "description": "Location of the trust store file.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "name": "spring.kafka.ssl.truststore-password",
      "type": "java.lang.String",
      "description": "Store password for the trust store file.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "name": "spring.kafka.template.default-topic",
      "type": "java.lang.String",
      "description": "Default topic to which messages are sent.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Template"
    },
    {
      "name": "spring.ldap.anonymous-read-only",
      "type": "java.lang.Boolean",
      "description": "Whether read-only operations should use an anonymous environment.",
      "sourceType": "org.springframework.boot.autoconfigure.ldap.LdapProperties",
      "defaultValue": false
    },
    {
      "name": "spring.ldap.base",
      "type": "java.lang.String",
      "description": "Base suffix from which all operations should originate.",
      "sourceType": "org.springframework.boot.autoconfigure.ldap.LdapProperties"
    },
    {
      "name": "spring.ldap.base-environment",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "LDAP specification settings.",
      "sourceType": "org.springframework.boot.autoconfigure.ldap.LdapProperties"
    },
    {
      "name": "spring.ldap.embedded.base-dn",
      "type": "java.util.List<java.lang.String>",
      "description": "List of base DNs.",
      "sourceType": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties"
    },
    {
      "name": "spring.ldap.embedded.credential.password",
      "type": "java.lang.String",
      "description": "Embedded LDAP password.",
      "sourceType": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties$Credential"
    },
    {
      "name": "spring.ldap.embedded.credential.username",
      "type": "java.lang.String",
      "description": "Embedded LDAP username.",
      "sourceType": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties$Credential"
    },
    {
      "name": "spring.ldap.embedded.ldif",
      "type": "java.lang.String",
      "description": "Schema (LDIF) script resource reference.",
      "sourceType": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties",
      "defaultValue": "classpath:schema.ldif"
    },
    {
      "name": "spring.ldap.embedded.port",
      "type": "java.lang.Integer",
      "description": "Embedded LDAP port.",
      "sourceType": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties",
      "defaultValue": 0
    },
    {
      "name": "spring.ldap.embedded.validation.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable LDAP schema validation.",
      "sourceType": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties$Validation",
      "defaultValue": true
    },
    {
      "name": "spring.ldap.embedded.validation.schema",
      "type": "org.springframework.core.io.Resource",
      "description": "Path to the custom schema.",
      "sourceType": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties$Validation"
    },
    {
      "name": "spring.ldap.password",
      "type": "java.lang.String",
      "description": "Login password of the server.",
      "sourceType": "org.springframework.boot.autoconfigure.ldap.LdapProperties"
    },
    {
      "name": "spring.ldap.urls",
      "type": "java.lang.String[]",
      "description": "LDAP URLs of the server.",
      "sourceType": "org.springframework.boot.autoconfigure.ldap.LdapProperties"
    },
    {
      "name": "spring.ldap.username",
      "type": "java.lang.String",
      "description": "Login username of the server.",
      "sourceType": "org.springframework.boot.autoconfigure.ldap.LdapProperties"
    },
    {
      "name": "spring.liquibase.change-log",
      "type": "java.lang.String",
      "description": "Change log configuration path.",
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "defaultValue": "classpath:/db/changelog/db.changelog-master.yaml"
    },
    {
      "name": "spring.liquibase.check-change-log-location",
      "type": "java.lang.Boolean",
      "description": "Whether to check that the change log location exists.",
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "defaultValue": true
    },
    {
      "name": "spring.liquibase.contexts",
      "type": "java.lang.String",
      "description": "Comma-separated list of runtime contexts to use.",
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties"
    },
    {
      "name": "spring.liquibase.default-schema",
      "type": "java.lang.String",
      "description": "Default database schema.",
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties"
    },
    {
      "name": "spring.liquibase.drop-first",
      "type": "java.lang.Boolean",
      "description": "Whether to first drop the database schema.",
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "defaultValue": false
    },
    {
      "name": "spring.liquibase.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable Liquibase support.",
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "defaultValue": true
    },
    {
      "name": "spring.liquibase.labels",
      "type": "java.lang.String",
      "description": "Comma-separated list of runtime labels to use.",
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties"
    },
    {
      "name": "spring.liquibase.parameters",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Change log parameters.",
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties"
    },
    {
      "name": "spring.liquibase.password",
      "type": "java.lang.String",
      "description": "Login password of the database to migrate.",
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties"
    },
    {
      "name": "spring.liquibase.rollback-file",
      "type": "java.io.File",
      "description": "File to which rollback SQL is written when an update is performed.",
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties"
    },
    {
      "name": "spring.liquibase.url",
      "type": "java.lang.String",
      "description": "JDBC URL of the database to migrate. If not set, the primary configured data source\n is used.",
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties"
    },
    {
      "name": "spring.liquibase.user",
      "type": "java.lang.String",
      "description": "Login user of the database to migrate.",
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties"
    },
    {
      "name": "spring.mail.default-encoding",
      "type": "java.nio.charset.Charset",
      "description": "Default MimeMessage encoding.",
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties",
      "defaultValue": "UTF-8"
    },
    {
      "name": "spring.mail.host",
      "type": "java.lang.String",
      "description": "SMTP server host. For instance, `smtp.example.com`.",
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties"
    },
    {
      "name": "spring.mail.jndi-name",
      "type": "java.lang.String",
      "description": "Session JNDI name. When set, takes precedence over other Session settings.",
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties"
    },
    {
      "name": "spring.mail.password",
      "type": "java.lang.String",
      "description": "Login password of the SMTP server.",
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties"
    },
    {
      "name": "spring.mail.port",
      "type": "java.lang.Integer",
      "description": "SMTP server port.",
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties"
    },
    {
      "name": "spring.mail.properties",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Additional JavaMail Session properties.",
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties"
    },
    {
      "name": "spring.mail.protocol",
      "type": "java.lang.String",
      "description": "Protocol used by the SMTP server.",
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties",
      "defaultValue": "smtp"
    },
    {
      "name": "spring.mail.test-connection",
      "type": "java.lang.Boolean",
      "description": "Whether to test that the mail server is available on startup.",
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties",
      "defaultValue": false
    },
    {
      "name": "spring.mail.username",
      "type": "java.lang.String",
      "description": "Login user of the SMTP server.",
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties"
    },
    {
      "name": "spring.main.banner-mode",
      "type": "org.springframework.boot.Banner$Mode",
      "description": "Mode used to display the banner when the application runs.",
      "sourceType": "org.springframework.boot.SpringApplication",
      "defaultValue": "console"
    },
    {
      "name": "spring.main.show-banner",
      "type": "java.lang.Boolean",
      "description": "Display the banner when the application runs.",
      "sourceType": "org.springframework.boot.SpringApplication",
      "defaultValue": true,
      "deprecated": true,
      "deprecation": {"replacement": "spring.main.banner-mode"}
    },
    {
      "name": "spring.main.sources",
      "type": "java.util.Set<java.lang.String>",
      "description": "Sources (class names, package names, or XML resource locations) to include in the ApplicationContext.",
      "sourceType": "org.springframework.boot.SpringApplication"
    },
    {
      "name": "spring.main.web-application-type",
      "type": "org.springframework.boot.WebApplicationType",
      "description": "Flag to explicitly request a specific type of web application. If not set, auto-detected based on the classpath.",
      "sourceType": "org.springframework.boot.SpringApplication"
    },
    {
      "name": "spring.main.web-environment",
      "type": "java.lang.Boolean",
      "description": "Run the application in a web environment (auto-detected by default).",
      "sourceType": "org.springframework.boot.SpringApplication",
      "deprecated": true,
      "deprecation": {"replacement": "spring.main.web-application-type"}
    },
    {
      "name": "spring.mandatory-file-encoding",
      "type": "java.nio.charset.Charset",
      "description": "Expected character encoding the application must use.",
      "sourceType": "org.springframework.boot.context.FileEncodingApplicationListener"
    },
    {
      "name": "spring.messages.always-use-message-format",
      "type": "java.lang.Boolean",
      "description": "Whether to always apply the MessageFormat rules, parsing even messages without\n arguments.",
      "sourceType": "org.springframework.boot.autoconfigure.context.MessageSourceProperties",
      "defaultValue": false
    },
    {
      "name": "spring.messages.basename",
      "type": "java.lang.String",
      "description": "Comma-separated list of basenames (essentially a fully-qualified classpath\n location), each following the ResourceBundle convention with relaxed support for\n slash based locations. If it doesn't contain a package qualifier (such as\n \"org.mypackage\"), it will be resolved from the classpath root.",
      "sourceType": "org.springframework.boot.autoconfigure.context.MessageSourceProperties",
      "defaultValue": "messages"
    },
    {
      "name": "spring.messages.cache-duration",
      "type": "java.time.Duration",
      "description": "Loaded resource bundle files cache duration. When not set, bundles are cached\n forever. If a duration suffix is not specified, seconds will be used.",
      "sourceType": "org.springframework.boot.autoconfigure.context.MessageSourceProperties"
    },
    {
      "name": "spring.messages.cache-seconds",
      "type": "java.lang.Integer",
      "description": "Loaded resource bundle files cache expiration, in seconds. When set to -1, bundles are cached forever.",
      "deprecated": true,
      "deprecation": {"replacement": "spring.messages.cache-duration"}
    },
    {
      "name": "spring.messages.encoding",
      "type": "java.nio.charset.Charset",
      "description": "Message bundles encoding.",
      "sourceType": "org.springframework.boot.autoconfigure.context.MessageSourceProperties",
      "defaultValue": "UTF-8"
    },
    {
      "name": "spring.messages.fallback-to-system-locale",
      "type": "java.lang.Boolean",
      "description": "Whether to fall back to the system Locale if no files for a specific Locale have\n been found. if this is turned off, the only fallback will be the default file (e.g.\n \"messages.properties\" for basename \"messages\").",
      "sourceType": "org.springframework.boot.autoconfigure.context.MessageSourceProperties",
      "defaultValue": true
    },
    {
      "name": "spring.messages.use-code-as-default-message",
      "type": "java.lang.Boolean",
      "description": "Whether to use the message code as the default message instead of throwing a\n \"NoSuchMessageException\". Recommended during development only.",
      "sourceType": "org.springframework.boot.autoconfigure.context.MessageSourceProperties",
      "defaultValue": false
    },
    {
      "name": "spring.metrics.export.aggregate.key-pattern",
      "type": "java.lang.String",
      "description": "Pattern that tells the aggregator what to do with the keys from the source\n repository. The keys in the source repository are assumed to be period\n separated, and the pattern is in the same format, e.g. \"d.d.k.d\". Here \"d\"\n means \"discard\" and \"k\" means \"keep\" the key segment in the corresponding\n position in the source.",
      "defaultValue": "",
      "deprecated": true,
      "deprecation": {"reason": "Metrics support is now using Micrometer."}
    },
    {
      "name": "spring.metrics.export.aggregate.prefix",
      "type": "java.lang.String",
      "description": "Prefix for global repository if active. Should be unique for this JVM, but most\n useful if it also has the form \"a.b\" where \"a\" is unique to this logical\n process (this application) and \"b\" is unique to this physical process. If you\n set spring.application.name elsewhere, then the default will be in the right\n form.",
      "defaultValue": "",
      "deprecated": true,
      "deprecation": {"reason": "Metrics support is now using Micrometer."}
    },
    {
      "name": "spring.metrics.export.delay-millis",
      "type": "java.lang.Long",
      "description": "Delay in milliseconds between export ticks. Metrics are exported to external\n sources on a schedule with this delay.",
      "deprecated": true,
      "deprecation": {"reason": "Metrics support is now using Micrometer."}
    },
    {
      "name": "spring.metrics.export.enabled",
      "type": "java.lang.Boolean",
      "description": "Flag to enable metric export (assuming a MetricWriter is available).",
      "defaultValue": true,
      "deprecated": true,
      "deprecation": {"reason": "Metrics support is now using Micrometer."}
    },
    {
      "name": "spring.metrics.export.excludes",
      "type": "java.lang.String[]",
      "description": "List of patterns for metric names to exclude. Applied after the includes.",
      "deprecated": true,
      "deprecation": {"reason": "Metrics support is now using Micrometer."}
    },
    {
      "name": "spring.metrics.export.includes",
      "type": "java.lang.String[]",
      "description": "List of patterns for metric names to include.",
      "deprecated": true,
      "deprecation": {"reason": "Metrics support is now using Micrometer."}
    },
    {
      "name": "spring.metrics.export.redis.key",
      "type": "java.lang.String",
      "description": "Key for redis repository export (if active). Should be globally unique for a\n system sharing a redis repository across multiple processes.",
      "defaultValue": "keys.spring.metrics",
      "deprecated": true,
      "deprecation": {"reason": "Metrics support is now using Micrometer."}
    },
    {
      "name": "spring.metrics.export.redis.prefix",
      "type": "java.lang.String",
      "description": "Prefix for redis repository if active. Should be globally unique across all\n processes sharing the same repository.",
      "defaultValue": "spring.metrics",
      "deprecated": true,
      "deprecation": {"reason": "Metrics support is now using Micrometer."}
    },
    {
      "name": "spring.metrics.export.send-latest",
      "type": "java.lang.Boolean",
      "description": "Flag to switch off any available optimizations based on not exporting unchanged\n metric values.",
      "deprecated": true,
      "deprecation": {"reason": "Metrics support is now using Micrometer."}
    },
    {
      "name": "spring.metrics.export.statsd.host",
      "type": "java.lang.String",
      "description": "Host of a statsd server to receive exported metrics.",
      "deprecated": true,
      "deprecation": {"replacement": "management.metrics.export.statsd.host"}
    },
    {
      "name": "spring.metrics.export.statsd.port",
      "type": "java.lang.Integer",
      "description": "Port of a statsd server to receive exported metrics.",
      "defaultValue": 8125,
      "deprecated": true,
      "deprecation": {"replacement": "management.metrics.export.statsd.port"}
    },
    {
      "name": "spring.metrics.export.statsd.prefix",
      "type": "java.lang.String",
      "description": "Prefix for statsd exported metrics.",
      "deprecated": true,
      "deprecation": {"reason": "Metrics support is now using Micrometer."}
    },
    {
      "name": "spring.metrics.export.triggers",
      "description": "Specific trigger properties per MetricWriter bean name.",
      "deprecated": true,
      "deprecation": {"reason": "Metrics support is now using Micrometer."}
    },
    {
      "name": "spring.mongodb.embedded.features",
      "type": "java.util.Set<de.flapdoodle.embed.mongo.distribution.Feature>",
      "description": "Comma-separated list of features to enable.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties",
      "defaultValue": ["sync_delay"]
    },
    {
      "name": "spring.mongodb.embedded.storage.database-dir",
      "type": "java.lang.String",
      "description": "Directory used for data storage.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties$Storage"
    },
    {
      "name": "spring.mongodb.embedded.storage.oplog-size",
      "type": "java.lang.Integer",
      "description": "Maximum size of the oplog, in megabytes.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties$Storage"
    },
    {
      "name": "spring.mongodb.embedded.storage.repl-set-name",
      "type": "java.lang.String",
      "description": "Name of the replica set.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties$Storage"
    },
    {
      "name": "spring.mongodb.embedded.version",
      "type": "java.lang.String",
      "description": "Version of Mongo to use.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties",
      "defaultValue": "3.2.2"
    },
    {
      "name": "spring.mustache.allow-request-override",
      "type": "java.lang.Boolean",
      "description": "Whether HttpServletRequest attributes are allowed to override (hide) controller\n generated model attributes of the same name.",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": false
    },
    {
      "name": "spring.mustache.allow-session-override",
      "type": "java.lang.Boolean",
      "description": "Whether HttpSession attributes are allowed to override (hide) controller generated\n model attributes of the same name.",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": false
    },
    {
      "name": "spring.mustache.cache",
      "type": "java.lang.Boolean",
      "description": "Whether to enable template caching.",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": false
    },
    {
      "name": "spring.mustache.charset",
      "type": "java.nio.charset.Charset",
      "description": "Template encoding.",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": "UTF-8"
    },
    {
      "name": "spring.mustache.check-template-location",
      "type": "java.lang.Boolean",
      "description": "Whether to check that the templates location exists.",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": true
    },
    {
      "name": "spring.mustache.content-type",
      "type": "org.springframework.util.MimeType",
      "description": "Content-Type value.",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": "text/html"
    },
    {
      "name": "spring.mustache.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable MVC view resolution for this technology.",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": true
    },
    {
      "name": "spring.mustache.expose-request-attributes",
      "type": "java.lang.Boolean",
      "description": "Whether all request attributes should be added to the model prior to merging with\n the template.",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": false
    },
    {
      "name": "spring.mustache.expose-session-attributes",
      "type": "java.lang.Boolean",
      "description": "Whether all HttpSession attributes should be added to the model prior to merging\n with the template.",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": false
    },
    {
      "name": "spring.mustache.expose-spring-macro-helpers",
      "type": "java.lang.Boolean",
      "description": "Whether to expose a RequestContext for use by Spring's macro library, under the\n name \"springMacroRequestContext\".",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": true
    },
    {
      "name": "spring.mustache.prefix",
      "type": "java.lang.String",
      "description": "Prefix to apply to template names.",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": "classpath:/templates/"
    },
    {
      "name": "spring.mustache.request-context-attribute",
      "type": "java.lang.String",
      "description": "Name of the RequestContext attribute for all views.",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties"
    },
    {
      "name": "spring.mustache.suffix",
      "type": "java.lang.String",
      "description": "Suffix to apply to template names.",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": ".mustache"
    },
    {
      "name": "spring.mustache.view-names",
      "type": "java.lang.String[]",
      "description": "White list of view names that can be resolved.",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties"
    },
    {
      "name": "spring.mvc.async.request-timeout",
      "type": "java.time.Duration",
      "description": "Amount of time before asynchronous request handling times out. If this value is\n not set, the default timeout of the underlying implementation is used, e.g. 10\n seconds on Tomcat with Servlet 3.",
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$Async"
    },
    {
      "name": "spring.mvc.contentnegotiation.favor-parameter",
      "type": "java.lang.Boolean",
      "description": "Whether a request parameter (\"format\" by default) should be used to determine\n the requested media type.",
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$Contentnegotiation",
      "defaultValue": false
    },
    {
      "name": "spring.mvc.contentnegotiation.favor-path-extension",
      "type": "java.lang.Boolean",
      "description": "Whether the path extension in the URL path should be used to determine the\n requested media type. If enabled a request \"/users.pdf\" will be interpreted as\n a request for \"application/pdf\" regardless of the 'Accept' header.",
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$Contentnegotiation",
      "defaultValue": false
    },
    {
      "name": "spring.mvc.contentnegotiation.media-types",
      "type": "java.util.Map<java.lang.String,org.springframework.http.MediaType>",
      "description": "Map file extensions to media types for content negotiation. For instance, yml\n to text/yaml.",
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$Contentnegotiation"
    },
    {
      "name": "spring.mvc.contentnegotiation.parameter-name",
      "type": "java.lang.String",
      "description": "Query parameter name to use when \"favor-parameter\" is enabled.",
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$Contentnegotiation"
    },
    {
      "name": "spring.mvc.date-format",
      "type": "java.lang.String",
      "description": "Date format to use. For instance, `dd/MM/yyyy`.",
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties"
    },
    {
      "name": "spring.mvc.dispatch-options-request",
      "type": "java.lang.Boolean",
      "description": "Whether to dispatch OPTIONS requests to the FrameworkServlet doService method.",
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties",
      "defaultValue": true
    },
    {
      "name": "spring.mvc.dispatch-trace-request",
      "type": "java.lang.Boolean",
      "description": "Whether to dispatch TRACE requests to the FrameworkServlet doService method.",
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties",
      "defaultValue": false
    },
    {
      "name": "spring.mvc.favicon.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable resolution of favicon.ico.",
      "defaultValue": true
    },
    {
      "name": "spring.mvc.formcontent.putfilter.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable Spring's HttpPutFormContentFilter.",
      "defaultValue": true
    },
    {
      "name": "spring.mvc.ignore-default-model-on-redirect",
      "type": "java.lang.Boolean",
      "description": "Whether the content of the \"default\" model should be ignored during redirect\n scenarios.",
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties",
      "defaultValue": true
    },
    {
      "name": "spring.mvc.locale",
      "type": "java.util.Locale",
      "description": "Locale to use. By default, this locale is overridden by the \"Accept-Language\"\n header.",
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties"
    },
    {
      "name": "spring.mvc.locale-resolver",
      "type": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$LocaleResolver",
      "description": "Define how the locale should be resolved.",
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties",
      "defaultValue": "accept-header"
    },
    {
      "name": "spring.mvc.log-resolved-exception",
      "type": "java.lang.Boolean",
      "description": "Whether to enable warn logging of exceptions resolved by a\n \"HandlerExceptionResolver\".",
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties",
      "defaultValue": false
    },
    {
      "name": "spring.mvc.media-types",
      "type": "java.util.Map<java.lang.String,org.springframework.http.MediaType>",
      "description": "Maps file extensions to media types for content negotiation, e.g. yml to text/yaml.",
      "deprecated": true,
      "deprecation": {"replacement": "spring.mvc.contentnegotiation.media-types"}
    },
    {
      "name": "spring.mvc.message-codes-resolver-format",
      "type": "org.springframework.validation.DefaultMessageCodesResolver$Format",
      "description": "Formatting strategy for message codes. For instance, `PREFIX_ERROR_CODE`.",
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties"
    },
    {
      "name": "spring.mvc.pathmatch.use-registered-suffix-pattern",
      "type": "java.lang.Boolean",
      "description": "Whether suffix pattern matching should work only against extensions registered\n with \"spring.mvc.contentnegotiation.media-types.*\". This is generally\n recommended to reduce ambiguity and to avoid issues such as when a \".\" appears\n in the path for other reasons.",
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$Pathmatch",
      "defaultValue": false
    },
    {
      "name": "spring.mvc.pathmatch.use-suffix-pattern",
      "type": "java.lang.Boolean",
      "description": "Whether to use suffix pattern match (\".*\") when matching patterns to requests.\n If enabled a method mapped to \"/users\" also matches to \"/users.*\".",
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$Pathmatch",
      "defaultValue": false
    },
    {
      "name": "spring.mvc.servlet.load-on-startup",
      "type": "java.lang.Integer",
      "description": "Load on startup priority of the dispatcher servlet.",
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$Servlet",
      "defaultValue": -1
    },
    {
      "name": "spring.mvc.static-path-pattern",
      "type": "java.lang.String",
      "description": "Path pattern used for static resources.",
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties",
      "defaultValue": "/**"
    },
    {
      "name": "spring.mvc.throw-exception-if-no-handler-found",
      "type": "java.lang.Boolean",
      "description": "Whether a \"NoHandlerFoundException\" should be thrown if no Handler was found to\n process a request.",
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties",
      "defaultValue": false
    },
    {
      "name": "spring.mvc.view.prefix",
      "type": "java.lang.String",
      "description": "Spring MVC view prefix.",
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$View"
    },
    {
      "name": "spring.mvc.view.suffix",
      "type": "java.lang.String",
      "description": "Spring MVC view suffix.",
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties$View"
    },
    {
      "name": "spring.output.ansi.enabled",
      "type": "org.springframework.boot.ansi.AnsiOutput$Enabled",
      "description": "Configures the ANSI output.",
      "defaultValue": "detect"
    },
    {
      "name": "spring.pid.fail-on-write-error",
      "type": "java.lang.Boolean",
      "description": "Fails if ApplicationPidFileWriter is used but it cannot write the PID file.",
      "sourceType": "org.springframework.boot.context.ApplicationPidFileWriter"
    },
    {
      "name": "spring.pid.file",
      "type": "java.lang.String",
      "description": "Location of the PID file to write (if ApplicationPidFileWriter is used).",
      "sourceType": "org.springframework.boot.context.ApplicationPidFileWriter"
    },
    {
      "name": "spring.profiles.active",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of active profiles. Can be overridden by a command line switch.",
      "sourceType": "org.springframework.boot.context.config.ConfigFileApplicationListener"
    },
    {
      "name": "spring.profiles.include",
      "type": "java.util.List<java.lang.String>",
      "description": "Unconditionally activate the specified comma-separated list of profiles (or list of profiles if using YAML).",
      "sourceType": "org.springframework.boot.context.config.ConfigFileApplicationListener"
    },
    {
      "name": "spring.quartz.jdbc.comment-prefix",
      "type": "java.lang.String",
      "description": "Prefix for single-line comments in SQL initialization scripts.",
      "sourceType": "org.springframework.boot.autoconfigure.quartz.QuartzProperties$Jdbc",
      "defaultValue": "--"
    },
    {
      "name": "spring.quartz.jdbc.initialize-schema",
      "type": "org.springframework.boot.jdbc.DataSourceInitializationMode",
      "description": "Database schema initialization mode.",
      "sourceType": "org.springframework.boot.autoconfigure.quartz.QuartzProperties$Jdbc",
      "defaultValue": "embedded"
    },
    {
      "name": "spring.quartz.jdbc.schema",
      "type": "java.lang.String",
      "description": "Path to the SQL file to use to initialize the database schema.",
      "sourceType": "org.springframework.boot.autoconfigure.quartz.QuartzProperties$Jdbc",
      "defaultValue": "classpath:org/quartz/impl/jdbcjobstore/tables_@@platform@@.sql"
    },
    {
      "name": "spring.quartz.job-store-type",
      "type": "org.springframework.boot.autoconfigure.quartz.JobStoreType",
      "description": "Quartz job store type.",
      "sourceType": "org.springframework.boot.autoconfigure.quartz.QuartzProperties",
      "defaultValue": "memory"
    },
    {
      "name": "spring.quartz.properties",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Additional Quartz Scheduler properties.",
      "sourceType": "org.springframework.boot.autoconfigure.quartz.QuartzProperties"
    },
    {
      "name": "spring.rabbitmq.addresses",
      "type": "java.lang.String",
      "description": "Comma-separated list of addresses to which the client should connect.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties"
    },
    {
      "name": "spring.rabbitmq.cache.channel.checkout-timeout",
      "type": "java.time.Duration",
      "description": "Duration to wait to obtain a channel if the cache size has been reached. If\n 0, always create a new channel.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache$Channel"
    },
    {
      "name": "spring.rabbitmq.cache.channel.size",
      "type": "java.lang.Integer",
      "description": "Number of channels to retain in the cache. When \"check-timeout\" > 0, max\n channels per connection.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache$Channel"
    },
    {
      "name": "spring.rabbitmq.cache.connection.mode",
      "type": "org.springframework.amqp.rabbit.connection.CachingConnectionFactory$CacheMode",
      "description": "Connection factory cache mode.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache$Connection",
      "defaultValue": "channel"
    },
    {
      "name": "spring.rabbitmq.cache.connection.size",
      "type": "java.lang.Integer",
      "description": "Number of connections to cache. Only applies when mode is CONNECTION.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache$Connection"
    },
    {
      "name": "spring.rabbitmq.connection-timeout",
      "type": "java.time.Duration",
      "description": "Connection timeout. Set it to zero to wait forever.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties"
    },
    {
      "name": "spring.rabbitmq.dynamic",
      "type": "java.lang.Boolean",
      "description": "Whether to create an AmqpAdmin bean.",
      "defaultValue": true
    },
    {
      "name": "spring.rabbitmq.host",
      "type": "java.lang.String",
      "description": "RabbitMQ host.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "defaultValue": "localhost"
    },
    {
      "name": "spring.rabbitmq.listener.direct.acknowledge-mode",
      "type": "org.springframework.amqp.core.AcknowledgeMode",
      "description": "Acknowledge mode of container.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$DirectContainer"
    },
    {
      "name": "spring.rabbitmq.listener.direct.auto-startup",
      "type": "java.lang.Boolean",
      "description": "Whether to start the container automatically on startup.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$DirectContainer",
      "defaultValue": true
    },
    {
      "name": "spring.rabbitmq.listener.direct.consumers-per-queue",
      "type": "java.lang.Integer",
      "description": "Number of consumers per queue.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$DirectContainer"
    },
    {
      "name": "spring.rabbitmq.listener.direct.default-requeue-rejected",
      "type": "java.lang.Boolean",
      "description": "Whether rejected deliveries are re-queued by default.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$DirectContainer"
    },
    {
      "name": "spring.rabbitmq.listener.direct.idle-event-interval",
      "type": "java.time.Duration",
      "description": "How often idle container events should be published.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$DirectContainer"
    },
    {
      "name": "spring.rabbitmq.listener.direct.prefetch",
      "type": "java.lang.Integer",
      "description": "Number of messages to be handled in a single request. It should be greater than\n or equal to the transaction size (if used).",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$DirectContainer"
    },
    {
      "name": "spring.rabbitmq.listener.direct.retry.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether publishing retries are enabled.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": false
    },
    {
      "name": "spring.rabbitmq.listener.direct.retry.initial-interval",
      "type": "java.time.Duration",
      "description": "Duration between the first and second attempt to deliver a message.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": "1000ms"
    },
    {
      "name": "spring.rabbitmq.listener.direct.retry.max-attempts",
      "type": "java.lang.Integer",
      "description": "Maximum number of attempts to deliver a message.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": 3
    },
    {
      "name": "spring.rabbitmq.listener.direct.retry.max-interval",
      "type": "java.time.Duration",
      "description": "Maximum duration between attempts.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": "10000ms"
    },
    {
      "name": "spring.rabbitmq.listener.direct.retry.multiplier",
      "type": "java.lang.Double",
      "description": "Multiplier to apply to the previous retry interval.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": 1
    },
    {
      "name": "spring.rabbitmq.listener.direct.retry.stateless",
      "type": "java.lang.Boolean",
      "description": "Whether retries are stateless or stateful.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": true
    },
    {
      "name": "spring.rabbitmq.listener.simple.acknowledge-mode",
      "type": "org.springframework.amqp.core.AcknowledgeMode",
      "description": "Acknowledge mode of container.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$SimpleContainer"
    },
    {
      "name": "spring.rabbitmq.listener.simple.auto-startup",
      "type": "java.lang.Boolean",
      "description": "Whether to start the container automatically on startup.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$SimpleContainer",
      "defaultValue": true
    },
    {
      "name": "spring.rabbitmq.listener.simple.concurrency",
      "type": "java.lang.Integer",
      "description": "Minimum number of listener invoker threads.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$SimpleContainer"
    },
    {
      "name": "spring.rabbitmq.listener.simple.default-requeue-rejected",
      "type": "java.lang.Boolean",
      "description": "Whether rejected deliveries are re-queued by default.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$SimpleContainer"
    },
    {
      "name": "spring.rabbitmq.listener.simple.idle-event-interval",
      "type": "java.time.Duration",
      "description": "How often idle container events should be published.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$SimpleContainer"
    },
    {
      "name": "spring.rabbitmq.listener.simple.max-concurrency",
      "type": "java.lang.Integer",
      "description": "Maximum number of listener invoker threads.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$SimpleContainer"
    },
    {
      "name": "spring.rabbitmq.listener.simple.prefetch",
      "type": "java.lang.Integer",
      "description": "Number of messages to be handled in a single request. It should be greater than\n or equal to the transaction size (if used).",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$SimpleContainer"
    },
    {
      "name": "spring.rabbitmq.listener.simple.retry.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether publishing retries are enabled.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": false
    },
    {
      "name": "spring.rabbitmq.listener.simple.retry.initial-interval",
      "type": "java.time.Duration",
      "description": "Duration between the first and second attempt to deliver a message.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": "1000ms"
    },
    {
      "name": "spring.rabbitmq.listener.simple.retry.max-attempts",
      "type": "java.lang.Integer",
      "description": "Maximum number of attempts to deliver a message.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": 3
    },
    {
      "name": "spring.rabbitmq.listener.simple.retry.max-interval",
      "type": "java.time.Duration",
      "description": "Maximum duration between attempts.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": "10000ms"
    },
    {
      "name": "spring.rabbitmq.listener.simple.retry.multiplier",
      "type": "java.lang.Double",
      "description": "Multiplier to apply to the previous retry interval.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": 1
    },
    {
      "name": "spring.rabbitmq.listener.simple.retry.stateless",
      "type": "java.lang.Boolean",
      "description": "Whether retries are stateless or stateful.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": true
    },
    {
      "name": "spring.rabbitmq.listener.simple.transaction-size",
      "type": "java.lang.Integer",
      "description": "Number of messages to be processed in a transaction. That is, the number of\n messages between acks. For best results, it should be less than or equal to the\n prefetch count.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$SimpleContainer"
    },
    {
      "name": "spring.rabbitmq.listener.type",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ContainerType",
      "description": "Listener container type.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Listener",
      "defaultValue": "simple"
    },
    {
      "name": "spring.rabbitmq.password",
      "type": "java.lang.String",
      "description": "Login to authenticate against the broker.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "defaultValue": "guest"
    },
    {
      "name": "spring.rabbitmq.port",
      "type": "java.lang.Integer",
      "description": "RabbitMQ port.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "defaultValue": 5672
    },
    {
      "name": "spring.rabbitmq.publisher-confirms",
      "type": "java.lang.Boolean",
      "description": "Whether to enable publisher confirms.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "defaultValue": false
    },
    {
      "name": "spring.rabbitmq.publisher-returns",
      "type": "java.lang.Boolean",
      "description": "Whether to enable publisher returns.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "defaultValue": false
    },
    {
      "name": "spring.rabbitmq.requested-heartbeat",
      "type": "java.time.Duration",
      "description": "Requested heartbeat timeout; zero for none. If a duration suffix is not specified,\n seconds will be used.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties"
    },
    {
      "name": "spring.rabbitmq.ssl.algorithm",
      "type": "java.lang.String",
      "description": "SSL algorithm to use. By default, configured by the Rabbit client library.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl"
    },
    {
      "name": "spring.rabbitmq.ssl.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable SSL support.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl",
      "defaultValue": false
    },
    {
      "name": "spring.rabbitmq.ssl.key-store",
      "type": "java.lang.String",
      "description": "Path to the key store that holds the SSL certificate.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl"
    },
    {
      "name": "spring.rabbitmq.ssl.key-store-password",
      "type": "java.lang.String",
      "description": "Password used to access the key store.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl"
    },
    {
      "name": "spring.rabbitmq.ssl.key-store-type",
      "type": "java.lang.String",
      "description": "Key store type.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl",
      "defaultValue": "PKCS12"
    },
    {
      "name": "spring.rabbitmq.ssl.trust-store",
      "type": "java.lang.String",
      "description": "Trust store that holds SSL certificates.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl"
    },
    {
      "name": "spring.rabbitmq.ssl.trust-store-password",
      "type": "java.lang.String",
      "description": "Password used to access the trust store.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl"
    },
    {
      "name": "spring.rabbitmq.ssl.trust-store-type",
      "type": "java.lang.String",
      "description": "Trust store type.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl",
      "defaultValue": "JKS"
    },
    {
      "name": "spring.rabbitmq.template.exchange",
      "type": "java.lang.String",
      "description": "Name of the default exchange to use for send operations.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Template",
      "defaultValue": ""
    },
    {
      "name": "spring.rabbitmq.template.mandatory",
      "type": "java.lang.Boolean",
      "description": "Whether to enable mandatory messages.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Template"
    },
    {
      "name": "spring.rabbitmq.template.receive-timeout",
      "type": "java.time.Duration",
      "description": "Timeout for `receive()` operations.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Template"
    },
    {
      "name": "spring.rabbitmq.template.reply-timeout",
      "type": "java.time.Duration",
      "description": "Timeout for `sendAndReceive()` operations.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Template"
    },
    {
      "name": "spring.rabbitmq.template.retry.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether publishing retries are enabled.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Retry",
      "defaultValue": false
    },
    {
      "name": "spring.rabbitmq.template.retry.initial-interval",
      "type": "java.time.Duration",
      "description": "Duration between the first and second attempt to deliver a message.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Retry",
      "defaultValue": "1000ms"
    },
    {
      "name": "spring.rabbitmq.template.retry.max-attempts",
      "type": "java.lang.Integer",
      "description": "Maximum number of attempts to deliver a message.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Retry",
      "defaultValue": 3
    },
    {
      "name": "spring.rabbitmq.template.retry.max-interval",
      "type": "java.time.Duration",
      "description": "Maximum duration between attempts.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Retry",
      "defaultValue": "10000ms"
    },
    {
      "name": "spring.rabbitmq.template.retry.multiplier",
      "type": "java.lang.Double",
      "description": "Multiplier to apply to the previous retry interval.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Retry",
      "defaultValue": 1
    },
    {
      "name": "spring.rabbitmq.template.routing-key",
      "type": "java.lang.String",
      "description": "Value of a default routing key to use for send operations.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Template",
      "defaultValue": ""
    },
    {
      "name": "spring.rabbitmq.username",
      "type": "java.lang.String",
      "description": "Login user to authenticate to the broker.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "defaultValue": "guest"
    },
    {
      "name": "spring.rabbitmq.virtual-host",
      "type": "java.lang.String",
      "description": "Virtual host to use when connecting to the broker.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties"
    },
    {
      "name": "spring.reactor.stacktrace-mode.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether Reactor should collect stacktrace information at runtime.",
      "sourceType": "org.springframework.boot.autoconfigure.reactor.core.ReactorCoreProperties$StacktraceMode",
      "defaultValue": false
    },
    {
      "name": "spring.redis.cluster.max-redirects",
      "type": "java.lang.Integer",
      "description": "Maximum number of redirects to follow when executing commands across the\n cluster.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Cluster"
    },
    {
      "name": "spring.redis.cluster.nodes",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of \"host:port\" pairs to bootstrap from. This represents an\n \"initial\" list of cluster nodes and is required to have at least one entry.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Cluster"
    },
    {
      "name": "spring.redis.database",
      "type": "java.lang.Integer",
      "description": "Database index used by the connection factory.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "defaultValue": 0
    },
    {
      "name": "spring.redis.host",
      "type": "java.lang.String",
      "description": "Redis server host.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "defaultValue": "localhost"
    },
    {
      "name": "spring.redis.jedis.pool.max-active",
      "type": "java.lang.Integer",
      "description": "Maximum number of connections that can be allocated by the pool at a given\n time. Use a negative value for no limit.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool",
      "defaultValue": 8
    },
    {
      "name": "spring.redis.jedis.pool.max-idle",
      "type": "java.lang.Integer",
      "description": "Maximum number of \"idle\" connections in the pool. Use a negative value to\n indicate an unlimited number of idle connections.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool",
      "defaultValue": 8
    },
    {
      "name": "spring.redis.jedis.pool.max-wait",
      "type": "java.time.Duration",
      "description": "Maximum amount of time a connection allocation should block before throwing an\n exception when the pool is exhausted. Use a negative value to block\n indefinitely.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool",
      "defaultValue": "-1ms"
    },
    {
      "name": "spring.redis.jedis.pool.min-idle",
      "type": "java.lang.Integer",
      "description": "Target for the minimum number of idle connections to maintain in the pool. This\n setting only has an effect if it is positive.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool",
      "defaultValue": 0
    },
    {
      "name": "spring.redis.lettuce.pool.max-active",
      "type": "java.lang.Integer",
      "description": "Maximum number of connections that can be allocated by the pool at a given\n time. Use a negative value for no limit.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool",
      "defaultValue": 8
    },
    {
      "name": "spring.redis.lettuce.pool.max-idle",
      "type": "java.lang.Integer",
      "description": "Maximum number of \"idle\" connections in the pool. Use a negative value to\n indicate an unlimited number of idle connections.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool",
      "defaultValue": 8
    },
    {
      "name": "spring.redis.lettuce.pool.max-wait",
      "type": "java.time.Duration",
      "description": "Maximum amount of time a connection allocation should block before throwing an\n exception when the pool is exhausted. Use a negative value to block\n indefinitely.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool",
      "defaultValue": "-1ms"
    },
    {
      "name": "spring.redis.lettuce.pool.min-idle",
      "type": "java.lang.Integer",
      "description": "Target for the minimum number of idle connections to maintain in the pool. This\n setting only has an effect if it is positive.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool",
      "defaultValue": 0
    },
    {
      "name": "spring.redis.lettuce.shutdown-timeout",
      "type": "java.time.Duration",
      "description": "Shutdown timeout.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Lettuce",
      "defaultValue": "100ms"
    },
    {
      "name": "spring.redis.password",
      "type": "java.lang.String",
      "description": "Login password of the redis server.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties"
    },
    {
      "name": "spring.redis.pool.max-active",
      "type": "java.lang.Integer",
      "description": "Max number of connections that can be allocated by the pool at a given time.\n Use a negative value for no limit.",
      "defaultValue": 8,
      "deprecated": true,
      "deprecation": {"replacement": "spring.redis.jedis.pool.max-idle"}
    },
    {
      "name": "spring.redis.pool.max-idle",
      "type": "java.lang.Integer",
      "description": "Max number of \"idle\" connections in the pool. Use a negative value to indicate\n an unlimited number of idle connections.",
      "defaultValue": 8,
      "deprecated": true,
      "deprecation": {"replacement": "spring.redis.jedis.pool.max-idle"}
    },
    {
      "name": "spring.redis.pool.max-wait",
      "type": "java.lang.Integer",
      "description": "Maximum amount of time (in milliseconds) a connection allocation should block\n before throwing an exception when the pool is exhausted. Use a negative value\n to block indefinitely.",
      "defaultValue": -1,
      "deprecated": true,
      "deprecation": {"replacement": "spring.redis.jedis.pool.max-wait"}
    },
    {
      "name": "spring.redis.pool.min-idle",
      "type": "java.lang.Integer",
      "description": "Target for the minimum number of idle connections to maintain in the pool. This\n setting only has an effect if it is positive.",
      "defaultValue": 0,
      "deprecated": true,
      "deprecation": {"replacement": "spring.redis.jedis.pool.min-idle"}
    },
    {
      "name": "spring.redis.port",
      "type": "java.lang.Integer",
      "description": "Redis server port.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "defaultValue": 6379
    },
    {
      "name": "spring.redis.sentinel.master",
      "type": "java.lang.String",
      "description": "Name of the Redis server.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Sentinel"
    },
    {
      "name": "spring.redis.sentinel.nodes",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of \"host:port\" pairs.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Sentinel"
    },
    {
      "name": "spring.redis.ssl",
      "type": "java.lang.Boolean",
      "description": "Whether to enable SSL support.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "defaultValue": false
    },
    {
      "name": "spring.redis.timeout",
      "type": "java.time.Duration",
      "description": "Connection timeout.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties"
    },
    {
      "name": "spring.redis.url",
      "type": "java.lang.String",
      "description": "Connection URL. Overrides host, port, and password. User is ignored. Example:\n redis://user:password@example.com:6379",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties"
    },
    {
      "name": "spring.resources.add-mappings",
      "type": "java.lang.Boolean",
      "description": "Whether to enable default resource handling.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties",
      "defaultValue": true
    },
    {
      "name": "spring.resources.cache-period",
      "type": "java.lang.Integer",
      "description": "Cache period for the resources served by the resource handler. If a duration suffix is not specified, seconds will be used.",
      "deprecated": true,
      "deprecation": {"replacement": "spring.resources.cache.period"}
    },
    {
      "name": "spring.resources.cache.cachecontrol.cache-private",
      "type": "java.lang.Boolean",
      "description": "Indicate that the response message is intended for a single user and must\n not be stored by a shared cache.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Cache$Cachecontrol"
    },
    {
      "name": "spring.resources.cache.cachecontrol.cache-public",
      "type": "java.lang.Boolean",
      "description": "Indicate that any cache may store the response.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Cache$Cachecontrol"
    },
    {
      "name": "spring.resources.cache.cachecontrol.max-age",
      "type": "java.time.Duration",
      "description": "Maximum time the response should be cached, in seconds if no duration\n suffix is not specified.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Cache$Cachecontrol"
    },
    {
      "name": "spring.resources.cache.cachecontrol.must-revalidate",
      "type": "java.lang.Boolean",
      "description": "Indicate that once it has become stale, a cache must not use the response\n without re-validating it with the server.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Cache$Cachecontrol"
    },
    {
      "name": "spring.resources.cache.cachecontrol.no-cache",
      "type": "java.lang.Boolean",
      "description": "Indicate that the cached response can be reused only if re-validated with\n the server.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Cache$Cachecontrol"
    },
    {
      "name": "spring.resources.cache.cachecontrol.no-store",
      "type": "java.lang.Boolean",
      "description": "Indicate to not cache the response in any case.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Cache$Cachecontrol"
    },
    {
      "name": "spring.resources.cache.cachecontrol.no-transform",
      "type": "java.lang.Boolean",
      "description": "Indicate intermediaries (caches and others) that they should not transform\n the response content.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Cache$Cachecontrol"
    },
    {
      "name": "spring.resources.cache.cachecontrol.proxy-revalidate",
      "type": "java.lang.Boolean",
      "description": "Same meaning as the \"must-revalidate\" directive, except that it does not\n apply to private caches.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Cache$Cachecontrol"
    },
    {
      "name": "spring.resources.cache.cachecontrol.s-max-age",
      "type": "java.time.Duration",
      "description": "Maximum time the response should be cached by shared caches, in seconds if\n no duration suffix is not specified.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Cache$Cachecontrol"
    },
    {
      "name": "spring.resources.cache.cachecontrol.stale-if-error",
      "type": "java.time.Duration",
      "description": "Maximum time the response may be used when errors are encountered, in\n seconds if no duration suffix is not specified.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Cache$Cachecontrol"
    },
    {
      "name": "spring.resources.cache.cachecontrol.stale-while-revalidate",
      "type": "java.time.Duration",
      "description": "Maximum time the response can be served after it becomes stale, in seconds\n if no duration suffix is not specified.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Cache$Cachecontrol"
    },
    {
      "name": "spring.resources.cache.period",
      "type": "java.time.Duration",
      "description": "Cache period for the resources served by the resource handler. If a duration\n suffix is not specified, seconds will be used. Can be overridden by the\n 'spring.resources.cache.cachecontrol' properties.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Cache"
    },
    {
      "name": "spring.resources.chain.cache",
      "type": "java.lang.Boolean",
      "description": "Whether to enable caching in the Resource chain.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Chain",
      "defaultValue": true
    },
    {
      "name": "spring.resources.chain.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable the Spring Resource Handling chain. By default, disabled\n unless at least one strategy has been enabled.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Chain"
    },
    {
      "name": "spring.resources.chain.gzipped",
      "type": "java.lang.Boolean",
      "description": "Whether to enable resolution of already gzipped resources. Checks for a\n resource name variant with the \"*.gz\" extension.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Chain",
      "defaultValue": false
    },
    {
      "name": "spring.resources.chain.html-application-cache",
      "type": "java.lang.Boolean",
      "description": "Whether to enable HTML5 application cache manifest rewriting.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Chain",
      "defaultValue": false
    },
    {
      "name": "spring.resources.chain.strategy.content.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable the content Version Strategy.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Content",
      "defaultValue": false
    },
    {
      "name": "spring.resources.chain.strategy.content.paths",
      "type": "java.lang.String[]",
      "description": "Comma-separated list of patterns to apply to the content Version Strategy.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Content",
      "defaultValue": ["/**"]
    },
    {
      "name": "spring.resources.chain.strategy.fixed.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable the fixed Version Strategy.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Fixed",
      "defaultValue": false
    },
    {
      "name": "spring.resources.chain.strategy.fixed.paths",
      "type": "java.lang.String[]",
      "description": "Comma-separated list of patterns to apply to the fixed Version Strategy.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Fixed",
      "defaultValue": ["/**"]
    },
    {
      "name": "spring.resources.chain.strategy.fixed.version",
      "type": "java.lang.String",
      "description": "Version string to use for the fixed Version Strategy.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Fixed"
    },
    {
      "name": "spring.resources.static-locations",
      "type": "java.lang.String[]",
      "description": "Locations of static resources. Defaults to classpath:[/META-INF/resources/,\n /resources/, /static/, /public/].",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties",
      "defaultValue": [
        "classpath:/META-INF/resources/",
        "classpath:/resources/",
        "classpath:/static/",
        "classpath:/public/"
      ]
    },
    {
      "name": "spring.security.filter.dispatcher-types",
      "type": "java.util.Set<org.springframework.boot.web.servlet.DispatcherType>",
      "description": "Security filter chain dispatcher types.",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$Filter",
      "defaultValue": [
        "async",
        "error",
        "request"
      ]
    },
    {
      "name": "spring.security.filter.order",
      "type": "java.lang.Integer",
      "description": "Security filter chain order.",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$Filter",
      "defaultValue": -100
    },
    {
      "name": "spring.security.oauth2.client.provider",
      "type": "java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties.Provider>",
      "description": "OAuth provider details.",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties"
    },
    {
      "name": "spring.security.oauth2.client.registration",
      "type": "java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties.Registration>",
      "description": "OAuth client registrations.",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties"
    },
    {
      "name": "spring.security.user.name",
      "type": "java.lang.String",
      "description": "Default user name.",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$User",
      "defaultValue": "user"
    },
    {
      "name": "spring.security.user.password",
      "type": "java.lang.String",
      "description": "Password for the default user name.",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$User"
    },
    {
      "name": "spring.security.user.roles",
      "type": "java.util.List<java.lang.String>",
      "description": "Granted roles for the default user name.",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$User"
    },
    {
      "name": "spring.sendgrid.api-key",
      "type": "java.lang.String",
      "description": "SendGrid API key.",
      "sourceType": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties"
    },
    {
      "name": "spring.sendgrid.password",
      "type": "java.lang.String",
      "description": "SendGrid password.",
      "deprecated": true,
      "deprecation": {"reason": "The use of a username and password is no longer supported (Use spring.sendgrid.api-key instead)."}
    },
    {
      "name": "spring.sendgrid.proxy.host",
      "type": "java.lang.String",
      "description": "SendGrid proxy host.",
      "sourceType": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties$Proxy"
    },
    {
      "name": "spring.sendgrid.proxy.port",
      "type": "java.lang.Integer",
      "description": "SendGrid proxy port.",
      "sourceType": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties$Proxy"
    },
    {
      "name": "spring.sendgrid.username",
      "type": "java.lang.String",
      "description": "SendGrid username. Alternative to api key.",
      "deprecated": true,
      "deprecation": {"reason": "The use of a username and password is no longer supported (Use spring.sendgrid.api-key instead)."}
    },
    {
      "name": "spring.servlet.multipart.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable support of multipart uploads.",
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.MultipartProperties",
      "defaultValue": true
    },
    {
      "name": "spring.servlet.multipart.file-size-threshold",
      "type": "java.lang.String",
      "description": "Threshold after which files are written to disk. Values can use the suffixes \"MB\"\n or \"KB\" to indicate megabytes or kilobytes, respectively.",
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.MultipartProperties",
      "defaultValue": "0"
    },
    {
      "name": "spring.servlet.multipart.location",
      "type": "java.lang.String",
      "description": "Intermediate location of uploaded files.",
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.MultipartProperties"
    },
    {
      "name": "spring.servlet.multipart.max-file-size",
      "type": "java.lang.String",
      "description": "Max file size. Values can use the suffixes \"MB\" or \"KB\" to indicate megabytes or\n kilobytes, respectively.",
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.MultipartProperties",
      "defaultValue": "1MB"
    },
    {
      "name": "spring.servlet.multipart.max-request-size",
      "type": "java.lang.String",
      "description": "Max request size. Values can use the suffixes \"MB\" or \"KB\" to indicate megabytes or\n kilobytes, respectively.",
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.MultipartProperties",
      "defaultValue": "10MB"
    },
    {
      "name": "spring.servlet.multipart.resolve-lazily",
      "type": "java.lang.Boolean",
      "description": "Whether to resolve the multipart request lazily at the time of file or parameter\n access.",
      "sourceType": "org.springframework.boot.autoconfigure.web.servlet.MultipartProperties",
      "defaultValue": false
    },
    {
      "name": "spring.session.hazelcast.flush-mode",
      "type": "org.springframework.session.hazelcast.HazelcastFlushMode",
      "description": "Sessions flush mode.",
      "sourceType": "org.springframework.boot.autoconfigure.session.HazelcastSessionProperties",
      "defaultValue": "on-save"
    },
    {
      "name": "spring.session.hazelcast.map-name",
      "type": "java.lang.String",
      "description": "Name of the map used to store sessions.",
      "sourceType": "org.springframework.boot.autoconfigure.session.HazelcastSessionProperties",
      "defaultValue": "spring:session:sessions"
    },
    {
      "name": "spring.session.jdbc.cleanup-cron",
      "type": "java.lang.String",
      "description": "Cron expression for expired session cleanup job.",
      "sourceType": "org.springframework.boot.autoconfigure.session.JdbcSessionProperties",
      "defaultValue": "0 * * * * *"
    },
    {
      "name": "spring.session.jdbc.initialize-schema",
      "type": "org.springframework.boot.jdbc.DataSourceInitializationMode",
      "description": "Database schema initialization mode.",
      "sourceType": "org.springframework.boot.autoconfigure.session.JdbcSessionProperties",
      "defaultValue": "embedded"
    },
    {
      "name": "spring.session.jdbc.initializer.enabled",
      "type": "java.lang.Boolean",
      "description": "Create the required session tables on startup if necessary. Enabled\n automatically if the default table name is set or a custom schema is\n configured.",
      "deprecated": true,
      "deprecation": {"replacement": "spring.session.jdbc.initialize-schema"}
    },
    {
      "name": "spring.session.jdbc.schema",
      "type": "java.lang.String",
      "description": "Path to the SQL file to use to initialize the database schema.",
      "sourceType": "org.springframework.boot.autoconfigure.session.JdbcSessionProperties",
      "defaultValue": "classpath:org/springframework/session/jdbc/schema-@@platform@@.sql"
    },
    {
      "name": "spring.session.jdbc.table-name",
      "type": "java.lang.String",
      "description": "Name of the database table used to store sessions.",
      "sourceType": "org.springframework.boot.autoconfigure.session.JdbcSessionProperties",
      "defaultValue": "SPRING_SESSION"
    },
    {
      "name": "spring.session.mongo.collection-name",
      "type": "java.lang.String",
      "description": "Collection name used to store sessions.",
      "defaultValue": "sessions",
      "deprecated": true,
      "deprecation": {"replacement": "spring.session.mongodb.collection-name"}
    },
    {
      "name": "spring.session.mongodb.collection-name",
      "type": "java.lang.String",
      "description": "Collection name used to store sessions.",
      "sourceType": "org.springframework.boot.autoconfigure.session.MongoSessionProperties",
      "defaultValue": "sessions"
    },
    {
      "name": "spring.session.redis.cleanup-cron",
      "type": "java.lang.String",
      "description": "Cron expression for expired session cleanup job.",
      "sourceType": "org.springframework.boot.autoconfigure.session.RedisSessionProperties",
      "defaultValue": "0 * * * * *"
    },
    {
      "name": "spring.session.redis.flush-mode",
      "type": "org.springframework.session.data.redis.RedisFlushMode",
      "description": "Sessions flush mode.",
      "sourceType": "org.springframework.boot.autoconfigure.session.RedisSessionProperties",
      "defaultValue": "on-save"
    },
    {
      "name": "spring.session.redis.namespace",
      "type": "java.lang.String",
      "description": "Namespace for keys used to store sessions.",
      "sourceType": "org.springframework.boot.autoconfigure.session.RedisSessionProperties",
      "defaultValue": "spring:session"
    },
    {
      "name": "spring.session.servlet.filter-dispatcher-types",
      "type": "java.util.Set<org.springframework.boot.web.servlet.DispatcherType>",
      "description": "Session repository filter dispatcher types.",
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties$Servlet",
      "defaultValue": [
        "async",
        "error",
        "request"
      ]
    },
    {
      "name": "spring.session.servlet.filter-order",
      "type": "java.lang.Integer",
      "description": "Session repository filter order.",
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties$Servlet"
    },
    {
      "name": "spring.session.store-type",
      "type": "org.springframework.boot.autoconfigure.session.StoreType",
      "description": "Session store type.",
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties"
    },
    {
      "name": "spring.session.timeout",
      "type": "java.time.Duration",
      "description": "Session timeout. If a duration suffix is not specified, seconds will be used.",
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties"
    },
    {
      "name": "spring.thymeleaf.cache",
      "type": "java.lang.Boolean",
      "description": "Whether to enable template caching.",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": true
    },
    {
      "name": "spring.thymeleaf.check-template",
      "type": "java.lang.Boolean",
      "description": "Whether to check that the template exists before rendering it.",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": true
    },
    {
      "name": "spring.thymeleaf.check-template-location",
      "type": "java.lang.Boolean",
      "description": "Whether to check that the templates location exists.",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": true
    },
    {
      "name": "spring.thymeleaf.content-type",
      "type": "org.springframework.util.MimeType",
      "description": "Content-Type value.",
      "defaultValue": "text/html",
      "deprecated": true,
      "deprecation": {"replacement": "spring.thymeleaf.servlet.content-type"}
    },
    {
      "name": "spring.thymeleaf.enable-spring-el-compiler",
      "type": "java.lang.Boolean",
      "description": "Enable the SpringEL compiler in SpringEL expressions.",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": false
    },
    {
      "name": "spring.thymeleaf.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether to enable Thymeleaf view resolution for Web frameworks.",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": true
    },
    {
      "name": "spring.thymeleaf.encoding",
      "type": "java.nio.charset.Charset",
      "description": "Template files encoding.",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": "UTF-8"
    },
    {
      "name": "spring.thymeleaf.excluded-view-names",
      "type": "java.lang.String[]",
      "description": "Comma-separated list of view names (patterns allowed) that should be excluded from\n resolution.",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties"
    },
    {
      "name": "spring.thymeleaf.mode",
      "type": "java.lang.String",
      "description": "Template mode to be applied to templates. See also Thymeleaf's TemplateMode enum.",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": "HTML"
    },
    {
      "name": "spring.thymeleaf.prefix",
      "type": "java.lang.String",
      "description": "Prefix that gets prepended to view names when building a URL.",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": "classpath:/templates/"
    },
    {
      "name": "spring.thymeleaf.reactive.chunked-mode-view-names",
      "type": "java.lang.String[]",
      "description": "Comma-separated list of view names (patterns allowed) that should be the only\n ones executed in CHUNKED mode when a max chunk size is set.",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties$Reactive"
    },
    {
      "name": "spring.thymeleaf.reactive.full-mode-view-names",
      "type": "java.lang.String[]",
      "description": "Comma-separated list of view names (patterns allowed) that should be executed\n in FULL mode even if a max chunk size is set.",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties$Reactive"
    },
    {
      "name": "spring.thymeleaf.reactive.max-chunk-size",
      "type": "java.lang.Integer",
      "description": "Maximum size of data buffers used for writing to the response, in bytes.\n Templates will execute in CHUNKED mode by default if this is set.",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties$Reactive",
      "defaultValue": 0
    },
    {
      "name": "spring.thymeleaf.reactive.media-types",
      "type": "java.util.List<org.springframework.http.MediaType>",
      "description": "Media types supported by the view technology.",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties$Reactive"
    },
    {
      "name": "spring.thymeleaf.servlet.content-type",
      "type": "org.springframework.util.MimeType",
      "description": "Content-Type value written to HTTP responses.",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties$Servlet",
      "defaultValue": "text/html"
    },
    {
      "name": "spring.thymeleaf.suffix",
      "type": "java.lang.String",
      "description": "Suffix that gets appended to view names when building a URL.",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": ".html"
    },
    {
      "name": "spring.thymeleaf.template-resolver-order",
      "type": "java.lang.Integer",
      "description": "Order of the template resolver in the chain. By default, the template resolver is\n first in the chain. Order start at 1 and should only be set if you have defined\n additional \"TemplateResolver\" beans.",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties"
    },
    {
      "name": "spring.thymeleaf.view-names",
      "type": "java.lang.String[]",
      "description": "Comma-separated list of view names (patterns allowed) that can be resolved.",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties"
    },
    {
      "name": "spring.transaction.default-timeout",
      "type": "java.time.Duration",
      "description": "Default transaction timeout. If a duration suffix is not specified, seconds will be\n used.",
      "sourceType": "org.springframework.boot.autoconfigure.transaction.TransactionProperties"
    },
    {
      "name": "spring.transaction.rollback-on-commit-failure",
      "type": "java.lang.Boolean",
      "description": "Whether to roll back on commit failures.",
      "sourceType": "org.springframework.boot.autoconfigure.transaction.TransactionProperties"
    },
    {
      "name": "spring.webflux.date-format",
      "type": "java.lang.String",
      "description": "Date format to use. For instance, `dd/MM/yyyy`.",
      "sourceType": "org.springframework.boot.autoconfigure.web.reactive.WebFluxProperties"
    },
    {
      "name": "spring.webflux.static-path-pattern",
      "type": "java.lang.String",
      "description": "Path pattern used for static resources.",
      "sourceType": "org.springframework.boot.autoconfigure.web.reactive.WebFluxProperties",
      "defaultValue": "/**"
    },
    {
      "name": "spring.webservices.path",
      "type": "java.lang.String",
      "description": "Path that serves as the base URI for the services.",
      "sourceType": "org.springframework.boot.autoconfigure.webservices.WebServicesProperties",
      "defaultValue": "/services"
    },
    {
      "name": "spring.webservices.servlet.init",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Servlet init parameters to pass to Spring Web Services.",
      "sourceType": "org.springframework.boot.autoconfigure.webservices.WebServicesProperties$Servlet"
    },
    {
      "name": "spring.webservices.servlet.load-on-startup",
      "type": "java.lang.Integer",
      "description": "Load on startup priority of the Spring Web Services servlet.",
      "sourceType": "org.springframework.boot.autoconfigure.webservices.WebServicesProperties$Servlet",
      "defaultValue": -1
    },
    {
      "name": "spring.webservices.wsdl-locations",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of locations of WSDLs and accompanying XSDs to be exposed as beans."
    },
    {
      "name": "trace",
      "type": "java.lang.Boolean",
      "description": "Enable trace logs.",
      "sourceType": "org.springframework.boot.context.logging.LoggingApplicationListener",
      "defaultValue": false
    }
  ],
  "hints": [
    {
      "name": "logging.level.keys",
      "values": [{
        "value": "root",
        "description": "Root logger used to assign the default logging level."
      }],
      "providers": [{"name": "logger-name"}]
    },
    {
      "name": "logging.level.values",
      "values": [
        {"value": "trace"},
        {"value": "debug"},
        {"value": "info"},
        {"value": "warn"},
        {"value": "error"},
        {"value": "fatal"},
        {"value": "off"}
      ],
      "providers": [{"name": "any"}]
    },
    {
      "name": "management.endpoints.web.cors.allowed-headers",
      "values": [{"value": "*"}],
      "providers": [{"name": "any"}]
    },
    {
      "name": "management.endpoints.web.cors.allowed-methods",
      "values": [{"value": "*"}],
      "providers": [{"name": "any"}]
    },
    {
      "name": "management.endpoints.web.cors.allowed-origins",
      "values": [{"value": "*"}],
      "providers": [{"name": "any"}]
    },
    {
      "name": "management.endpoints.web.path-mapping.keys",
      "values": [
        {"value": "auditevents"},
        {"value": "beans"},
        {"value": "conditions"},
        {"value": "configprops"},
        {"value": "env"},
        {"value": "flyway"},
        {"value": "health"},
        {"value": "heapdump"},
        {"value": "httptrace"},
        {"value": "info"},
        {"value": "liquibase"},
        {"value": "logfile"},
        {"value": "loggers"},
        {"value": "mappings"},
        {"value": "metrics"},
        {"value": "prometheus"},
        {"value": "scheduledtasks"},
        {"value": "sessions"},
        {"value": "shutdown"},
        {"value": "threaddump"}
      ],
      "providers": [{"name": "any"}]
    },
    {
      "name": "management.health.status.order",
      "values": [
        {"value": "UNKNOWN"},
        {"value": "UP"},
        {"value": "DOWN"},
        {"value": "OUT_OF_SERVICE"}
      ],
      "providers": [{"name": "any"}]
    },
    {
      "name": "server.servlet.jsp.class-name",
      "providers": [{
        "name": "class-reference",
        "parameters": {"target": "javax.servlet.http.HttpServlet"}
      }]
    },
    {
      "name": "spring.cache.jcache.provider",
      "providers": [{
        "name": "class-reference",
        "parameters": {"target": "javax.cache.spi.CachingProvider"}
      }]
    },
    {
      "name": "spring.data.cassandra.schema-action",
      "providers": [{
        "name": "handle-as",
        "parameters": {"target": "org.springframework.data.cassandra.config.SchemaAction"}
      }]
    },
    {
      "name": "spring.data.mongodb.field-naming-strategy",
      "providers": [{
        "name": "class-reference",
        "parameters": {"target": "org.springframework.data.mapping.model.FieldNamingStrategy"}
      }]
    },
    {
      "name": "spring.datasource.data",
      "providers": [{
        "name": "handle-as",
        "parameters": {"target": "java.util.List<org.springframework.core.io.Resource>"}
      }]
    },
    {
      "name": "spring.datasource.driver-class-name",
      "providers": [{
        "name": "class-reference",
        "parameters": {"target": "java.sql.Driver"}
      }]
    },
    {
      "name": "spring.datasource.schema",
      "providers": [{
        "name": "handle-as",
        "parameters": {"target": "java.util.List<org.springframework.core.io.Resource>"}
      }]
    },
    {
      "name": "spring.datasource.xa.data-source-class-name",
      "providers": [{
        "name": "class-reference",
        "parameters": {"target": "javax.sql.XADataSource"}
      }]
    },
    {
      "name": "spring.http.converters.preferred-json-mapper",
      "values": [
        {"value": "gson"},
        {"value": "jackson"},
        {"value": "jsonb"}
      ],
      "providers": [{"name": "any"}]
    },
    {
      "name": "spring.jmx.server",
      "providers": [{
        "name": "spring-bean-reference",
        "parameters": {"target": "javax.management.MBeanServer"}
      }]
    },
    {
      "name": "spring.jpa.hibernate.ddl-auto",
      "values": [
        {
          "value": "none",
          "description": "Disable DDL handling."
        },
        {
          "value": "validate",
          "description": "Validate the schema, make no changes to the database."
        },
        {
          "value": "update",
          "description": "Update the schema if necessary."
        },
        {
          "value": "create",
          "description": "Create the schema and destroy previous data."
        },
        {
          "value": "create-drop",
          "description": "Create and then destroy the schema at the end of the session."
        }
      ]
    },
    {
      "name": "spring.jpa.hibernate.naming.implicit-strategy",
      "providers": [{
        "name": "class-reference",
        "parameters": {"target": "org.hibernate.boot.model.naming.ImplicitNamingStrategy"}
      }]
    },
    {
      "name": "spring.jpa.hibernate.naming.physical-strategy",
      "providers": [{
        "name": "class-reference",
        "parameters": {"target": "org.hibernate.boot.model.naming.PhysicalNamingStrategy"}
      }]
    },
    {
      "name": "spring.kafka.consumer.auto-offset-reset",
      "values": [
        {
          "value": "earliest",
          "description": "Automatically reset the offset to the earliest offset."
        },
        {
          "value": "latest",
          "description": "Automatically reset the offset to the latest offset."
        },
        {
          "value": "none",
          "description": "Throw exception to the consumer if no previous offset is found for the consumer's group."
        },
        {
          "value": "exception",
          "description": "Throw exception to the consumer."
        }
      ],
      "providers": [{"name": "any"}]
    },
    {
      "name": "spring.kafka.consumer.key-deserializer",
      "providers": [{
        "name": "handle-as",
        "parameters": {"target": "org.apache.kafka.common.serialization.Deserializer"}
      }]
    },
    {
      "name": "spring.kafka.consumer.value-deserializer",
      "providers": [{
        "name": "handle-as",
        "parameters": {"target": "org.apache.kafka.common.serialization.Deserializer"}
      }]
    },
    {
      "name": "spring.kafka.producer.key-serializer",
      "providers": [{
        "name": "handle-as",
        "parameters": {"target": "org.apache.kafka.common.serialization.Serializer"}
      }]
    },
    {
      "name": "spring.kafka.producer.value-serializer",
      "providers": [{
        "name": "handle-as",
        "parameters": {"target": "org.apache.kafka.common.serialization.Serializer"}
      }]
    },
    {
      "name": "spring.liquibase.change-log",
      "providers": [{
        "name": "handle-as",
        "parameters": {"target": "org.springframework.core.io.Resource"}
      }]
    },
    {
      "name": "spring.profiles.active",
      "providers": [{"name": "spring-profile-name"}]
    },
    {
      "name": "spring.profiles.include",
      "providers": [{"name": "spring-profile-name"}]
    }
  ]
}